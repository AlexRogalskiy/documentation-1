exports.ids = [36];
exports.modules = {

/***/ "./docs/gitlab/deployment/android.md":
/*!*******************************************!*\
  !*** ./docs/gitlab/deployment/android.md ***!
  \*******************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("# Android\r\n\r\nBefore `2018.4.8f1` for 2018 versions and before `2019.2.4f1` for 2019 versions, you will need a specific Unity license (because that is not the same docker image). Add the content of your specific Unity license in your CI's environment variable : `UNITY_LICENSE_CONTENT_ANDROID`. _This is not required anymore now that images share a base image [See related change](https://gitlab.com/game-ci/unity3d/merge_requests/63)_\r\n\r\nBy default the apk is not signed and the build will use the Unity's default debug key.\r\nFor _security reasons_, **you should not add your keystore to git**.\r\n\r\n## Encode your keystore\r\n\r\nEncode your keystore file as base64 using openssl:\r\n\r\n```bash\r\nopenssl base64 -A -in yourKeystore.keystore\r\n```\r\n\r\nCopy the result to your CI's environment variable `ANDROID_KEYSTORE_BASE64`\r\n\r\nAdd following environment variables:\r\n\r\n- `KEYSTORE_PASS`: Keystore pass\r\n- `KEY_ALIAS_NAME`: Keystore alias name to use (if not set, the program will use the alias name set in Project's PlayerSettings)\r\n- `KEY_ALIAS_PASS`: Keystore alias pass to use\r\n\r\nNote about _keystore security_, if you would like to use another solution for storage, see [Where to Store Android KeyStore File in CI/CD Cycle?](https://android.jlelse.eu/where-to-store-android-keystore-file-in-ci-cd-cycle-2365f4e02e57).\r\n\r\n### Android app bundle\r\n\r\n`BUILD_APP_BUNDLE` env var is defined in `gitlab-ci.yml`. Set it to `true` to build an `.aab` file. Note: to build an android app bundle, you need an image with **Android NDK**.\r\n\r\nSee [related issue gableroux/unity3d#61](https://gitlab.com/game-ci/unity3d/issues/61)\r\n\r\n### Bundle version code\r\n\r\nThe bundle version code must be increment for each deployed build.\r\n\r\nTo simplify the process, the `BUNDLE_VERSION_CODE` env var is used and set as bundle version code.\r\n\r\nCurrently, for gitlab, `BUNDLE_VERSION_CODE = $CI_PIPELINE_IID`. [Documentation](https://docs.gitlab.com/ee/ci/variables/predefined_variables.html)  \r\nIf you use another CI solution, set a CI env var incrementing for each pipeline.\r\n\r\n### Fastlane supply (deployement)\r\n\r\nFollow [setup instructions](https://docs.fastlane.tools/actions/supply/) to get a google play console token, then, add the content to env var `GPC_TOKEN`.\r\n\r\nUncomment the `#deploy-android` job in gitlab-ci.yml and replace `com.youcompany.yourgame` by your package name.\r\n\r\nYou can change the track `internal` to `alpha`, `beta` or `production` (Note: if you are using the `internal` track you will also have to mark your release as a draft in the `fastlane supply` command using `--release_status draft`).\r\n\r\n**Gemfile**\r\n\r\nYou will also need to add a Gemfile to your project to install the `fastlane` gem. Something like the following:\r\n\r\n```\r\nsource \"https://rubygems.org\"\r\n\r\ngem \"fastlane\"\r\n```\r\n\r\nand then copy the file to the current directory prior to installing the gem. eg `cp $CI_PROJECT_DIR/Gemfile .`.\r\n\r\nThat is the simplest way with command line but you can also make `fastlane/Fastfile` and `fastlane/Appfile`, with the following command after building a temporary gradle project (export gradle project option in Unity build settings):\r\n\r\n```bash\r\nfastlane init\r\n```\r\n\r\nThen run the following command:\r\n\r\n```bash\r\nfastlane supply init\r\n```\r\n\r\nand update all metadata, images, changelogs, etc... These will be uploaded to the store everytime. Refer to [fastlane supply documentation](https://docs.fastlane.tools/actions/supply/) for more details.\r\n");

/***/ })

};;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9kb2NzL2dpdGxhYi9kZXBsb3ltZW50L2FuZHJvaWQubWQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQTtBQUFlLDRrSEFBNmdILEUiLCJmaWxlIjoiMzYuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBcIiMgQW5kcm9pZFxcclxcblxcclxcbkJlZm9yZSBgMjAxOC40LjhmMWAgZm9yIDIwMTggdmVyc2lvbnMgYW5kIGJlZm9yZSBgMjAxOS4yLjRmMWAgZm9yIDIwMTkgdmVyc2lvbnMsIHlvdSB3aWxsIG5lZWQgYSBzcGVjaWZpYyBVbml0eSBsaWNlbnNlIChiZWNhdXNlIHRoYXQgaXMgbm90IHRoZSBzYW1lIGRvY2tlciBpbWFnZSkuIEFkZCB0aGUgY29udGVudCBvZiB5b3VyIHNwZWNpZmljIFVuaXR5IGxpY2Vuc2UgaW4geW91ciBDSSdzIGVudmlyb25tZW50IHZhcmlhYmxlIDogYFVOSVRZX0xJQ0VOU0VfQ09OVEVOVF9BTkRST0lEYC4gX1RoaXMgaXMgbm90IHJlcXVpcmVkIGFueW1vcmUgbm93IHRoYXQgaW1hZ2VzIHNoYXJlIGEgYmFzZSBpbWFnZSBbU2VlIHJlbGF0ZWQgY2hhbmdlXShodHRwczovL2dpdGxhYi5jb20vZ2FtZS1jaS91bml0eTNkL21lcmdlX3JlcXVlc3RzLzYzKV9cXHJcXG5cXHJcXG5CeSBkZWZhdWx0IHRoZSBhcGsgaXMgbm90IHNpZ25lZCBhbmQgdGhlIGJ1aWxkIHdpbGwgdXNlIHRoZSBVbml0eSdzIGRlZmF1bHQgZGVidWcga2V5LlxcclxcbkZvciBfc2VjdXJpdHkgcmVhc29uc18sICoqeW91IHNob3VsZCBub3QgYWRkIHlvdXIga2V5c3RvcmUgdG8gZ2l0KiouXFxyXFxuXFxyXFxuIyMgRW5jb2RlIHlvdXIga2V5c3RvcmVcXHJcXG5cXHJcXG5FbmNvZGUgeW91ciBrZXlzdG9yZSBmaWxlIGFzIGJhc2U2NCB1c2luZyBvcGVuc3NsOlxcclxcblxcclxcbmBgYGJhc2hcXHJcXG5vcGVuc3NsIGJhc2U2NCAtQSAtaW4geW91cktleXN0b3JlLmtleXN0b3JlXFxyXFxuYGBgXFxyXFxuXFxyXFxuQ29weSB0aGUgcmVzdWx0IHRvIHlvdXIgQ0kncyBlbnZpcm9ubWVudCB2YXJpYWJsZSBgQU5EUk9JRF9LRVlTVE9SRV9CQVNFNjRgXFxyXFxuXFxyXFxuQWRkIGZvbGxvd2luZyBlbnZpcm9ubWVudCB2YXJpYWJsZXM6XFxyXFxuXFxyXFxuLSBgS0VZU1RPUkVfUEFTU2A6IEtleXN0b3JlIHBhc3NcXHJcXG4tIGBLRVlfQUxJQVNfTkFNRWA6IEtleXN0b3JlIGFsaWFzIG5hbWUgdG8gdXNlIChpZiBub3Qgc2V0LCB0aGUgcHJvZ3JhbSB3aWxsIHVzZSB0aGUgYWxpYXMgbmFtZSBzZXQgaW4gUHJvamVjdCdzIFBsYXllclNldHRpbmdzKVxcclxcbi0gYEtFWV9BTElBU19QQVNTYDogS2V5c3RvcmUgYWxpYXMgcGFzcyB0byB1c2VcXHJcXG5cXHJcXG5Ob3RlIGFib3V0IF9rZXlzdG9yZSBzZWN1cml0eV8sIGlmIHlvdSB3b3VsZCBsaWtlIHRvIHVzZSBhbm90aGVyIHNvbHV0aW9uIGZvciBzdG9yYWdlLCBzZWUgW1doZXJlIHRvIFN0b3JlIEFuZHJvaWQgS2V5U3RvcmUgRmlsZSBpbiBDSS9DRCBDeWNsZT9dKGh0dHBzOi8vYW5kcm9pZC5qbGVsc2UuZXUvd2hlcmUtdG8tc3RvcmUtYW5kcm9pZC1rZXlzdG9yZS1maWxlLWluLWNpLWNkLWN5Y2xlLTIzNjVmNGUwMmU1NykuXFxyXFxuXFxyXFxuIyMjIEFuZHJvaWQgYXBwIGJ1bmRsZVxcclxcblxcclxcbmBCVUlMRF9BUFBfQlVORExFYCBlbnYgdmFyIGlzIGRlZmluZWQgaW4gYGdpdGxhYi1jaS55bWxgLiBTZXQgaXQgdG8gYHRydWVgIHRvIGJ1aWxkIGFuIGAuYWFiYCBmaWxlLiBOb3RlOiB0byBidWlsZCBhbiBhbmRyb2lkIGFwcCBidW5kbGUsIHlvdSBuZWVkIGFuIGltYWdlIHdpdGggKipBbmRyb2lkIE5ESyoqLlxcclxcblxcclxcblNlZSBbcmVsYXRlZCBpc3N1ZSBnYWJsZXJvdXgvdW5pdHkzZCM2MV0oaHR0cHM6Ly9naXRsYWIuY29tL2dhbWUtY2kvdW5pdHkzZC9pc3N1ZXMvNjEpXFxyXFxuXFxyXFxuIyMjIEJ1bmRsZSB2ZXJzaW9uIGNvZGVcXHJcXG5cXHJcXG5UaGUgYnVuZGxlIHZlcnNpb24gY29kZSBtdXN0IGJlIGluY3JlbWVudCBmb3IgZWFjaCBkZXBsb3llZCBidWlsZC5cXHJcXG5cXHJcXG5UbyBzaW1wbGlmeSB0aGUgcHJvY2VzcywgdGhlIGBCVU5ETEVfVkVSU0lPTl9DT0RFYCBlbnYgdmFyIGlzIHVzZWQgYW5kIHNldCBhcyBidW5kbGUgdmVyc2lvbiBjb2RlLlxcclxcblxcclxcbkN1cnJlbnRseSwgZm9yIGdpdGxhYiwgYEJVTkRMRV9WRVJTSU9OX0NPREUgPSAkQ0lfUElQRUxJTkVfSUlEYC4gW0RvY3VtZW50YXRpb25dKGh0dHBzOi8vZG9jcy5naXRsYWIuY29tL2VlL2NpL3ZhcmlhYmxlcy9wcmVkZWZpbmVkX3ZhcmlhYmxlcy5odG1sKSAgXFxyXFxuSWYgeW91IHVzZSBhbm90aGVyIENJIHNvbHV0aW9uLCBzZXQgYSBDSSBlbnYgdmFyIGluY3JlbWVudGluZyBmb3IgZWFjaCBwaXBlbGluZS5cXHJcXG5cXHJcXG4jIyMgRmFzdGxhbmUgc3VwcGx5IChkZXBsb3llbWVudClcXHJcXG5cXHJcXG5Gb2xsb3cgW3NldHVwIGluc3RydWN0aW9uc10oaHR0cHM6Ly9kb2NzLmZhc3RsYW5lLnRvb2xzL2FjdGlvbnMvc3VwcGx5LykgdG8gZ2V0IGEgZ29vZ2xlIHBsYXkgY29uc29sZSB0b2tlbiwgdGhlbiwgYWRkIHRoZSBjb250ZW50IHRvIGVudiB2YXIgYEdQQ19UT0tFTmAuXFxyXFxuXFxyXFxuVW5jb21tZW50IHRoZSBgI2RlcGxveS1hbmRyb2lkYCBqb2IgaW4gZ2l0bGFiLWNpLnltbCBhbmQgcmVwbGFjZSBgY29tLnlvdWNvbXBhbnkueW91cmdhbWVgIGJ5IHlvdXIgcGFja2FnZSBuYW1lLlxcclxcblxcclxcbllvdSBjYW4gY2hhbmdlIHRoZSB0cmFjayBgaW50ZXJuYWxgIHRvIGBhbHBoYWAsIGBiZXRhYCBvciBgcHJvZHVjdGlvbmAgKE5vdGU6IGlmIHlvdSBhcmUgdXNpbmcgdGhlIGBpbnRlcm5hbGAgdHJhY2sgeW91IHdpbGwgYWxzbyBoYXZlIHRvIG1hcmsgeW91ciByZWxlYXNlIGFzIGEgZHJhZnQgaW4gdGhlIGBmYXN0bGFuZSBzdXBwbHlgIGNvbW1hbmQgdXNpbmcgYC0tcmVsZWFzZV9zdGF0dXMgZHJhZnRgKS5cXHJcXG5cXHJcXG4qKkdlbWZpbGUqKlxcclxcblxcclxcbllvdSB3aWxsIGFsc28gbmVlZCB0byBhZGQgYSBHZW1maWxlIHRvIHlvdXIgcHJvamVjdCB0byBpbnN0YWxsIHRoZSBgZmFzdGxhbmVgIGdlbS4gU29tZXRoaW5nIGxpa2UgdGhlIGZvbGxvd2luZzpcXHJcXG5cXHJcXG5gYGBcXHJcXG5zb3VyY2UgXFxcImh0dHBzOi8vcnVieWdlbXMub3JnXFxcIlxcclxcblxcclxcbmdlbSBcXFwiZmFzdGxhbmVcXFwiXFxyXFxuYGBgXFxyXFxuXFxyXFxuYW5kIHRoZW4gY29weSB0aGUgZmlsZSB0byB0aGUgY3VycmVudCBkaXJlY3RvcnkgcHJpb3IgdG8gaW5zdGFsbGluZyB0aGUgZ2VtLiBlZyBgY3AgJENJX1BST0pFQ1RfRElSL0dlbWZpbGUgLmAuXFxyXFxuXFxyXFxuVGhhdCBpcyB0aGUgc2ltcGxlc3Qgd2F5IHdpdGggY29tbWFuZCBsaW5lIGJ1dCB5b3UgY2FuIGFsc28gbWFrZSBgZmFzdGxhbmUvRmFzdGZpbGVgIGFuZCBgZmFzdGxhbmUvQXBwZmlsZWAsIHdpdGggdGhlIGZvbGxvd2luZyBjb21tYW5kIGFmdGVyIGJ1aWxkaW5nIGEgdGVtcG9yYXJ5IGdyYWRsZSBwcm9qZWN0IChleHBvcnQgZ3JhZGxlIHByb2plY3Qgb3B0aW9uIGluIFVuaXR5IGJ1aWxkIHNldHRpbmdzKTpcXHJcXG5cXHJcXG5gYGBiYXNoXFxyXFxuZmFzdGxhbmUgaW5pdFxcclxcbmBgYFxcclxcblxcclxcblRoZW4gcnVuIHRoZSBmb2xsb3dpbmcgY29tbWFuZDpcXHJcXG5cXHJcXG5gYGBiYXNoXFxyXFxuZmFzdGxhbmUgc3VwcGx5IGluaXRcXHJcXG5gYGBcXHJcXG5cXHJcXG5hbmQgdXBkYXRlIGFsbCBtZXRhZGF0YSwgaW1hZ2VzLCBjaGFuZ2Vsb2dzLCBldGMuLi4gVGhlc2Ugd2lsbCBiZSB1cGxvYWRlZCB0byB0aGUgc3RvcmUgZXZlcnl0aW1lLiBSZWZlciB0byBbZmFzdGxhbmUgc3VwcGx5IGRvY3VtZW50YXRpb25dKGh0dHBzOi8vZG9jcy5mYXN0bGFuZS50b29scy9hY3Rpb25zL3N1cHBseS8pIGZvciBtb3JlIGRldGFpbHMuXFxyXFxuXCI7Il0sInNvdXJjZVJvb3QiOiIifQ==