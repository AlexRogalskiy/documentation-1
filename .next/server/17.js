exports.ids = [17];
exports.modules = {

/***/ "./docs/github/v1/01-getting-started.md":
/*!**********************************************!*\
  !*** ./docs/github/v1/01-getting-started.md ***!
  \**********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("# Getting started\r\n\r\nUnity Actions provide the fastest and **easiest** way to automatically test and build any Unity project.\r\n\r\nThere are a few parts to setting up a workflow. Steps may slightly differ depending on each license type.\r\n\r\n## Mental model\r\n\r\n#### Overall steps\r\n\r\n1. Understand how\r\n   [Github Actions](https://docs.github.com/en/actions)\r\n   work.\r\n2. Configure a license for Unity.\r\n3. Set up a workflow for your project.\r\n4. Result: Merge pull requests with more confidence.\r\n\r\n#### Setting up a workflow\r\n\r\nSetting up a workflow is easy!\r\n\r\nCreate a file called `.github/workflows/main.yml` in your repository and configure the following steps;\r\n\r\n1. Checkout your repository using\r\n   [Checkout](https://github.com/marketplace/actions/checkout).\r\n2. Cache Unity Library folder using\r\n   [Cache](https://github.com/marketplace/actions/cache).\r\n3. Configure your test job using\r\n   [Test Runner](https://github.com/marketplace/actions/unity-test-runner).\r\n4. Configure your build job using\r\n   [Builder](https://github.com/marketplace/actions/unity-builder).\r\n5. Deploy your application.\r\n\r\n_**Note:** all steps will be explained in the next chapters._\r\n\r\n## Support\r\n\r\n#### First time using GitHub Actions?\r\n\r\nRead the official documentation on how to setup a\r\n[workflow](https://help.github.com/en/actions/automating-your-workflow-with-github-actions/configuring-a-workflow).\r\n\r\nAny subsequent steps assume you have read the above.\r\n\r\n#### Supported versions\r\n\r\nUnity Actions are based on the\r\n[unity3d](https://gitlab.com/game-ci/unity3d)\r\nimages from\r\n[GabLeRoux](https://github.com/GabLeRoux).\r\nAny version in the\r\n[list](https://hub.docker.com/r/gableroux/unity3d/tags)\r\ncan be used to test and build projects.\r\n\r\nIt's generally considered good practice to use the same Unity version for Unity Actions as you do to develop your project.\r\n\r\n## Simple example\r\n\r\nBelow is a simple example. It is **recommended** to start from here.\r\n\r\nThis example assumes that your Unity project is in the root of your repository.\r\n\r\n> _Note: this repository tests this workflow_\r\n\r\n```yaml\r\nname: Actions ðŸ˜Ž\r\n\r\non:\r\n  pull_request: {}\r\n  push: { branches: [main] }\r\n\r\nenv:\r\n  UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}\r\n\r\njobs:\r\n  build:\r\n    name: Build my project âœ¨\r\n    runs-on: ubuntu-latest\r\n    steps:\r\n      # Checkout\r\n      - name: Checkout repository\r\n        uses: actions/checkout@v2\r\n        with:\r\n          lfs: true\r\n\r\n      # Cache\r\n      - uses: actions/cache@v1.1.0\r\n        with:\r\n          path: Library\r\n          key: Library\r\n\r\n      # Test\r\n      - name: Run tests\r\n        uses: webbertakken/unity-test-runner@v1.7\r\n        with:\r\n          unityVersion: 2019.2.11f1\r\n\r\n      # Build\r\n      - name: Build project\r\n        uses: webbertakken/unity-builder@v1.5\r\n        with:\r\n          unityVersion: 2019.2.11f1\r\n          targetPlatform: WebGL\r\n\r\n      # Output\r\n      - uses: actions/upload-artifact@v1\r\n        with:\r\n          name: Build\r\n          path: build\r\n```\r\n\r\n## Advanced example\r\n\r\nTo get an idea of how to create a more advanced workflows,\r\nhave a look at the example below.\r\n\r\n> _Note: this repository tests this workflow_\r\n\r\n```yaml\r\nname: Actions ðŸ˜Ž\r\n\r\non:\r\n  pull_request: {}\r\n  push: { branches: [main] }\r\n\r\nenv:\r\n  UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}\r\n\r\njobs:\r\n  buildAndTestForSomePlatforms:\r\n    name: Build for ${{ matrix.targetPlatform }} on version ${{ matrix.unityVersion }}\r\n    runs-on: ubuntu-latest\r\n    strategy:\r\n      fail-fast: false\r\n      matrix:\r\n        projectPath:\r\n          - test-project\r\n        unityVersion:\r\n          - 2019.2.11f1\r\n        targetPlatform:\r\n          - StandaloneOSX # Build a macOS standalone (Intel 64-bit).\r\n          - StandaloneWindows64 # Build a Windows 64-bit standalone.\r\n          - StandaloneLinux64 # Build a Linux 64-bit standalone.\r\n          - iOS # Build an iOS player.\r\n          - WebGL # WebGL.\r\n    steps:\r\n      - uses: actions/checkout@v2\r\n        with:\r\n          lfs: true\r\n      - uses: actions/cache@v1.1.0\r\n        with:\r\n          path: ${{ matrix.projectPath }}/Library\r\n          key: Library-${{ matrix.projectPath }}-${{ matrix.targetPlatform }}\r\n          restore-keys: |\r\n            Library-${{ matrix.projectPath }}-\r\n            Library-\r\n      - uses: webbertakken/unity-test-runner@v1.7\r\n        id: testRunner\r\n        with:\r\n          projectPath: ${{ matrix.projectPath }}\r\n          unityVersion: ${{ matrix.unityVersion }}\r\n      - uses: actions/upload-artifact@v1\r\n        with:\r\n          name: Test results (all modes)\r\n          path: ${{ steps.testRunner.outputs.artifactsPath }}\r\n      - uses: webbertakken/unity-builder@v1.5\r\n        with:\r\n          projectPath: ${{ matrix.projectPath }}\r\n          unityVersion: ${{ matrix.unityVersion }}\r\n          targetPlatform: ${{ matrix.targetPlatform }}\r\n          customParameters: '-myParameter myValue -myBoolean -ThirdParameter andItsValue'\r\n      - uses: actions/upload-artifact@v1\r\n        with:\r\n          name: Build\r\n          path: build\r\n```\r\n");

/***/ })

};;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,