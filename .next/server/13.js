exports.ids = [13];
exports.modules = {

/***/ "./docs/cloud-runner/v0/05-advanced-topics/09-github-ephemeral-runners.md":
/*!********************************************************************************!*\
  !*** ./docs/cloud-runner/v0/05-advanced-topics/09-github-ephemeral-runners.md ***!
  \********************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("**Create a self-hosted cloud runner in an initial job:**\n\n```yaml\nboot-self-hosted-runner:\n  runs-on: ubuntu-latest\n  outputs:\n    BUILD_GUID: ${{ steps.start-runner.outputs.BUILD_GUID }}\n  steps:\n    - name: Configure AWS Credentials\n      uses: aws-actions/configure-aws-credentials@v1\n      with:\n        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}\n        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}\n        aws-region: eu-west-2\n    - name: start runner\n      id: start-runner\n      uses: game-ci/unity-builder@cloud-runner-develop\n      with:\n        cloudRunnerCluster: aws\n        allowDirtyBuild: true\n        cloudRunnerMemory: 4096\n        cloudRunnerCpu: 2048\n        gitPrivateToken: ${{ secrets.PAT_GITHUB }}\n        targetPlatform: StandaloneWindows64\n        GITHUB_SHA: ${{ github.sha }}\n        branch: ${{ github.ref_name }}\n        unityVersion: 2021.3.1f1\n        githubRepo: ${{ github.repositoryUrl }}\n        versioning: None\n        customJob: |\n          - name: upload\n            image: ubuntu\n            commands: |\n              export DEBIAN_FRONTEND=noninteractive\n              export RUNNER_ALLOW_RUNASROOT=\"1\"\n              apt-get -q update\n              apt-get install -qy tar curl libdigest-sha-perl apt-transport-https libicu-dev jq git git-lfs\n              p=\"$BUILD_GUID/actions-runner\"\n              mkdir -p $p && cd $p\n              curl -o actions-runner-linux-x64-2.289.2.tar.gz -L https://github.com/actions/runner/releases/download/v2.289.2/actions-runner-linux-x64-2.289.2.tar.gz\n              echo \"7ba89bb75397896a76e98197633c087a9499d4c1db7603f21910e135b0d0a238  actions-runner-linux-x64-2.289.2.tar.gz\" | shasum -a 256 -c\n              tar xzf ./actions-runner-linux-x64-2.289.2.tar.gz\n              repo=\"frostebite/FPS.GameClient\"\n              KEY=$(curl -X POST -H \"Authorization: Bearer $GIT_PRIVATE_TOKEN\" -H \"Accept: application/vnd.github.v3+json\" https://api.github.com/repos/$repo/actions/runners/registration-token | jq -r .token)\n              ./config.sh --url https://github.com/$repo --token $KEY --ephemeral --labels $BUILD_GUID\n              ./run.sh\n            secrets: []\n```\n\n**Run the build in the job:**\n\n```yaml\nboot-game-ci-cloud-runner:\n  runs-on:\n    - self-hosted\n    - ${{ needs.boot-self-hosted-runner.outputs.BUILD_GUID }}\n  needs: boot-self-hosted-runner\n  steps:\n    - name: Configure AWS Credentials\n      uses: aws-actions/configure-aws-credentials@v1\n      with:\n        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}\n        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}\n        aws-region: eu-west-2\n    - name: Unity - Build\n      id: aws-fargate-unity-build\n      uses: game-ci/unity-builder@cloud-runner-develop\n      env:\n        UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}\n        UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}\n        UNITY_SERIAL: ${{ secrets.UNITY_SERIAL }}\n        CUSTOM_JOB: ''\n      with:\n        cloudRunnerCluster: aws\n        allowDirtyBuild: true\n        cloudRunnerMemory: 8192\n        cloudRunnerCpu: 2048\n        versioning: None\n        unityVersion: 2021.3.1f1\n        gitPrivateToken: ${{ secrets.PAT_GITHUB }}\n        targetPlatform: StandaloneWindows64\n        customJob: ''\n        GITHUB_SHA: ${{ github.sha }}\n        branch: ${{ github.ref_name }}\n        githubRepo: ${{ github.repositoryUrl }}\n        postBuildSteps: |\n          - name: upload\n            image: amazon/aws-cli\n            commands: |\n              aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID --profile default\n              aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY --profile default\n              aws configure set region $AWS_DEFAULT_REGION --profile default\n              aws s3 cp /data/cache/$CACHE_KEY/build/build-$BUILD_GUID.tar s3://game-ci-test-storage/$CACHE_KEY/build-$BUILD_GUID.tar\n            secrets:\n            - name: awsAccessKeyId\n              value: ${{ secrets.AWS_ACCESS_KEY_ID }}\n            - name: awsSecretAccessKey\n              value: ${{ secrets.AWS_SECRET_ACCESS_KEY }}\n            - name: awsDefaultRegion\n              value: eu-west-2\n```\n\n**Download and deploy results:**\n\n```yaml\npost-job-message:\n  runs-on: ubuntu-latest\n  needs: [boot-game-ci-cloud-runner, boot-self-hosted-runner]\n  steps:\n    - name: Configure AWS Credentials\n      uses: aws-actions/configure-aws-credentials@v1\n      with:\n        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}\n        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}\n        aws-region: eu-west-2\n    - run: |\n        aws s3 cp s3://game-ci-test-storage/${{ steps.aws-fargate-unity-build.outputs.CACHE_KEY }}/build-${{ steps.aws-fargate-unity-build.outputs.BUILD_GUID }}.tar build-${{ steps.aws-fargate-unity-build.outputs.BUILD_GUID }}.tar\n        mkdir build\n        tar -xf build-${{ steps.aws-fargate-unity-build.outputs.BUILD_GUID }}.tar -C build\n        ls build\n    - uses: actions/upload-artifact@v2\n      with:\n        name: AWS Build (${{ matrix.targetPlatform }})\n        path: build-${{ steps.aws-fargate-unity-build.outputs.BUILD_GUID }}.tar\n        retention-days: 14\n    - name: Steam - Deploy\n      uses: game-ci/steam-deploy@main\n      with:\n        username: ${{ secrets.STEAM_USERNAME }}\n        password: ${{ secrets.STEAM_PASSWORD }}\n        appId: ${{ secrets.STEAM_APPID }}\n        configVdf: ${{ secrets.STEAM_CONFIG_VDF }}\n        ssfnFileName: ${{ secrets.STEAM_SSFN_FILE_NAME }}\n        ssfnFileContents: ${{ secrets.STEAM_SSFN_FILE_CONTENTS }}\n        rootPath: build\n        depot1Path: StandaloneWindows64\n        releaseBranch: pre-release\n```\n");

/***/ })

};;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,