exports.ids = [27];
exports.modules = {

/***/ "./docs/github/v2/04-builder.md":
/*!**************************************!*\
  !*** ./docs/github/v2/04-builder.md ***!
  \**************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("# Builder\r\n\r\nBuilding the project as part of a workflow may help to create mind-space and focus on the project itself.\r\n\r\nUse [Unity - Builder](https://github.com/marketplace/actions/unity-builder)\r\nto automatically build Unity projects for different platforms.\r\n\r\n## Basic setup\r\n\r\n#### Credentials\r\n\r\nMake sure you have set up these variables in the [activation step](/docs/github/activation):\r\n\r\n- `UNITY_EMAIL` (the email address for your Unity account)\r\n- `UNITY_PASSWORD` (the password that you use to login to Unity)\r\n\r\nNOTE: Issues have been observed when using a `UNITY_PASSWORD` with special characters.\r\nIt is recommended to use a password without any special characters (mixed-case alphanumeric characters only).\r\n\r\n**GameCI does not acquire nor store your Unity email or password. They are required for reactivating the license during build and test steps.**\r\n\r\n#### Workflow file setup\r\n\r\nCreate or edit the file called `.github/workflows/main.yml` and add a job to it.\r\n\r\n#### Personal license\r\n\r\nPersonal licenses require a one-time manual activation step.\r\n\r\nMake sure you\r\n[acquire and activate](/docs/github/activation)\r\nyour license file and add it as a secret.\r\n\r\nThen, define the build step as follows:\r\n\r\n```yaml\r\n- uses: game-ci/unity-builder@v2\r\n  env:\r\n    UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}\r\n    UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}\r\n    UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}\r\n  with:\r\n    targetPlatform: WebGL\r\n```\r\n\r\n#### Professional license\r\n\r\nMake sure you have set up these variables in the activation step:\r\n\r\n- `UNITY_EMAIL` (should contain the email address for your Unity account)\r\n- `UNITY_PASSWORD` (the password that you use to login to Unity)\r\n- `UNITY_SERIAL` (the serial provided by Unity)\r\n\r\nThen, define the build step as follows:\r\n\r\n```yaml\r\n- uses: game-ci/unity-builder@v2\r\n  env:\r\n    UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}\r\n    UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}\r\n    UNITY_SERIAL: ${{ secrets.UNITY_SERIAL }}\r\n  with:\r\n    targetPlatform: WebGL\r\n```\r\n\r\nThat is all you need to build your project.\r\n\r\nBy default, the enabled scenes from the project's settings will be built.\r\n\r\n## Storing the build\r\n\r\nTo be able to access your built files,\r\nthey need to be uploaded as artifacts.\r\nTo do this it is recommended to use Github Actions official\r\n[upload artifact action](https://github.com/marketplace/actions/upload-artifact)\r\nafter any build action.\r\n\r\nBy default, Builder outputs it's builds to a folder named `build`.\r\n\r\nExample:\r\n\r\n```yaml\r\n- uses: actions/upload-artifact@v2\r\n  with:\r\n    name: Build\r\n    path: build\r\n```\r\n\r\nBuilds can now be downloaded as Artifacts in the Actions tab.\r\n\r\n## Caching\r\n\r\nIn order to make builds run faster, you can cache Library files from previous\r\nbuilds. To do so simply add Github Actions official\r\n[cache action](https://github.com/marketplace/actions/cache) before any unity steps.\r\n\r\nExample:\r\n\r\n```yaml\r\n- uses: actions/cache@v2\r\n  with:\r\n    path: path/to/your/project/Library\r\n    key: Library-MyProjectName-TargetPlatform\r\n    restore-keys: |\r\n      Library-MyProjectName-\r\n      Library-\r\n```\r\n\r\nThis simple addition could speed up your build by more than 50%.\r\n\r\n## Configuration options\r\n\r\nBelow options can be specified under `with:` for the `unity-builder` action.\r\n\r\n#### targetPlatform\r\n\r\nPlatform that the build should target.\r\n\r\nMust be one of the [allowed values](https://docs.unity3d.com/ScriptReference/BuildTarget.html) listed in the Unity scripting manual.\r\n\r\n_**required:** `true`_\r\n\r\n#### unityVersion\r\n\r\nVersion of Unity to use for building the project.\r\nUse \"auto\" to get from your ProjectSettings/ProjectVersion.txt\r\n\r\n_**required:** `false`_\r\n_**default:** `auto`_\r\n\r\n#### customImage\r\n\r\nSpecific docker image that should be used for building the project.\r\n\r\n```yaml\r\n- uses: game-ci/unity-builder@v2\r\n  with:\r\n    customImage: 'unityci/editor:2020.1.14f1-base-0'\r\n```\r\n\r\n_**required:** `false`_\r\n_**default:** `\"\"`_\r\n\r\n#### projectPath\r\n\r\nSpecify the path to your Unity project to be built.\r\nThe path should be relative to the root of your project.\r\n\r\n_**required:** `false`_\r\n_**default:** `<your project root>`_\r\n\r\n#### buildName\r\n\r\nName of the build. Also the folder in which the build will be stored within `buildsPath`.\r\n\r\n_**required:** `false`_\r\n_**default:** `<build_target>`_\r\n\r\n#### buildsPath\r\n\r\nPath where the builds should be stored.\r\n\r\nIn this folder a folder will be created for every targetPlatform.\r\n\r\n_**required:** `false`_\r\n_**default:** `build`_\r\n\r\n#### buildMethod\r\n\r\nCustom command to run your build.\r\n\r\nThere are two conditions for a custom buildMethod:\r\n\r\n- Must reference a valid path to a `static` method.\r\n- The class must reside in the `Assets/Editor` directory (or in an Editor Assembly).\r\n\r\nExample:\r\n\r\n```yaml\r\n- uses: game-ci/unity-builder@v2\r\n  with:\r\n    buildMethod: EditorNamespace.BuilderClassName.StaticBuildMethod\r\n```\r\n\r\nTo get started with a modified version of the default Unity Builder build script, you can copy [BuildScript.cs](https://github.com/game-ci/documentation/blob/main/example/BuildScript.cs) to your `Assets/Editor/UnityBuilderAction` directory and reference it:\r\n\r\n```yaml\r\n- uses: game-ci/unity-builder@v2\r\n  with:\r\n    buildMethod: UnityBuilderAction.BuildScript.Build\r\n```\r\n\r\nIf you need to pass custom parameters to this build method, see `customParameters` below.\r\n\r\n_**required:** `false`_\r\n_**default:** Built-in script that will run a build out of the box._\r\n\r\n#### customParameters\r\n\r\nCustom parameters to configure the build.\r\n\r\nParameters must start with a hyphen (`-`) and may be followed by a value (without hyphen).\r\n\r\nParameters without a value will be considered booleans (with a value of true).\r\n\r\n```yaml\r\n- uses: game-ci/unity-builder@v2\r\n  with:\r\n    customParameters: -profile SomeProfile -someBoolean -someValue exampleValue\r\n```\r\n\r\nThere are 2 main use cases:\r\n\r\n- To pass your own custom parameters to be used with `buildMethod` above\r\n- To pass [Unity Build Options](https://docs.unity3d.com/ScriptReference/BuildOptions.html) (for example, `customParameters: -EnableHeadlessMode` will do server builds)\r\n\r\n_**required:** `false`_\r\n_**default:** `\"\"`_\r\n\r\n#### versioning\r\n\r\nConfigure a specific versioning strategy\r\n\r\n```yaml\r\n- uses: game-ci/unity-builder@v2\r\n  with:\r\n    versioning: Semantic\r\n```\r\n\r\nFind the available strategies below:\r\n\r\n##### Semantic\r\n\r\nVersioning out of the box! **(recommended)**\r\n\r\n> Compatible with **all platforms**.  \r\n> Does **not** modify your repository.  \r\n> Requires **zero configuration**.\r\n\r\nHow it works:\r\n\r\n> Generates a version based on [semantic versioning](https://semver.org/).  \r\n> Follows `<major>.<minor>.<patch>` for example `0.17.2`.  \r\n> The latest tag dictates `<major>.<minor>` (defaults to 0.0 for no tag).  \r\n> The number of commits (since the last tag, if any) is used for `<patch>`.\r\n\r\nNo configuration required.\r\n\r\n##### Tag\r\n\r\nGenerates the version based on the latest git tag. For example `0.17.2` will\r\ngenerate the version `0.17.2`. A leading \"v\" is stripped, so a version of\r\n`v1.3.3` will generate a version of `1.3.3`. **(advanced users)**\r\n\r\n> Compatible with **all platforms**.\r\n> Does **not** modify your repository.\r\n\r\n##### Custom\r\n\r\nAllows specifying a custom version in the `version` field. **(advanced users)**\r\n\r\n> This strategy is useful when your project or pipeline has some kind of orchestration\r\n> that determines the versions.\r\n\r\n##### None\r\n\r\nNo version will be set by Builder. **(not recommended)**\r\n\r\n> Not recommended unless you generate a new version in a pre-commit hook. Manually\r\n> setting versions is error-prone.\r\n\r\n#### androidVersionCode\r\n\r\nConfigure the android `versionCode`.\r\n\r\nWhen not specified, the version code is generated from the version using the `major * 1000000 + minor * 1000 + patch` scheme;\r\n\r\n#### androidAppBundle\r\n\r\nSet this flag to `true` to build '.aab' instead of '.apk'.\r\n\r\n```yaml\r\n- uses: game-ci/unity-builder@v2\r\n  with:\r\n    androidAppBundle: true\r\n    androidKeystoreName: user.keystore\r\n    androidKeystoreBase64: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}\r\n    androidKeystorePass: ${{ secrets.ANDROID_KEYSTORE_PASS }}\r\n    androidKeyaliasName: ${{ secrets.ANDROID_KEYALIAS_NAME }}\r\n    androidKeyaliasPass: ${{ secrets.ANDROID_KEYALIAS_PASS }}\r\n```\r\n\r\nYou should also set all the Android Keystore options (see below).\r\n\r\n_**required:** `false`_\r\n_**default:** `false`_\r\n\r\n#### androidKeystoreName\r\n\r\nConfigure the android `keystoreName`. Must be provided if configuring the below keystore options.\r\n\r\nFor this to take effect, you must enable `Custom Keystore` in your\r\n[Android Player settings](https://docs.unity3d.com/Manual/class-PlayerSettingsAndroid.html).\r\nThe default build script overrides the other keystore settings with these keystore options.\r\n\r\n_**required:** `false`_\r\n_**default:** `\"\"`_\r\n\r\n#### androidKeystoreBase64\r\n\r\nConfigure the base64 contents of the android keystore file. You should get this with `base64 $androidKeystoreName`\r\n\r\nThe contents will be decoded from base64 using `echo $androidKeystoreBase64 | base64 --decode > $projectPath/$androidKeystoreName`\r\n\r\nIt is recommended to use [GitHub Secrets](https://docs.github.com/en/actions/reference/encrypted-secrets).\r\n\r\n_**required:** `false`_\r\n_**default:** `\"\"`_\r\n\r\n#### androidKeystorePass\r\n\r\nConfigure the android `keystorePass`. Recommended to use GitHub Secrets.\r\n\r\n_**required:** `false`_\r\n_**default:** `\"\"`_\r\n\r\n#### androidKeyaliasName\r\n\r\nConfigure the android `keyaliasName`. Recommended to use GitHub Secrets.\r\n\r\n_**required:** `false`_\r\n_**default:** `\"\"`_\r\n\r\n#### androidKeyaliasPass\r\n\r\nConfigure the android `keyaliasPass`. Recommended to use GitHub Secrets.\r\n\r\n_**required:** `false`_\r\n_**default:** `\"\"`_\r\n\r\n#### androidTargetSdkVersion\r\n\r\nConfigure the android target API level. If used, must be one of [Unity's AndroidSdkVersions](https://docs.unity3d.com/ScriptReference/AndroidSdkVersions.html).\r\n\r\n_**required:** `false`_\r\n_**default:** `\"\"`_\r\n\r\n#### sshAgent\r\n\r\nSSH Agent path to forward to the container.\r\n\r\nThis is useful if your manifest has a dependency on a private GitHub repo.\r\n\r\n_**required:** `false`_\r\n_**default:** `\"\"`_\r\n\r\n#### gitPrivateToken\r\n\r\nGithub private token to pull from github.\r\n\r\nThis is useful if your manifest has a dependency on a private GitHub repo.\r\n\r\n_**required:** `false`_\r\n_**default:** `\"\"`_\r\n\r\n#### chownFilesTo\r\n\r\nUser and optionally group (user or user:group or uid:gid) to give ownership of the resulting build artifacts.\r\n\r\n_**required:** `false`_\r\n_**default:** `\"\"`_\r\n\r\n#### allowDirtyBuild\r\n\r\nAllows the branch of the build to be dirty, and still generate the build.\r\n\r\n```yaml\r\n- uses: game-ci/unity-builder@v2\r\n  with:\r\n    allowDirtyBuild: true\r\n```\r\n\r\nNote that it is generally bad practice to modify your branch\r\nin a CI Pipeline. However there are exceptions where this might\r\nbe needed. (use with care).\r\n\r\n_**required:** `false`_\r\n_**default:** `false`_\r\n\r\n## Outputs\r\n\r\nBelow are outputs that can be accessed by using `${{ steps.myBuildStep.outputs.outputName }}`, where `myBuildStep` is the id\r\nof the Builder step, and `outputName` is the name of the output.\r\n\r\n#### buildVersion\r\n\r\nReturns the version that was generated by Builder, following the strategy configured for `versioning`.\r\n\r\n```yaml\r\n- uses: game-ci/unity-builder@v2\r\n  id: myBuildStep\r\n- run: echo 'Project Version: ${{ steps.myBuildStep.outputs.buildVersion }}'\r\n```\r\n\r\n## Private Github repositories\r\n\r\nIf you use private git repository in your packages/manifest.json, you need to create SSH pub/private keys for your project and then add to the `webfactory/ssh-agent`\r\n\r\n- Generate public,private key for github's SSH using [this instruction](https://docs.github.com/en/github/authenticating-to-github/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent#generating-a-new-ssh-key) and make sure that you you use `git@github.com:USER/PROJECT.git` instead of email for `-C` parameter because we're going to use it as deploy key for a single project and `webfactory/ssh-agent` going to use that for checking which repository this key is related to .\r\n- Add the public_key to Deploy settings of your private git repository ( https://github.com/USER/PROJECT/settings/keys)\r\n- Add private_key to Github secrets of the project that you want to build (https://github.com/USER/PROJECT/settings/secrets/actions)\r\n  (key name should be SSH_PRIVATE_KEY )\r\n- Finally, add `webfactory/ssh-agent` to your Github action :\r\n\r\n```yaml\r\nname: Accessing private repos\r\nruns-on: ubuntu-latest\r\nsteps:\r\n  - uses: actions/checkout@v2\r\n  - uses: webfactory/ssh-agent@v0.5.2\r\n    with:\r\n      ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}\r\n  - uses: game-ci/unity-builder@v2\r\n    with:\r\n      sshAgent: ${{ env.SSH_AUTH_SOCK }}\r\n```\r\n\r\n## UPM authentication using .upmconfig.toml\r\n\r\nUnity requires an .upmconfig.toml to exist in the home directory to authenticate and download packages from private UPM registries.\r\nTo create this file, first create the `/home/runner/work/_temp/_github_home` directory, and then create the .upmconfig.toml file inside that directory.\r\nThis action must be done before running the game-ci/unity-builder@v2 action.\r\n\r\n```yaml\r\n- name: Create .upmconfig.toml UPM authentication file\r\n  run: |\r\n    mkdir /home/runner/work/_temp/_github_home\r\n    cd /home/runner/work/_temp/_github_home\r\n    echo \"[npmAuth.\\\"https://upm.example.com\\\"]\" >> .upmconfig.toml\r\n    echo \"alwaysAuth = true\" >> .upmconfig.toml\r\n    echo \"token = \\\"${{ secrets.NPM_TOKEN }}\\\"\" >> .upmconfig.toml\r\n```\r\n\r\n## Complete example\r\n\r\nA complete workflow that builds every available platform could look like this:\r\n\r\n```yaml\r\nname: Build project\r\n\r\non: [push, pull_request]\r\n\r\njobs:\r\n  buildForAllSupportedPlatforms:\r\n    name: Build for ${{ matrix.targetPlatform }}\r\n    runs-on: ubuntu-latest\r\n    strategy:\r\n      fail-fast: false\r\n      matrix:\r\n        targetPlatform:\r\n          - StandaloneOSX # Build a macOS standalone (Intel 64-bit).\r\n          - StandaloneWindows # Build a Windows standalone.\r\n          - StandaloneWindows64 # Build a Windows 64-bit standalone.\r\n          - StandaloneLinux64 # Build a Linux 64-bit standalone.\r\n          - iOS # Build an iOS player.\r\n          - Android # Build an Android .apk standalone app.\r\n          - WebGL # WebGL.\r\n    steps:\r\n      - uses: actions/checkout@v2\r\n        with:\r\n          fetch-depth: 0\r\n          lfs: true\r\n      - uses: actions/cache@v2\r\n        with:\r\n          path: Library\r\n          key: Library-${{ matrix.targetPlatform }}\r\n          restore-keys: Library-\r\n      - uses: game-ci/unity-builder@v2\r\n        env:\r\n          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}\r\n        with:\r\n          targetPlatform: ${{ matrix.targetPlatform }}\r\n      - uses: actions/upload-artifact@v2\r\n        with:\r\n          name: Build-${{ matrix.targetPlatform }}\r\n          path: build/${{ matrix.targetPlatform }}\r\n```\r\n\r\n## Next steps\r\n\r\nYou can find more workflow examples in [Getting Started](/docs/github/getting-started#workflow-examples).\r\n");

/***/ })

};;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9kb2NzL2dpdGh1Yi92Mi8wNC1idWlsZGVyLm1kIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUE7QUFBZSxpNkNBQWsyQyx5QkFBeUIsd0JBQXdCLHVCQUF1QiwyQkFBMkIsMEJBQTBCLHFlQUFxZSx1QkFBdUIsMkJBQTJCLDBCQUEwQix5QkFBeUIsd0JBQXdCLHFvTUFBcW9NLHVRQUF1USxtQ0FBbUMsZ0NBQWdDLGlDQUFpQyxnQ0FBZ0MsaUNBQWlDLGdDQUFnQyxpQ0FBaUMseTRGQUF5NEYsd0NBQXdDLHdWQUF3ViwwQ0FBMEMsdXhDQUF1eEMsMkJBQTJCLDBFQUEwRSxxQkFBcUIsc3dCQUFzd0IscUJBQXFCLG1TQUFtUyx5QkFBeUIsa3ZCQUFrdkIseUJBQXlCLDhIQUE4SCx5QkFBeUIsa0RBQWtELHlCQUF5QiwwRkFBMEYseUJBQXlCLDZCQUE2Qix5QkFBeUIsa0pBQWtKLEUiLCJmaWxlIjoiMjcuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBcIiMgQnVpbGRlclxcclxcblxcclxcbkJ1aWxkaW5nIHRoZSBwcm9qZWN0IGFzIHBhcnQgb2YgYSB3b3JrZmxvdyBtYXkgaGVscCB0byBjcmVhdGUgbWluZC1zcGFjZSBhbmQgZm9jdXMgb24gdGhlIHByb2plY3QgaXRzZWxmLlxcclxcblxcclxcblVzZSBbVW5pdHkgLSBCdWlsZGVyXShodHRwczovL2dpdGh1Yi5jb20vbWFya2V0cGxhY2UvYWN0aW9ucy91bml0eS1idWlsZGVyKVxcclxcbnRvIGF1dG9tYXRpY2FsbHkgYnVpbGQgVW5pdHkgcHJvamVjdHMgZm9yIGRpZmZlcmVudCBwbGF0Zm9ybXMuXFxyXFxuXFxyXFxuIyMgQmFzaWMgc2V0dXBcXHJcXG5cXHJcXG4jIyMjIENyZWRlbnRpYWxzXFxyXFxuXFxyXFxuTWFrZSBzdXJlIHlvdSBoYXZlIHNldCB1cCB0aGVzZSB2YXJpYWJsZXMgaW4gdGhlIFthY3RpdmF0aW9uIHN0ZXBdKC9kb2NzL2dpdGh1Yi9hY3RpdmF0aW9uKTpcXHJcXG5cXHJcXG4tIGBVTklUWV9FTUFJTGAgKHRoZSBlbWFpbCBhZGRyZXNzIGZvciB5b3VyIFVuaXR5IGFjY291bnQpXFxyXFxuLSBgVU5JVFlfUEFTU1dPUkRgICh0aGUgcGFzc3dvcmQgdGhhdCB5b3UgdXNlIHRvIGxvZ2luIHRvIFVuaXR5KVxcclxcblxcclxcbk5PVEU6IElzc3VlcyBoYXZlIGJlZW4gb2JzZXJ2ZWQgd2hlbiB1c2luZyBhIGBVTklUWV9QQVNTV09SRGAgd2l0aCBzcGVjaWFsIGNoYXJhY3RlcnMuXFxyXFxuSXQgaXMgcmVjb21tZW5kZWQgdG8gdXNlIGEgcGFzc3dvcmQgd2l0aG91dCBhbnkgc3BlY2lhbCBjaGFyYWN0ZXJzIChtaXhlZC1jYXNlIGFscGhhbnVtZXJpYyBjaGFyYWN0ZXJzIG9ubHkpLlxcclxcblxcclxcbioqR2FtZUNJIGRvZXMgbm90IGFjcXVpcmUgbm9yIHN0b3JlIHlvdXIgVW5pdHkgZW1haWwgb3IgcGFzc3dvcmQuIFRoZXkgYXJlIHJlcXVpcmVkIGZvciByZWFjdGl2YXRpbmcgdGhlIGxpY2Vuc2UgZHVyaW5nIGJ1aWxkIGFuZCB0ZXN0IHN0ZXBzLioqXFxyXFxuXFxyXFxuIyMjIyBXb3JrZmxvdyBmaWxlIHNldHVwXFxyXFxuXFxyXFxuQ3JlYXRlIG9yIGVkaXQgdGhlIGZpbGUgY2FsbGVkIGAuZ2l0aHViL3dvcmtmbG93cy9tYWluLnltbGAgYW5kIGFkZCBhIGpvYiB0byBpdC5cXHJcXG5cXHJcXG4jIyMjIFBlcnNvbmFsIGxpY2Vuc2VcXHJcXG5cXHJcXG5QZXJzb25hbCBsaWNlbnNlcyByZXF1aXJlIGEgb25lLXRpbWUgbWFudWFsIGFjdGl2YXRpb24gc3RlcC5cXHJcXG5cXHJcXG5NYWtlIHN1cmUgeW91XFxyXFxuW2FjcXVpcmUgYW5kIGFjdGl2YXRlXSgvZG9jcy9naXRodWIvYWN0aXZhdGlvbilcXHJcXG55b3VyIGxpY2Vuc2UgZmlsZSBhbmQgYWRkIGl0IGFzIGEgc2VjcmV0LlxcclxcblxcclxcblRoZW4sIGRlZmluZSB0aGUgYnVpbGQgc3RlcCBhcyBmb2xsb3dzOlxcclxcblxcclxcbmBgYHlhbWxcXHJcXG4tIHVzZXM6IGdhbWUtY2kvdW5pdHktYnVpbGRlckB2MlxcclxcbiAgZW52OlxcclxcbiAgICBVTklUWV9MSUNFTlNFOiAke3sgc2VjcmV0cy5VTklUWV9MSUNFTlNFIH19XFxyXFxuICAgIFVOSVRZX0VNQUlMOiAke3sgc2VjcmV0cy5VTklUWV9FTUFJTCB9fVxcclxcbiAgICBVTklUWV9QQVNTV09SRDogJHt7IHNlY3JldHMuVU5JVFlfUEFTU1dPUkQgfX1cXHJcXG4gIHdpdGg6XFxyXFxuICAgIHRhcmdldFBsYXRmb3JtOiBXZWJHTFxcclxcbmBgYFxcclxcblxcclxcbiMjIyMgUHJvZmVzc2lvbmFsIGxpY2Vuc2VcXHJcXG5cXHJcXG5NYWtlIHN1cmUgeW91IGhhdmUgc2V0IHVwIHRoZXNlIHZhcmlhYmxlcyBpbiB0aGUgYWN0aXZhdGlvbiBzdGVwOlxcclxcblxcclxcbi0gYFVOSVRZX0VNQUlMYCAoc2hvdWxkIGNvbnRhaW4gdGhlIGVtYWlsIGFkZHJlc3MgZm9yIHlvdXIgVW5pdHkgYWNjb3VudClcXHJcXG4tIGBVTklUWV9QQVNTV09SRGAgKHRoZSBwYXNzd29yZCB0aGF0IHlvdSB1c2UgdG8gbG9naW4gdG8gVW5pdHkpXFxyXFxuLSBgVU5JVFlfU0VSSUFMYCAodGhlIHNlcmlhbCBwcm92aWRlZCBieSBVbml0eSlcXHJcXG5cXHJcXG5UaGVuLCBkZWZpbmUgdGhlIGJ1aWxkIHN0ZXAgYXMgZm9sbG93czpcXHJcXG5cXHJcXG5gYGB5YW1sXFxyXFxuLSB1c2VzOiBnYW1lLWNpL3VuaXR5LWJ1aWxkZXJAdjJcXHJcXG4gIGVudjpcXHJcXG4gICAgVU5JVFlfRU1BSUw6ICR7eyBzZWNyZXRzLlVOSVRZX0VNQUlMIH19XFxyXFxuICAgIFVOSVRZX1BBU1NXT1JEOiAke3sgc2VjcmV0cy5VTklUWV9QQVNTV09SRCB9fVxcclxcbiAgICBVTklUWV9TRVJJQUw6ICR7eyBzZWNyZXRzLlVOSVRZX1NFUklBTCB9fVxcclxcbiAgd2l0aDpcXHJcXG4gICAgdGFyZ2V0UGxhdGZvcm06IFdlYkdMXFxyXFxuYGBgXFxyXFxuXFxyXFxuVGhhdCBpcyBhbGwgeW91IG5lZWQgdG8gYnVpbGQgeW91ciBwcm9qZWN0LlxcclxcblxcclxcbkJ5IGRlZmF1bHQsIHRoZSBlbmFibGVkIHNjZW5lcyBmcm9tIHRoZSBwcm9qZWN0J3Mgc2V0dGluZ3Mgd2lsbCBiZSBidWlsdC5cXHJcXG5cXHJcXG4jIyBTdG9yaW5nIHRoZSBidWlsZFxcclxcblxcclxcblRvIGJlIGFibGUgdG8gYWNjZXNzIHlvdXIgYnVpbHQgZmlsZXMsXFxyXFxudGhleSBuZWVkIHRvIGJlIHVwbG9hZGVkIGFzIGFydGlmYWN0cy5cXHJcXG5UbyBkbyB0aGlzIGl0IGlzIHJlY29tbWVuZGVkIHRvIHVzZSBHaXRodWIgQWN0aW9ucyBvZmZpY2lhbFxcclxcblt1cGxvYWQgYXJ0aWZhY3QgYWN0aW9uXShodHRwczovL2dpdGh1Yi5jb20vbWFya2V0cGxhY2UvYWN0aW9ucy91cGxvYWQtYXJ0aWZhY3QpXFxyXFxuYWZ0ZXIgYW55IGJ1aWxkIGFjdGlvbi5cXHJcXG5cXHJcXG5CeSBkZWZhdWx0LCBCdWlsZGVyIG91dHB1dHMgaXQncyBidWlsZHMgdG8gYSBmb2xkZXIgbmFtZWQgYGJ1aWxkYC5cXHJcXG5cXHJcXG5FeGFtcGxlOlxcclxcblxcclxcbmBgYHlhbWxcXHJcXG4tIHVzZXM6IGFjdGlvbnMvdXBsb2FkLWFydGlmYWN0QHYyXFxyXFxuICB3aXRoOlxcclxcbiAgICBuYW1lOiBCdWlsZFxcclxcbiAgICBwYXRoOiBidWlsZFxcclxcbmBgYFxcclxcblxcclxcbkJ1aWxkcyBjYW4gbm93IGJlIGRvd25sb2FkZWQgYXMgQXJ0aWZhY3RzIGluIHRoZSBBY3Rpb25zIHRhYi5cXHJcXG5cXHJcXG4jIyBDYWNoaW5nXFxyXFxuXFxyXFxuSW4gb3JkZXIgdG8gbWFrZSBidWlsZHMgcnVuIGZhc3RlciwgeW91IGNhbiBjYWNoZSBMaWJyYXJ5IGZpbGVzIGZyb20gcHJldmlvdXNcXHJcXG5idWlsZHMuIFRvIGRvIHNvIHNpbXBseSBhZGQgR2l0aHViIEFjdGlvbnMgb2ZmaWNpYWxcXHJcXG5bY2FjaGUgYWN0aW9uXShodHRwczovL2dpdGh1Yi5jb20vbWFya2V0cGxhY2UvYWN0aW9ucy9jYWNoZSkgYmVmb3JlIGFueSB1bml0eSBzdGVwcy5cXHJcXG5cXHJcXG5FeGFtcGxlOlxcclxcblxcclxcbmBgYHlhbWxcXHJcXG4tIHVzZXM6IGFjdGlvbnMvY2FjaGVAdjJcXHJcXG4gIHdpdGg6XFxyXFxuICAgIHBhdGg6IHBhdGgvdG8veW91ci9wcm9qZWN0L0xpYnJhcnlcXHJcXG4gICAga2V5OiBMaWJyYXJ5LU15UHJvamVjdE5hbWUtVGFyZ2V0UGxhdGZvcm1cXHJcXG4gICAgcmVzdG9yZS1rZXlzOiB8XFxyXFxuICAgICAgTGlicmFyeS1NeVByb2plY3ROYW1lLVxcclxcbiAgICAgIExpYnJhcnktXFxyXFxuYGBgXFxyXFxuXFxyXFxuVGhpcyBzaW1wbGUgYWRkaXRpb24gY291bGQgc3BlZWQgdXAgeW91ciBidWlsZCBieSBtb3JlIHRoYW4gNTAlLlxcclxcblxcclxcbiMjIENvbmZpZ3VyYXRpb24gb3B0aW9uc1xcclxcblxcclxcbkJlbG93IG9wdGlvbnMgY2FuIGJlIHNwZWNpZmllZCB1bmRlciBgd2l0aDpgIGZvciB0aGUgYHVuaXR5LWJ1aWxkZXJgIGFjdGlvbi5cXHJcXG5cXHJcXG4jIyMjIHRhcmdldFBsYXRmb3JtXFxyXFxuXFxyXFxuUGxhdGZvcm0gdGhhdCB0aGUgYnVpbGQgc2hvdWxkIHRhcmdldC5cXHJcXG5cXHJcXG5NdXN0IGJlIG9uZSBvZiB0aGUgW2FsbG93ZWQgdmFsdWVzXShodHRwczovL2RvY3MudW5pdHkzZC5jb20vU2NyaXB0UmVmZXJlbmNlL0J1aWxkVGFyZ2V0Lmh0bWwpIGxpc3RlZCBpbiB0aGUgVW5pdHkgc2NyaXB0aW5nIG1hbnVhbC5cXHJcXG5cXHJcXG5fKipyZXF1aXJlZDoqKiBgdHJ1ZWBfXFxyXFxuXFxyXFxuIyMjIyB1bml0eVZlcnNpb25cXHJcXG5cXHJcXG5WZXJzaW9uIG9mIFVuaXR5IHRvIHVzZSBmb3IgYnVpbGRpbmcgdGhlIHByb2plY3QuXFxyXFxuVXNlIFxcXCJhdXRvXFxcIiB0byBnZXQgZnJvbSB5b3VyIFByb2plY3RTZXR0aW5ncy9Qcm9qZWN0VmVyc2lvbi50eHRcXHJcXG5cXHJcXG5fKipyZXF1aXJlZDoqKiBgZmFsc2VgX1xcclxcbl8qKmRlZmF1bHQ6KiogYGF1dG9gX1xcclxcblxcclxcbiMjIyMgY3VzdG9tSW1hZ2VcXHJcXG5cXHJcXG5TcGVjaWZpYyBkb2NrZXIgaW1hZ2UgdGhhdCBzaG91bGQgYmUgdXNlZCBmb3IgYnVpbGRpbmcgdGhlIHByb2plY3QuXFxyXFxuXFxyXFxuYGBgeWFtbFxcclxcbi0gdXNlczogZ2FtZS1jaS91bml0eS1idWlsZGVyQHYyXFxyXFxuICB3aXRoOlxcclxcbiAgICBjdXN0b21JbWFnZTogJ3VuaXR5Y2kvZWRpdG9yOjIwMjAuMS4xNGYxLWJhc2UtMCdcXHJcXG5gYGBcXHJcXG5cXHJcXG5fKipyZXF1aXJlZDoqKiBgZmFsc2VgX1xcclxcbl8qKmRlZmF1bHQ6KiogYFxcXCJcXFwiYF9cXHJcXG5cXHJcXG4jIyMjIHByb2plY3RQYXRoXFxyXFxuXFxyXFxuU3BlY2lmeSB0aGUgcGF0aCB0byB5b3VyIFVuaXR5IHByb2plY3QgdG8gYmUgYnVpbHQuXFxyXFxuVGhlIHBhdGggc2hvdWxkIGJlIHJlbGF0aXZlIHRvIHRoZSByb290IG9mIHlvdXIgcHJvamVjdC5cXHJcXG5cXHJcXG5fKipyZXF1aXJlZDoqKiBgZmFsc2VgX1xcclxcbl8qKmRlZmF1bHQ6KiogYDx5b3VyIHByb2plY3Qgcm9vdD5gX1xcclxcblxcclxcbiMjIyMgYnVpbGROYW1lXFxyXFxuXFxyXFxuTmFtZSBvZiB0aGUgYnVpbGQuIEFsc28gdGhlIGZvbGRlciBpbiB3aGljaCB0aGUgYnVpbGQgd2lsbCBiZSBzdG9yZWQgd2l0aGluIGBidWlsZHNQYXRoYC5cXHJcXG5cXHJcXG5fKipyZXF1aXJlZDoqKiBgZmFsc2VgX1xcclxcbl8qKmRlZmF1bHQ6KiogYDxidWlsZF90YXJnZXQ+YF9cXHJcXG5cXHJcXG4jIyMjIGJ1aWxkc1BhdGhcXHJcXG5cXHJcXG5QYXRoIHdoZXJlIHRoZSBidWlsZHMgc2hvdWxkIGJlIHN0b3JlZC5cXHJcXG5cXHJcXG5JbiB0aGlzIGZvbGRlciBhIGZvbGRlciB3aWxsIGJlIGNyZWF0ZWQgZm9yIGV2ZXJ5IHRhcmdldFBsYXRmb3JtLlxcclxcblxcclxcbl8qKnJlcXVpcmVkOioqIGBmYWxzZWBfXFxyXFxuXyoqZGVmYXVsdDoqKiBgYnVpbGRgX1xcclxcblxcclxcbiMjIyMgYnVpbGRNZXRob2RcXHJcXG5cXHJcXG5DdXN0b20gY29tbWFuZCB0byBydW4geW91ciBidWlsZC5cXHJcXG5cXHJcXG5UaGVyZSBhcmUgdHdvIGNvbmRpdGlvbnMgZm9yIGEgY3VzdG9tIGJ1aWxkTWV0aG9kOlxcclxcblxcclxcbi0gTXVzdCByZWZlcmVuY2UgYSB2YWxpZCBwYXRoIHRvIGEgYHN0YXRpY2AgbWV0aG9kLlxcclxcbi0gVGhlIGNsYXNzIG11c3QgcmVzaWRlIGluIHRoZSBgQXNzZXRzL0VkaXRvcmAgZGlyZWN0b3J5IChvciBpbiBhbiBFZGl0b3IgQXNzZW1ibHkpLlxcclxcblxcclxcbkV4YW1wbGU6XFxyXFxuXFxyXFxuYGBgeWFtbFxcclxcbi0gdXNlczogZ2FtZS1jaS91bml0eS1idWlsZGVyQHYyXFxyXFxuICB3aXRoOlxcclxcbiAgICBidWlsZE1ldGhvZDogRWRpdG9yTmFtZXNwYWNlLkJ1aWxkZXJDbGFzc05hbWUuU3RhdGljQnVpbGRNZXRob2RcXHJcXG5gYGBcXHJcXG5cXHJcXG5UbyBnZXQgc3RhcnRlZCB3aXRoIGEgbW9kaWZpZWQgdmVyc2lvbiBvZiB0aGUgZGVmYXVsdCBVbml0eSBCdWlsZGVyIGJ1aWxkIHNjcmlwdCwgeW91IGNhbiBjb3B5IFtCdWlsZFNjcmlwdC5jc10oaHR0cHM6Ly9naXRodWIuY29tL2dhbWUtY2kvZG9jdW1lbnRhdGlvbi9ibG9iL21haW4vZXhhbXBsZS9CdWlsZFNjcmlwdC5jcykgdG8geW91ciBgQXNzZXRzL0VkaXRvci9Vbml0eUJ1aWxkZXJBY3Rpb25gIGRpcmVjdG9yeSBhbmQgcmVmZXJlbmNlIGl0OlxcclxcblxcclxcbmBgYHlhbWxcXHJcXG4tIHVzZXM6IGdhbWUtY2kvdW5pdHktYnVpbGRlckB2MlxcclxcbiAgd2l0aDpcXHJcXG4gICAgYnVpbGRNZXRob2Q6IFVuaXR5QnVpbGRlckFjdGlvbi5CdWlsZFNjcmlwdC5CdWlsZFxcclxcbmBgYFxcclxcblxcclxcbklmIHlvdSBuZWVkIHRvIHBhc3MgY3VzdG9tIHBhcmFtZXRlcnMgdG8gdGhpcyBidWlsZCBtZXRob2QsIHNlZSBgY3VzdG9tUGFyYW1ldGVyc2AgYmVsb3cuXFxyXFxuXFxyXFxuXyoqcmVxdWlyZWQ6KiogYGZhbHNlYF9cXHJcXG5fKipkZWZhdWx0OioqIEJ1aWx0LWluIHNjcmlwdCB0aGF0IHdpbGwgcnVuIGEgYnVpbGQgb3V0IG9mIHRoZSBib3guX1xcclxcblxcclxcbiMjIyMgY3VzdG9tUGFyYW1ldGVyc1xcclxcblxcclxcbkN1c3RvbSBwYXJhbWV0ZXJzIHRvIGNvbmZpZ3VyZSB0aGUgYnVpbGQuXFxyXFxuXFxyXFxuUGFyYW1ldGVycyBtdXN0IHN0YXJ0IHdpdGggYSBoeXBoZW4gKGAtYCkgYW5kIG1heSBiZSBmb2xsb3dlZCBieSBhIHZhbHVlICh3aXRob3V0IGh5cGhlbikuXFxyXFxuXFxyXFxuUGFyYW1ldGVycyB3aXRob3V0IGEgdmFsdWUgd2lsbCBiZSBjb25zaWRlcmVkIGJvb2xlYW5zICh3aXRoIGEgdmFsdWUgb2YgdHJ1ZSkuXFxyXFxuXFxyXFxuYGBgeWFtbFxcclxcbi0gdXNlczogZ2FtZS1jaS91bml0eS1idWlsZGVyQHYyXFxyXFxuICB3aXRoOlxcclxcbiAgICBjdXN0b21QYXJhbWV0ZXJzOiAtcHJvZmlsZSBTb21lUHJvZmlsZSAtc29tZUJvb2xlYW4gLXNvbWVWYWx1ZSBleGFtcGxlVmFsdWVcXHJcXG5gYGBcXHJcXG5cXHJcXG5UaGVyZSBhcmUgMiBtYWluIHVzZSBjYXNlczpcXHJcXG5cXHJcXG4tIFRvIHBhc3MgeW91ciBvd24gY3VzdG9tIHBhcmFtZXRlcnMgdG8gYmUgdXNlZCB3aXRoIGBidWlsZE1ldGhvZGAgYWJvdmVcXHJcXG4tIFRvIHBhc3MgW1VuaXR5IEJ1aWxkIE9wdGlvbnNdKGh0dHBzOi8vZG9jcy51bml0eTNkLmNvbS9TY3JpcHRSZWZlcmVuY2UvQnVpbGRPcHRpb25zLmh0bWwpIChmb3IgZXhhbXBsZSwgYGN1c3RvbVBhcmFtZXRlcnM6IC1FbmFibGVIZWFkbGVzc01vZGVgIHdpbGwgZG8gc2VydmVyIGJ1aWxkcylcXHJcXG5cXHJcXG5fKipyZXF1aXJlZDoqKiBgZmFsc2VgX1xcclxcbl8qKmRlZmF1bHQ6KiogYFxcXCJcXFwiYF9cXHJcXG5cXHJcXG4jIyMjIHZlcnNpb25pbmdcXHJcXG5cXHJcXG5Db25maWd1cmUgYSBzcGVjaWZpYyB2ZXJzaW9uaW5nIHN0cmF0ZWd5XFxyXFxuXFxyXFxuYGBgeWFtbFxcclxcbi0gdXNlczogZ2FtZS1jaS91bml0eS1idWlsZGVyQHYyXFxyXFxuICB3aXRoOlxcclxcbiAgICB2ZXJzaW9uaW5nOiBTZW1hbnRpY1xcclxcbmBgYFxcclxcblxcclxcbkZpbmQgdGhlIGF2YWlsYWJsZSBzdHJhdGVnaWVzIGJlbG93OlxcclxcblxcclxcbiMjIyMjIFNlbWFudGljXFxyXFxuXFxyXFxuVmVyc2lvbmluZyBvdXQgb2YgdGhlIGJveCEgKioocmVjb21tZW5kZWQpKipcXHJcXG5cXHJcXG4+IENvbXBhdGlibGUgd2l0aCAqKmFsbCBwbGF0Zm9ybXMqKi4gIFxcclxcbj4gRG9lcyAqKm5vdCoqIG1vZGlmeSB5b3VyIHJlcG9zaXRvcnkuICBcXHJcXG4+IFJlcXVpcmVzICoqemVybyBjb25maWd1cmF0aW9uKiouXFxyXFxuXFxyXFxuSG93IGl0IHdvcmtzOlxcclxcblxcclxcbj4gR2VuZXJhdGVzIGEgdmVyc2lvbiBiYXNlZCBvbiBbc2VtYW50aWMgdmVyc2lvbmluZ10oaHR0cHM6Ly9zZW12ZXIub3JnLykuICBcXHJcXG4+IEZvbGxvd3MgYDxtYWpvcj4uPG1pbm9yPi48cGF0Y2g+YCBmb3IgZXhhbXBsZSBgMC4xNy4yYC4gIFxcclxcbj4gVGhlIGxhdGVzdCB0YWcgZGljdGF0ZXMgYDxtYWpvcj4uPG1pbm9yPmAgKGRlZmF1bHRzIHRvIDAuMCBmb3Igbm8gdGFnKS4gIFxcclxcbj4gVGhlIG51bWJlciBvZiBjb21taXRzIChzaW5jZSB0aGUgbGFzdCB0YWcsIGlmIGFueSkgaXMgdXNlZCBmb3IgYDxwYXRjaD5gLlxcclxcblxcclxcbk5vIGNvbmZpZ3VyYXRpb24gcmVxdWlyZWQuXFxyXFxuXFxyXFxuIyMjIyMgVGFnXFxyXFxuXFxyXFxuR2VuZXJhdGVzIHRoZSB2ZXJzaW9uIGJhc2VkIG9uIHRoZSBsYXRlc3QgZ2l0IHRhZy4gRm9yIGV4YW1wbGUgYDAuMTcuMmAgd2lsbFxcclxcbmdlbmVyYXRlIHRoZSB2ZXJzaW9uIGAwLjE3LjJgLiBBIGxlYWRpbmcgXFxcInZcXFwiIGlzIHN0cmlwcGVkLCBzbyBhIHZlcnNpb24gb2ZcXHJcXG5gdjEuMy4zYCB3aWxsIGdlbmVyYXRlIGEgdmVyc2lvbiBvZiBgMS4zLjNgLiAqKihhZHZhbmNlZCB1c2VycykqKlxcclxcblxcclxcbj4gQ29tcGF0aWJsZSB3aXRoICoqYWxsIHBsYXRmb3JtcyoqLlxcclxcbj4gRG9lcyAqKm5vdCoqIG1vZGlmeSB5b3VyIHJlcG9zaXRvcnkuXFxyXFxuXFxyXFxuIyMjIyMgQ3VzdG9tXFxyXFxuXFxyXFxuQWxsb3dzIHNwZWNpZnlpbmcgYSBjdXN0b20gdmVyc2lvbiBpbiB0aGUgYHZlcnNpb25gIGZpZWxkLiAqKihhZHZhbmNlZCB1c2VycykqKlxcclxcblxcclxcbj4gVGhpcyBzdHJhdGVneSBpcyB1c2VmdWwgd2hlbiB5b3VyIHByb2plY3Qgb3IgcGlwZWxpbmUgaGFzIHNvbWUga2luZCBvZiBvcmNoZXN0cmF0aW9uXFxyXFxuPiB0aGF0IGRldGVybWluZXMgdGhlIHZlcnNpb25zLlxcclxcblxcclxcbiMjIyMjIE5vbmVcXHJcXG5cXHJcXG5ObyB2ZXJzaW9uIHdpbGwgYmUgc2V0IGJ5IEJ1aWxkZXIuICoqKG5vdCByZWNvbW1lbmRlZCkqKlxcclxcblxcclxcbj4gTm90IHJlY29tbWVuZGVkIHVubGVzcyB5b3UgZ2VuZXJhdGUgYSBuZXcgdmVyc2lvbiBpbiBhIHByZS1jb21taXQgaG9vay4gTWFudWFsbHlcXHJcXG4+IHNldHRpbmcgdmVyc2lvbnMgaXMgZXJyb3ItcHJvbmUuXFxyXFxuXFxyXFxuIyMjIyBhbmRyb2lkVmVyc2lvbkNvZGVcXHJcXG5cXHJcXG5Db25maWd1cmUgdGhlIGFuZHJvaWQgYHZlcnNpb25Db2RlYC5cXHJcXG5cXHJcXG5XaGVuIG5vdCBzcGVjaWZpZWQsIHRoZSB2ZXJzaW9uIGNvZGUgaXMgZ2VuZXJhdGVkIGZyb20gdGhlIHZlcnNpb24gdXNpbmcgdGhlIGBtYWpvciAqIDEwMDAwMDAgKyBtaW5vciAqIDEwMDAgKyBwYXRjaGAgc2NoZW1lO1xcclxcblxcclxcbiMjIyMgYW5kcm9pZEFwcEJ1bmRsZVxcclxcblxcclxcblNldCB0aGlzIGZsYWcgdG8gYHRydWVgIHRvIGJ1aWxkICcuYWFiJyBpbnN0ZWFkIG9mICcuYXBrJy5cXHJcXG5cXHJcXG5gYGB5YW1sXFxyXFxuLSB1c2VzOiBnYW1lLWNpL3VuaXR5LWJ1aWxkZXJAdjJcXHJcXG4gIHdpdGg6XFxyXFxuICAgIGFuZHJvaWRBcHBCdW5kbGU6IHRydWVcXHJcXG4gICAgYW5kcm9pZEtleXN0b3JlTmFtZTogdXNlci5rZXlzdG9yZVxcclxcbiAgICBhbmRyb2lkS2V5c3RvcmVCYXNlNjQ6ICR7eyBzZWNyZXRzLkFORFJPSURfS0VZU1RPUkVfQkFTRTY0IH19XFxyXFxuICAgIGFuZHJvaWRLZXlzdG9yZVBhc3M6ICR7eyBzZWNyZXRzLkFORFJPSURfS0VZU1RPUkVfUEFTUyB9fVxcclxcbiAgICBhbmRyb2lkS2V5YWxpYXNOYW1lOiAke3sgc2VjcmV0cy5BTkRST0lEX0tFWUFMSUFTX05BTUUgfX1cXHJcXG4gICAgYW5kcm9pZEtleWFsaWFzUGFzczogJHt7IHNlY3JldHMuQU5EUk9JRF9LRVlBTElBU19QQVNTIH19XFxyXFxuYGBgXFxyXFxuXFxyXFxuWW91IHNob3VsZCBhbHNvIHNldCBhbGwgdGhlIEFuZHJvaWQgS2V5c3RvcmUgb3B0aW9ucyAoc2VlIGJlbG93KS5cXHJcXG5cXHJcXG5fKipyZXF1aXJlZDoqKiBgZmFsc2VgX1xcclxcbl8qKmRlZmF1bHQ6KiogYGZhbHNlYF9cXHJcXG5cXHJcXG4jIyMjIGFuZHJvaWRLZXlzdG9yZU5hbWVcXHJcXG5cXHJcXG5Db25maWd1cmUgdGhlIGFuZHJvaWQgYGtleXN0b3JlTmFtZWAuIE11c3QgYmUgcHJvdmlkZWQgaWYgY29uZmlndXJpbmcgdGhlIGJlbG93IGtleXN0b3JlIG9wdGlvbnMuXFxyXFxuXFxyXFxuRm9yIHRoaXMgdG8gdGFrZSBlZmZlY3QsIHlvdSBtdXN0IGVuYWJsZSBgQ3VzdG9tIEtleXN0b3JlYCBpbiB5b3VyXFxyXFxuW0FuZHJvaWQgUGxheWVyIHNldHRpbmdzXShodHRwczovL2RvY3MudW5pdHkzZC5jb20vTWFudWFsL2NsYXNzLVBsYXllclNldHRpbmdzQW5kcm9pZC5odG1sKS5cXHJcXG5UaGUgZGVmYXVsdCBidWlsZCBzY3JpcHQgb3ZlcnJpZGVzIHRoZSBvdGhlciBrZXlzdG9yZSBzZXR0aW5ncyB3aXRoIHRoZXNlIGtleXN0b3JlIG9wdGlvbnMuXFxyXFxuXFxyXFxuXyoqcmVxdWlyZWQ6KiogYGZhbHNlYF9cXHJcXG5fKipkZWZhdWx0OioqIGBcXFwiXFxcImBfXFxyXFxuXFxyXFxuIyMjIyBhbmRyb2lkS2V5c3RvcmVCYXNlNjRcXHJcXG5cXHJcXG5Db25maWd1cmUgdGhlIGJhc2U2NCBjb250ZW50cyBvZiB0aGUgYW5kcm9pZCBrZXlzdG9yZSBmaWxlLiBZb3Ugc2hvdWxkIGdldCB0aGlzIHdpdGggYGJhc2U2NCAkYW5kcm9pZEtleXN0b3JlTmFtZWBcXHJcXG5cXHJcXG5UaGUgY29udGVudHMgd2lsbCBiZSBkZWNvZGVkIGZyb20gYmFzZTY0IHVzaW5nIGBlY2hvICRhbmRyb2lkS2V5c3RvcmVCYXNlNjQgfCBiYXNlNjQgLS1kZWNvZGUgPiAkcHJvamVjdFBhdGgvJGFuZHJvaWRLZXlzdG9yZU5hbWVgXFxyXFxuXFxyXFxuSXQgaXMgcmVjb21tZW5kZWQgdG8gdXNlIFtHaXRIdWIgU2VjcmV0c10oaHR0cHM6Ly9kb2NzLmdpdGh1Yi5jb20vZW4vYWN0aW9ucy9yZWZlcmVuY2UvZW5jcnlwdGVkLXNlY3JldHMpLlxcclxcblxcclxcbl8qKnJlcXVpcmVkOioqIGBmYWxzZWBfXFxyXFxuXyoqZGVmYXVsdDoqKiBgXFxcIlxcXCJgX1xcclxcblxcclxcbiMjIyMgYW5kcm9pZEtleXN0b3JlUGFzc1xcclxcblxcclxcbkNvbmZpZ3VyZSB0aGUgYW5kcm9pZCBga2V5c3RvcmVQYXNzYC4gUmVjb21tZW5kZWQgdG8gdXNlIEdpdEh1YiBTZWNyZXRzLlxcclxcblxcclxcbl8qKnJlcXVpcmVkOioqIGBmYWxzZWBfXFxyXFxuXyoqZGVmYXVsdDoqKiBgXFxcIlxcXCJgX1xcclxcblxcclxcbiMjIyMgYW5kcm9pZEtleWFsaWFzTmFtZVxcclxcblxcclxcbkNvbmZpZ3VyZSB0aGUgYW5kcm9pZCBga2V5YWxpYXNOYW1lYC4gUmVjb21tZW5kZWQgdG8gdXNlIEdpdEh1YiBTZWNyZXRzLlxcclxcblxcclxcbl8qKnJlcXVpcmVkOioqIGBmYWxzZWBfXFxyXFxuXyoqZGVmYXVsdDoqKiBgXFxcIlxcXCJgX1xcclxcblxcclxcbiMjIyMgYW5kcm9pZEtleWFsaWFzUGFzc1xcclxcblxcclxcbkNvbmZpZ3VyZSB0aGUgYW5kcm9pZCBga2V5YWxpYXNQYXNzYC4gUmVjb21tZW5kZWQgdG8gdXNlIEdpdEh1YiBTZWNyZXRzLlxcclxcblxcclxcbl8qKnJlcXVpcmVkOioqIGBmYWxzZWBfXFxyXFxuXyoqZGVmYXVsdDoqKiBgXFxcIlxcXCJgX1xcclxcblxcclxcbiMjIyMgYW5kcm9pZFRhcmdldFNka1ZlcnNpb25cXHJcXG5cXHJcXG5Db25maWd1cmUgdGhlIGFuZHJvaWQgdGFyZ2V0IEFQSSBsZXZlbC4gSWYgdXNlZCwgbXVzdCBiZSBvbmUgb2YgW1VuaXR5J3MgQW5kcm9pZFNka1ZlcnNpb25zXShodHRwczovL2RvY3MudW5pdHkzZC5jb20vU2NyaXB0UmVmZXJlbmNlL0FuZHJvaWRTZGtWZXJzaW9ucy5odG1sKS5cXHJcXG5cXHJcXG5fKipyZXF1aXJlZDoqKiBgZmFsc2VgX1xcclxcbl8qKmRlZmF1bHQ6KiogYFxcXCJcXFwiYF9cXHJcXG5cXHJcXG4jIyMjIHNzaEFnZW50XFxyXFxuXFxyXFxuU1NIIEFnZW50IHBhdGggdG8gZm9yd2FyZCB0byB0aGUgY29udGFpbmVyLlxcclxcblxcclxcblRoaXMgaXMgdXNlZnVsIGlmIHlvdXIgbWFuaWZlc3QgaGFzIGEgZGVwZW5kZW5jeSBvbiBhIHByaXZhdGUgR2l0SHViIHJlcG8uXFxyXFxuXFxyXFxuXyoqcmVxdWlyZWQ6KiogYGZhbHNlYF9cXHJcXG5fKipkZWZhdWx0OioqIGBcXFwiXFxcImBfXFxyXFxuXFxyXFxuIyMjIyBnaXRQcml2YXRlVG9rZW5cXHJcXG5cXHJcXG5HaXRodWIgcHJpdmF0ZSB0b2tlbiB0byBwdWxsIGZyb20gZ2l0aHViLlxcclxcblxcclxcblRoaXMgaXMgdXNlZnVsIGlmIHlvdXIgbWFuaWZlc3QgaGFzIGEgZGVwZW5kZW5jeSBvbiBhIHByaXZhdGUgR2l0SHViIHJlcG8uXFxyXFxuXFxyXFxuXyoqcmVxdWlyZWQ6KiogYGZhbHNlYF9cXHJcXG5fKipkZWZhdWx0OioqIGBcXFwiXFxcImBfXFxyXFxuXFxyXFxuIyMjIyBjaG93bkZpbGVzVG9cXHJcXG5cXHJcXG5Vc2VyIGFuZCBvcHRpb25hbGx5IGdyb3VwICh1c2VyIG9yIHVzZXI6Z3JvdXAgb3IgdWlkOmdpZCkgdG8gZ2l2ZSBvd25lcnNoaXAgb2YgdGhlIHJlc3VsdGluZyBidWlsZCBhcnRpZmFjdHMuXFxyXFxuXFxyXFxuXyoqcmVxdWlyZWQ6KiogYGZhbHNlYF9cXHJcXG5fKipkZWZhdWx0OioqIGBcXFwiXFxcImBfXFxyXFxuXFxyXFxuIyMjIyBhbGxvd0RpcnR5QnVpbGRcXHJcXG5cXHJcXG5BbGxvd3MgdGhlIGJyYW5jaCBvZiB0aGUgYnVpbGQgdG8gYmUgZGlydHksIGFuZCBzdGlsbCBnZW5lcmF0ZSB0aGUgYnVpbGQuXFxyXFxuXFxyXFxuYGBgeWFtbFxcclxcbi0gdXNlczogZ2FtZS1jaS91bml0eS1idWlsZGVyQHYyXFxyXFxuICB3aXRoOlxcclxcbiAgICBhbGxvd0RpcnR5QnVpbGQ6IHRydWVcXHJcXG5gYGBcXHJcXG5cXHJcXG5Ob3RlIHRoYXQgaXQgaXMgZ2VuZXJhbGx5IGJhZCBwcmFjdGljZSB0byBtb2RpZnkgeW91ciBicmFuY2hcXHJcXG5pbiBhIENJIFBpcGVsaW5lLiBIb3dldmVyIHRoZXJlIGFyZSBleGNlcHRpb25zIHdoZXJlIHRoaXMgbWlnaHRcXHJcXG5iZSBuZWVkZWQuICh1c2Ugd2l0aCBjYXJlKS5cXHJcXG5cXHJcXG5fKipyZXF1aXJlZDoqKiBgZmFsc2VgX1xcclxcbl8qKmRlZmF1bHQ6KiogYGZhbHNlYF9cXHJcXG5cXHJcXG4jIyBPdXRwdXRzXFxyXFxuXFxyXFxuQmVsb3cgYXJlIG91dHB1dHMgdGhhdCBjYW4gYmUgYWNjZXNzZWQgYnkgdXNpbmcgYCR7eyBzdGVwcy5teUJ1aWxkU3RlcC5vdXRwdXRzLm91dHB1dE5hbWUgfX1gLCB3aGVyZSBgbXlCdWlsZFN0ZXBgIGlzIHRoZSBpZFxcclxcbm9mIHRoZSBCdWlsZGVyIHN0ZXAsIGFuZCBgb3V0cHV0TmFtZWAgaXMgdGhlIG5hbWUgb2YgdGhlIG91dHB1dC5cXHJcXG5cXHJcXG4jIyMjIGJ1aWxkVmVyc2lvblxcclxcblxcclxcblJldHVybnMgdGhlIHZlcnNpb24gdGhhdCB3YXMgZ2VuZXJhdGVkIGJ5IEJ1aWxkZXIsIGZvbGxvd2luZyB0aGUgc3RyYXRlZ3kgY29uZmlndXJlZCBmb3IgYHZlcnNpb25pbmdgLlxcclxcblxcclxcbmBgYHlhbWxcXHJcXG4tIHVzZXM6IGdhbWUtY2kvdW5pdHktYnVpbGRlckB2MlxcclxcbiAgaWQ6IG15QnVpbGRTdGVwXFxyXFxuLSBydW46IGVjaG8gJ1Byb2plY3QgVmVyc2lvbjogJHt7IHN0ZXBzLm15QnVpbGRTdGVwLm91dHB1dHMuYnVpbGRWZXJzaW9uIH19J1xcclxcbmBgYFxcclxcblxcclxcbiMjIFByaXZhdGUgR2l0aHViIHJlcG9zaXRvcmllc1xcclxcblxcclxcbklmIHlvdSB1c2UgcHJpdmF0ZSBnaXQgcmVwb3NpdG9yeSBpbiB5b3VyIHBhY2thZ2VzL21hbmlmZXN0Lmpzb24sIHlvdSBuZWVkIHRvIGNyZWF0ZSBTU0ggcHViL3ByaXZhdGUga2V5cyBmb3IgeW91ciBwcm9qZWN0IGFuZCB0aGVuIGFkZCB0byB0aGUgYHdlYmZhY3Rvcnkvc3NoLWFnZW50YFxcclxcblxcclxcbi0gR2VuZXJhdGUgcHVibGljLHByaXZhdGUga2V5IGZvciBnaXRodWIncyBTU0ggdXNpbmcgW3RoaXMgaW5zdHJ1Y3Rpb25dKGh0dHBzOi8vZG9jcy5naXRodWIuY29tL2VuL2dpdGh1Yi9hdXRoZW50aWNhdGluZy10by1naXRodWIvY29ubmVjdGluZy10by1naXRodWItd2l0aC1zc2gvZ2VuZXJhdGluZy1hLW5ldy1zc2gta2V5LWFuZC1hZGRpbmctaXQtdG8tdGhlLXNzaC1hZ2VudCNnZW5lcmF0aW5nLWEtbmV3LXNzaC1rZXkpIGFuZCBtYWtlIHN1cmUgdGhhdCB5b3UgeW91IHVzZSBgZ2l0QGdpdGh1Yi5jb206VVNFUi9QUk9KRUNULmdpdGAgaW5zdGVhZCBvZiBlbWFpbCBmb3IgYC1DYCBwYXJhbWV0ZXIgYmVjYXVzZSB3ZSdyZSBnb2luZyB0byB1c2UgaXQgYXMgZGVwbG95IGtleSBmb3IgYSBzaW5nbGUgcHJvamVjdCBhbmQgYHdlYmZhY3Rvcnkvc3NoLWFnZW50YCBnb2luZyB0byB1c2UgdGhhdCBmb3IgY2hlY2tpbmcgd2hpY2ggcmVwb3NpdG9yeSB0aGlzIGtleSBpcyByZWxhdGVkIHRvIC5cXHJcXG4tIEFkZCB0aGUgcHVibGljX2tleSB0byBEZXBsb3kgc2V0dGluZ3Mgb2YgeW91ciBwcml2YXRlIGdpdCByZXBvc2l0b3J5ICggaHR0cHM6Ly9naXRodWIuY29tL1VTRVIvUFJPSkVDVC9zZXR0aW5ncy9rZXlzKVxcclxcbi0gQWRkIHByaXZhdGVfa2V5IHRvIEdpdGh1YiBzZWNyZXRzIG9mIHRoZSBwcm9qZWN0IHRoYXQgeW91IHdhbnQgdG8gYnVpbGQgKGh0dHBzOi8vZ2l0aHViLmNvbS9VU0VSL1BST0pFQ1Qvc2V0dGluZ3Mvc2VjcmV0cy9hY3Rpb25zKVxcclxcbiAgKGtleSBuYW1lIHNob3VsZCBiZSBTU0hfUFJJVkFURV9LRVkgKVxcclxcbi0gRmluYWxseSwgYWRkIGB3ZWJmYWN0b3J5L3NzaC1hZ2VudGAgdG8geW91ciBHaXRodWIgYWN0aW9uIDpcXHJcXG5cXHJcXG5gYGB5YW1sXFxyXFxubmFtZTogQWNjZXNzaW5nIHByaXZhdGUgcmVwb3NcXHJcXG5ydW5zLW9uOiB1YnVudHUtbGF0ZXN0XFxyXFxuc3RlcHM6XFxyXFxuICAtIHVzZXM6IGFjdGlvbnMvY2hlY2tvdXRAdjJcXHJcXG4gIC0gdXNlczogd2ViZmFjdG9yeS9zc2gtYWdlbnRAdjAuNS4yXFxyXFxuICAgIHdpdGg6XFxyXFxuICAgICAgc3NoLXByaXZhdGUta2V5OiAke3sgc2VjcmV0cy5TU0hfUFJJVkFURV9LRVkgfX1cXHJcXG4gIC0gdXNlczogZ2FtZS1jaS91bml0eS1idWlsZGVyQHYyXFxyXFxuICAgIHdpdGg6XFxyXFxuICAgICAgc3NoQWdlbnQ6ICR7eyBlbnYuU1NIX0FVVEhfU09DSyB9fVxcclxcbmBgYFxcclxcblxcclxcbiMjIFVQTSBhdXRoZW50aWNhdGlvbiB1c2luZyAudXBtY29uZmlnLnRvbWxcXHJcXG5cXHJcXG5Vbml0eSByZXF1aXJlcyBhbiAudXBtY29uZmlnLnRvbWwgdG8gZXhpc3QgaW4gdGhlIGhvbWUgZGlyZWN0b3J5IHRvIGF1dGhlbnRpY2F0ZSBhbmQgZG93bmxvYWQgcGFja2FnZXMgZnJvbSBwcml2YXRlIFVQTSByZWdpc3RyaWVzLlxcclxcblRvIGNyZWF0ZSB0aGlzIGZpbGUsIGZpcnN0IGNyZWF0ZSB0aGUgYC9ob21lL3J1bm5lci93b3JrL190ZW1wL19naXRodWJfaG9tZWAgZGlyZWN0b3J5LCBhbmQgdGhlbiBjcmVhdGUgdGhlIC51cG1jb25maWcudG9tbCBmaWxlIGluc2lkZSB0aGF0IGRpcmVjdG9yeS5cXHJcXG5UaGlzIGFjdGlvbiBtdXN0IGJlIGRvbmUgYmVmb3JlIHJ1bm5pbmcgdGhlIGdhbWUtY2kvdW5pdHktYnVpbGRlckB2MiBhY3Rpb24uXFxyXFxuXFxyXFxuYGBgeWFtbFxcclxcbi0gbmFtZTogQ3JlYXRlIC51cG1jb25maWcudG9tbCBVUE0gYXV0aGVudGljYXRpb24gZmlsZVxcclxcbiAgcnVuOiB8XFxyXFxuICAgIG1rZGlyIC9ob21lL3J1bm5lci93b3JrL190ZW1wL19naXRodWJfaG9tZVxcclxcbiAgICBjZCAvaG9tZS9ydW5uZXIvd29yay9fdGVtcC9fZ2l0aHViX2hvbWVcXHJcXG4gICAgZWNobyBcXFwiW25wbUF1dGguXFxcXFxcXCJodHRwczovL3VwbS5leGFtcGxlLmNvbVxcXFxcXFwiXVxcXCIgPj4gLnVwbWNvbmZpZy50b21sXFxyXFxuICAgIGVjaG8gXFxcImFsd2F5c0F1dGggPSB0cnVlXFxcIiA+PiAudXBtY29uZmlnLnRvbWxcXHJcXG4gICAgZWNobyBcXFwidG9rZW4gPSBcXFxcXFxcIiR7eyBzZWNyZXRzLk5QTV9UT0tFTiB9fVxcXFxcXFwiXFxcIiA+PiAudXBtY29uZmlnLnRvbWxcXHJcXG5gYGBcXHJcXG5cXHJcXG4jIyBDb21wbGV0ZSBleGFtcGxlXFxyXFxuXFxyXFxuQSBjb21wbGV0ZSB3b3JrZmxvdyB0aGF0IGJ1aWxkcyBldmVyeSBhdmFpbGFibGUgcGxhdGZvcm0gY291bGQgbG9vayBsaWtlIHRoaXM6XFxyXFxuXFxyXFxuYGBgeWFtbFxcclxcbm5hbWU6IEJ1aWxkIHByb2plY3RcXHJcXG5cXHJcXG5vbjogW3B1c2gsIHB1bGxfcmVxdWVzdF1cXHJcXG5cXHJcXG5qb2JzOlxcclxcbiAgYnVpbGRGb3JBbGxTdXBwb3J0ZWRQbGF0Zm9ybXM6XFxyXFxuICAgIG5hbWU6IEJ1aWxkIGZvciAke3sgbWF0cml4LnRhcmdldFBsYXRmb3JtIH19XFxyXFxuICAgIHJ1bnMtb246IHVidW50dS1sYXRlc3RcXHJcXG4gICAgc3RyYXRlZ3k6XFxyXFxuICAgICAgZmFpbC1mYXN0OiBmYWxzZVxcclxcbiAgICAgIG1hdHJpeDpcXHJcXG4gICAgICAgIHRhcmdldFBsYXRmb3JtOlxcclxcbiAgICAgICAgICAtIFN0YW5kYWxvbmVPU1ggIyBCdWlsZCBhIG1hY09TIHN0YW5kYWxvbmUgKEludGVsIDY0LWJpdCkuXFxyXFxuICAgICAgICAgIC0gU3RhbmRhbG9uZVdpbmRvd3MgIyBCdWlsZCBhIFdpbmRvd3Mgc3RhbmRhbG9uZS5cXHJcXG4gICAgICAgICAgLSBTdGFuZGFsb25lV2luZG93czY0ICMgQnVpbGQgYSBXaW5kb3dzIDY0LWJpdCBzdGFuZGFsb25lLlxcclxcbiAgICAgICAgICAtIFN0YW5kYWxvbmVMaW51eDY0ICMgQnVpbGQgYSBMaW51eCA2NC1iaXQgc3RhbmRhbG9uZS5cXHJcXG4gICAgICAgICAgLSBpT1MgIyBCdWlsZCBhbiBpT1MgcGxheWVyLlxcclxcbiAgICAgICAgICAtIEFuZHJvaWQgIyBCdWlsZCBhbiBBbmRyb2lkIC5hcGsgc3RhbmRhbG9uZSBhcHAuXFxyXFxuICAgICAgICAgIC0gV2ViR0wgIyBXZWJHTC5cXHJcXG4gICAgc3RlcHM6XFxyXFxuICAgICAgLSB1c2VzOiBhY3Rpb25zL2NoZWNrb3V0QHYyXFxyXFxuICAgICAgICB3aXRoOlxcclxcbiAgICAgICAgICBmZXRjaC1kZXB0aDogMFxcclxcbiAgICAgICAgICBsZnM6IHRydWVcXHJcXG4gICAgICAtIHVzZXM6IGFjdGlvbnMvY2FjaGVAdjJcXHJcXG4gICAgICAgIHdpdGg6XFxyXFxuICAgICAgICAgIHBhdGg6IExpYnJhcnlcXHJcXG4gICAgICAgICAga2V5OiBMaWJyYXJ5LSR7eyBtYXRyaXgudGFyZ2V0UGxhdGZvcm0gfX1cXHJcXG4gICAgICAgICAgcmVzdG9yZS1rZXlzOiBMaWJyYXJ5LVxcclxcbiAgICAgIC0gdXNlczogZ2FtZS1jaS91bml0eS1idWlsZGVyQHYyXFxyXFxuICAgICAgICBlbnY6XFxyXFxuICAgICAgICAgIFVOSVRZX0xJQ0VOU0U6ICR7eyBzZWNyZXRzLlVOSVRZX0xJQ0VOU0UgfX1cXHJcXG4gICAgICAgIHdpdGg6XFxyXFxuICAgICAgICAgIHRhcmdldFBsYXRmb3JtOiAke3sgbWF0cml4LnRhcmdldFBsYXRmb3JtIH19XFxyXFxuICAgICAgLSB1c2VzOiBhY3Rpb25zL3VwbG9hZC1hcnRpZmFjdEB2MlxcclxcbiAgICAgICAgd2l0aDpcXHJcXG4gICAgICAgICAgbmFtZTogQnVpbGQtJHt7IG1hdHJpeC50YXJnZXRQbGF0Zm9ybSB9fVxcclxcbiAgICAgICAgICBwYXRoOiBidWlsZC8ke3sgbWF0cml4LnRhcmdldFBsYXRmb3JtIH19XFxyXFxuYGBgXFxyXFxuXFxyXFxuIyMgTmV4dCBzdGVwc1xcclxcblxcclxcbllvdSBjYW4gZmluZCBtb3JlIHdvcmtmbG93IGV4YW1wbGVzIGluIFtHZXR0aW5nIFN0YXJ0ZWRdKC9kb2NzL2dpdGh1Yi9nZXR0aW5nLXN0YXJ0ZWQjd29ya2Zsb3ctZXhhbXBsZXMpLlxcclxcblwiOyJdLCJzb3VyY2VSb290IjoiIn0=