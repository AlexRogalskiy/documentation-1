exports.ids = [30];
exports.modules = {

/***/ "./docs/github/v2/15-deployment/ios.md":
/*!*********************************************!*\
  !*** ./docs/github/v2/15-deployment/ios.md ***!
  \*********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("# Deploy to the App Store\r\n\r\nThis guide is intended to help with automating iOS builds and uploads to the App Store.\r\nThis guide assumes that you already have experience with [using Xcode for distribution](https://developer.apple.com/documentation/xcode/preparing-your-app-for-distribution).\r\nIt is important to be familiar with the manual process, as automating this process can be complicated.\r\n\r\n> -- **Note:** Make sure you do all these steps carefully.\r\n>\r\n> -- **Note:** You need a Mac environment for doing these steps.\r\n> A Mac is also recommended for debugging any issues with this workflow.\r\n\r\n### Conceptual overview\r\n\r\nWhen you build your Unity project for iOS, Unity will produce an Xcode project that needs to be built using Xcode on a Mac. In order to upload your app to the App Store, TestFlight, or a third-party beta distribution service, you will first need to build it in Xcode and then code-sign it.\r\n\r\n### 1- Install Fastlane\r\n\r\n[Fastlane](https://docs.fastlane.tools/getting-started/ios/setup/) is a tool that can facilitate building, codesigning, and uploading iOS apps, and is the easiest way to deploy your Unity project to iOS.\r\n\r\nTo configure Fastlane for your GitHub Actions workflow runners, you will need to locally set up a `Gemfile` and `Fastfile` within your project. A `Gemfile` specifies what Ruby dependencies are needed to set up and run Fastlane (which is written in Ruby), and a `Fastfile` will be how you configure your iOS build settings. We will set up the `Gemfile` now, and the `Fastfile` in a later step.\r\n\r\nYou will need your local machine to have [Ruby](https://www.ruby-lang.org/en/documentation/installation/) installed, as well as Bundler. If you have Ruby installed but are unsure if you have Bundler, you can run the following to install it:\r\n\r\n```bash\r\ngem install bundler\r\n```\r\n\r\nFrom there, create a file called `Gemfile` in the root of your git repository with following content:\r\n\r\n```ruby\r\n# Gemfile\r\nsource \"https://rubygems.org\"\r\ngem \"fastlane\"\r\n```\r\n\r\nThen run `bundle install`. This will create an additional `Gemfile.lock` file in the root of your project.\r\n\r\nCommit both `Gemfile` and `Gemfile.lock` to your repo.\r\n\r\n### 2- Create and store Codesigning Certificates\r\n\r\nCodesigning your iOS app for distribution requires an Apple developer or distribution certificate. Traditionally, allowing multiple developers on a team to build the same app (or allowing builds on a cloud CI system) requires you to either manually share a `.p12` file across all machines that will build the project, or set up a different codesigning identity for each developer or shared build machine. Updating all of these identities and certificates whenever changes are necessary can be a pain point.\r\n\r\nFastlane includes a tool called [Fastlane Match](https://docs.fastlane.tools/actions/match/) to simplify this process. It will store all of your codesigning identities and certificates securely on the cloud (typically in a private git repo, although you may opt to use a Google Cloud Storage or Amazon S3 bucket), and automatically download the correct certificates whenever Fastlane executes an Xcode build in any environment. Additionally, it can automatically manage your certificates and identities for you, interacting directly with Apple's APIs instead of requiring you to create and manage certificates through the developer portal.\r\n\r\nThe Match setup described below is a common workflow that is likely to be a good fit for many GameCI users. However, there are a number of different ways you can set up Match, and we recommend reading the Match [documentation](https://docs.fastlane.tools/actions/match/) and [codesigning guide](https://codesigning.guide) in their entirety.\r\n\r\nIf you do not already have a single shared Apple ID to be used by all developers and on all CI environments, create a new one.\r\n\r\nIf your Apple Developer account is messy and has lots of invalid, expired, or Xcode-managed profiles and certificates, you may **optionally** want to use Match to initially clean out your old developer portal by running `bundle exec fastlane match development` and `bundle exec fastlane match production`. **This will delete Apple codesigning identities and certificates and may break any existing workflows. It is NOT recommended if your project shares an Apple Developer account with other projects or teams at your company.**\r\n\r\nNext, create a private git repository to store your certificates.\r\n\r\nFrom the command-line on your Mac, run the following to generate new Development and Distribution certificates. It will ask you for the Apple ID and password of your new shared Apple ID, the URL of the git repository you have just created, and a password to encrypt the contents of the git repo. You will need to use this password later; it's recommended you use a team-wide password manager or similar shared secure keystore to both generate and store this password.\r\n\r\n```bash\r\nbundle exec fastlane match development\r\nbundle exec fastlane match appstore\r\n```\r\n\r\n### 3- Generate an App Store Connect API Key\r\n\r\nIn order for Fastlane Match to fetch and validate your codesigning certificates, it needs to authenticate you with Apple. All Apple IDs now require two-factor authentication to be enabled, which means you need to manually enter a 2FA code when logging in. This is fine if you're running match locally on your own machine, but is a problem on an automated CI system.\r\n\r\nTo work around this, you will need to generate an App Store Connect API key, which match can use to authenticate you with Apple without manual 2FA input while running on CI.\r\n\r\nGo to https://appstoreconnect.apple.com/access/users and log in. Go to the \"Keys\" tab and click the plus sign (+) to generate a new set of keys. Enter a name and select \"Developer\" access. Once it's been generated, click the \"Download API key\" link, which will download a file. Note you can only do this once. Later on in this guide, you will need the \"key ID\" from the table row for your newly-generated key, the \"issuer ID\" displayed at the top of the page, and the downloaded .p8 file.\r\n\r\n### 4- Configure Fastlane to build\r\n\r\nAt this point, you will have a private git repository that contains new valid codesigning identities and certificates. From here, you need to configure Fastlane to know how to build your Xcode project. Within your project directory, create a directory called `fastlane`, and then create two files within that directory, `Appfile` and `Fastfile`.\r\n\r\n```ruby\r\n# fastlane/Appfile\r\n\r\nfor_platform :ios do\r\n  app_identifier(ENV['IOS_BUNDLE_ID'])\r\n\r\n  apple_dev_portal_id(ENV['APPLE_DEVELOPER_EMAIL'])\r\n  itunes_connect_id(ENV['APPLE_CONNECT_EMAIL'])\r\n\r\n  team_id(ENV['APPLE_TEAM_ID'])\r\n  itc_team_id(ENV['APPLE_TEAM_ID'])\r\nend\r\n```\r\n\r\n```ruby\r\n# fastlane/Fastfile\r\n\r\nplatform :ios do\r\n\r\n  desc \"Deliver a new Release build to the App Store\"\r\n  lane :release do\r\n    build\r\n    upload_to_app_store\r\n  end\r\n\r\n  desc \"Deliver a new Beta build to Apple TestFlight\"\r\n  lane :beta do\r\n    # Missing Export Compliance can also be set through Deliverfile\r\n    update_info_plist(\r\n      xcodeproj: \"#{ENV['IOS_BUILD_PATH']}/iOS/Unity-iPhone.xcodeproj\",\r\n      plist_path: 'Info.plist',\r\n      block: proc do |plist|\r\n        plist['ITSAppUsesNonExemptEncryption'] = false\r\n      end\r\n    )\r\n    build\r\n    upload_to_testflight(skip_waiting_for_build_processing: true)\r\n  end\r\n\r\n  desc \"Create .ipa\"\r\n  lane :build do\r\n    setup_ci\r\n    app_store_connect_api_key(\r\n      key_id: ENV['APPSTORE_KEY_ID'],\r\n      issuer_id: ENV['APPSTORE_ISSUER_ID'],\r\n      key_content: ENV[\"APPSTORE_P8\"]\r\n    )\r\n\r\n    match(\r\n      type: 'appstore',\r\n      storage_mode: 'git',\r\n      git_url: ENV['MATCH_URL'],\r\n      git_basic_authorization: Base64.strict_encode64(\"#{ENV['APPLE_CONNECT_EMAIL']}:#{ENV['MATCH_PERSONAL_ACCESS_TOKEN']}\"),\r\n      app_identifier: ENV['IOS_BUNDLE_ID']\r\n    )\r\n\r\n    # Unity has specific requirements around codesigning that we have to handle\r\n    # See https://github.com/fastlane/fastlane/discussions/17458 for context\r\n    update_code_signing_settings(\r\n      use_automatic_signing: true,\r\n      path: \"#{ENV['IOS_BUILD_PATH']}/iOS/Unity-iPhone.xcodeproj\"\r\n    )\r\n\r\n    update_code_signing_settings(\r\n      use_automatic_signing: false,\r\n      team_id: ENV[\"sigh_#{ENV['IOS_BUNDLE_ID']}_appstore_team-id\"],\r\n      code_sign_identity: 'iPhone Distribution',\r\n      targets: 'Unity-iPhone',\r\n      path: \"#{ENV['IOS_BUILD_PATH']}/iOS/Unity-iPhone.xcodeproj\",\r\n      profile_name: ENV[\"sigh_#{ENV['IOS_BUNDLE_ID']}_appstore_profile-name\"],\r\n      profile_uuid: ENV[\"sigh_#{ENV['IOS_BUNDLE_ID']}_appstore\"]\r\n    )\r\n\r\n    build_app( #alias: gym\r\n      project: \"#{ENV['IOS_BUILD_PATH']}/iOS/Unity-iPhone.xcodeproj\",\r\n      scheme: 'Unity-iPhone',\r\n      xcargs: '-allowProvisioningUpdates'\r\n    )\r\n  end\r\n\r\nend\r\n```\r\n\r\n> -- **Note:** If you add libraries that need `Podfile` (e.g. Firebase) to your project,\r\n> add this line to the beginning of your build step (the block of code starting with `lane :build do`):\r\n\r\n```ruby\r\n    cocoapods(\r\n      clean_install: true,\r\n      podfile: \"#{ENV['IOS_BUILD_PATH']}/iOS/\"\r\n    )\r\n```\r\n\r\nThis will install pods and generate the `xcworkspace` for you.\r\n\r\nThen change the [`build_app`](http://docs.fastlane.tools/actions/build_app/#build_app) (alias: [`gym`](https://docs.fastlane.tools/actions/gym/)) step at the end of this build phase to use the new `xcworkspace` instead of the old `xcodeproj`:\r\n\r\n```ruby\r\n    build_app( #alias: gym\r\n      workspace: \"#{ENV['IOS_BUILD_PATH']}/iOS/Unity-iPhone.xcworkspace\",\r\n      scheme: 'Unity-iPhone',\r\n      xcargs: '-allowProvisioningUpdates'\r\n    )\r\n```\r\n\r\n### 4- Add jobs to your GitHub Actions workflow\r\n\r\nBuilding for iOS is a two-step build process. When Unity builds your project for iOS, it generates an Xcode project, which then must be built and code-signed in Xcode via Fastlane.\r\n\r\nBoth workflows described below build your app and submit it to Apple for App Store release. If you want to submit your app for TestFlight distribution, you can create a job that is identical except it runs `bundle exec fastlane beta` instead of `bundle exec fastlane release` during the \"Fix File Permissions and Run Fastlane\" step. You can build your iOS app without uploading it (e.g. to confirm it builds successfully, or as a preparation step before uploading to an alternative distribution service) by instead running `bundle exec fastlane build`.\r\n\r\nPlease note that Apple will aggressively rate-limit you if you try to upload builds too frequently. We recommend you configure any workflow that submits to the App Store or TestFlight to be manually triggered, or otherwise make sure it won't automatically run more than a few times a day.\r\n\r\nThere are two options for how to set up the two-phase build, depending on whether or not your project uses IL2CPP as its scripting backend. If your project does **not** rely on IL2CPP, you can build your Unity project on Linux before switching over to a Mac runner to build the generated Xcode project. Because Linux execution time is cheaper than Mac execution time when using GitHub Actions hosted runners, this will be cheaper, and is what you should most likely do if you do not require IL2CPP support.\r\n\r\n```yaml\r\n# .github/workflows/main.yml\r\njobs:\r\n  buildForiOSPlatform:\r\n    name: Build for iOS\r\n    runs-on: ubuntu-latest\r\n    steps:\r\n      - uses: actions/checkout@v2\r\n\r\n      - uses: actions/cache@v2\r\n        with:\r\n          path: Library\r\n          key: Library-iOS\r\n\r\n      - uses: game-ci/unity-builder@v2\r\n        with:\r\n          targetPlatform: iOS\r\n\r\n      - uses: actions/upload-artifact@v2\r\n        with:\r\n          name: build-iOS\r\n          path: build/iOS\r\n\r\n  releaseToAppStore:\r\n    name: Release to the App Store\r\n    runs-on: macos-latest\r\n    needs: buildForiOSPlatform\r\n    steps:\r\n      - name: Checkout Repository\r\n        uses: actions/checkout@v2\r\n\r\n      - name: Download iOS Artifact\r\n        uses: actions/download-artifact@v2\r\n        with:\r\n          name: build-iOS\r\n          path: build/iOS\r\n\r\n      - name: Fix File Permissions and Run Fastlane\r\n        env:\r\n          APPLE_CONNECT_EMAIL: ${{ secrets.APPLE_CONNECT_EMAIL }}\r\n          APPLE_DEVELOPER_EMAIL: ${{ secrets.APPLE_DEVELOPER_EMAIL }}\r\n          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}\r\n\r\n          MATCH_URL: ${{ secrets.MATCH_URL }}\r\n          MATCH_PERSONAL_ACCESS_TOKEN: ${{ secrets.MATCH_PERSONAL_ACCESS_TOKEN }}\r\n          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}\r\n\r\n          APPSTORE_KEY_ID: ${{ secrets.APPSTORE_KEY_ID }}\r\n          APPSTORE_ISSUER_ID: ${{ secrets.APPSTORE_ISSUER_ID }}\r\n          APPSTORE_P8: ${{ secrets.APPSTORE_P8 }}\r\n\r\n          IOS_BUILD_PATH: ${{ format('{0}/build/iOS', github.workspace) }}\r\n          IOS_BUNDLE_ID: com.company.application # Change it to match your Unity bundle id\r\n          PROJECT_NAME: Your Project Name # Change it to match your project's name\r\n        run: |\r\n          find $IOS_BUILD_PATH -type f -name \"**.sh\" -exec chmod +x {} \\;\r\n          bundle install\r\n          bundle exec fastlane ios release\r\n\r\n      - name: Cleanup to avoid storage limit\r\n        if: always()\r\n        uses: geekyeggo/delete-artifact@v1\r\n        with:\r\n          name: build-iOS\r\n```\r\n\r\nIf your project does require IL2CPP, you will need to run your Unity build on a Mac runner. This allows your workflow to be slightly simpler, as you can run both builds on the same runner, but it may be more expensive.\r\n\r\n```yaml\r\n# .github/workflows/main.yml\r\njobs:\r\n  buildForiOSAndReleaseToAppStore:\r\n    name: Build for iOS and Release to the App Store\r\n    runs-on: macos-latest\r\n    steps:\r\n      - uses: actions/checkout@v2\r\n\r\n      - uses: actions/cache@v2\r\n        with:\r\n          path: Library\r\n          key: Library-iOS\r\n\r\n      - uses: game-ci/unity-builder@v2\r\n        with:\r\n          targetPlatform: iOS\r\n\r\n      - name: Fix File Permissions and Run Fastlane\r\n        env:\r\n          APPLE_CONNECT_EMAIL: ${{ secrets.APPLE_CONNECT_EMAIL }}\r\n          APPLE_DEVELOPER_EMAIL: ${{ secrets.APPLE_DEVELOPER_EMAIL }}\r\n          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}\r\n\r\n          MATCH_URL: ${{ secrets.MATCH_URL }}\r\n          MATCH_PERSONAL_ACCESS_TOKEN: ${{ secrets.MATCH_PERSONAL_ACCESS_TOKEN }}\r\n          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}\r\n\r\n          APPSTORE_KEY_ID: ${{ secrets.APPSTORE_KEY_ID }}\r\n          APPSTORE_ISSUER_ID: ${{ secrets.APPSTORE_ISSUER_ID }}\r\n          APPSTORE_P8: ${{ secrets.APPSTORE_P8 }}\r\n\r\n          IOS_BUILD_PATH: ${{ format('{0}/build/iOS', github.workspace) }}\r\n          IOS_BUNDLE_ID: com.company.application # Change it to match your Unity bundle id\r\n          PROJECT_NAME: Your Project Name # Change it to match your project's name\r\n        run: |\r\n          find $IOS_BUILD_PATH -type f -name \"**.sh\" -exec chmod +x {} \\;\r\n          bundle install\r\n          bundle exec fastlane ios release\r\n```\r\n\r\n### 5- Add secrets to your GitHub repo\r\n\r\nOn your project's GitHub repo page, add a number of Repository Secrets by going to Settings -> Secrets and clicking the \"New repository secret\" button in the top-right.\r\n\r\n- **APPLE_CONNECT_EMAIL**: Apple Connect email (if using our recommendation to create a single shared developer Apple ID for Fastlane Match, this will be the same as `APPLE_DEVELOPER_EMAIL`)\r\n- **APPLE_DEVELOPER_EMAIL**: Your Apple ID\r\n- **APPLE_TEAM_ID**: Team Id from your [Apple Developer Account - Membership Details](https://developer.apple.com/account/#/membership/)\r\n- **MATCH_URL**: Https url for the private git repo to which `fastlane match appstore` uploaded certificates.\r\n- **MATCH_PERSONAL_ACCESS_TOKEN**: GitHub [Personal Access Token](https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token) with full repo access to MATCH_URL\r\n- **MATCH_PASSWORD**: The password you set when configuring Fastlane Match.\r\n- **APPSTORE_KEY_ID, APPSTORE_ISSUER_ID, APPSTORE_P8**: Your App Store Connect API keys from the previous step. `APPSTORE_KEY_ID` is the \"Key ID\" from the table row, `APPSTORE_ISSUER_ID` is your issuer ID from the top of the page, and `APPSTORE_P8` is the entire contents of the `.p8` file you downloaded, starting with `-----BEGIN PRIVATE KEY-----` and ending with `-----END PRIVATE KEY-----`.\r\n\r\n### 6- Confirming your Unity and App Store Connect settings\r\n\r\nAt this point, if you have previously set up your app for manual iOS builds and TestFlight/App Store distribution, your GitHub Actions workflow will likely complete successfully. If that is not the case, there are a few more steps to finish setup.\r\n\r\nIn Unity, you will need to ensure that your [application icon(s)](https://docs.unity3d.com/Manual/class-PlayerSettingsiOS.html#icon) are set, as applications without the correct icons will generate an error while uploading to TestFlight. Additionally, set your Bundle Identifier and Signing Team ID in the [iOS Player settings - Identification settings](https://docs.unity3d.com/Manual/class-PlayerSettingsiOS.html#Identification). The bundle identifier needs to be the same as you have set for the `IOS_BUNDLE_ID` repository secret. If you don't know your Signing Team ID, you can find it by going to https://developer.apple.com/account/#!/membership while logged in, and it will be the \"Team ID\" listed.\r\n\r\nIn order to upload a build to Apple, an entry for your app needs to exist in your team's [App Store Connect](https://appstoreconnect.apple.com/). From the App Store Connect homepage, select \"My Apps\", and create or confirm the existence of an App with the same bundle identifier you are using in your Unity build settings and the `IOS_BUNDLE_ID` GitHub repository secret.\r\n");

/***/ })

};;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9kb2NzL2dpdGh1Yi92Mi8xNS1kZXBsb3ltZW50L2lvcy5tZCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBO0FBQWUsNjJKQUE4eUosaTVFQUFpNUUsc0JBQXNCLHlxQkFBeXFCLDJCQUEyQixHQUFHLG1DQUFtQyxpVUFBaVUsc0JBQXNCLHNKQUFzSixxQkFBcUIsK0hBQStILHNCQUFzQixtRUFBbUUscUJBQXFCLCtEQUErRCxxQkFBcUIsOEVBQThFLHNCQUFzQixpYkFBaWIsc0JBQXNCLDZaQUE2WixzQkFBc0Isb3NGQUFvc0YsK0JBQStCLHdDQUF3QyxpQ0FBaUMsZ0NBQWdDLHlCQUF5QixnQ0FBZ0MscUJBQXFCLDhDQUE4Qyx1Q0FBdUMsaUNBQWlDLDBCQUEwQixzQ0FBc0MsMkJBQTJCLHFDQUFxQyw4QkFBOEIsOEJBQThCLHVCQUF1QixxQ0FBcUMsVUFBVSxFQUFFLGlDQUFpQyxrUkFBa1IsSUFBSSxrZ0NBQWtnQywrQkFBK0Isd0NBQXdDLGlDQUFpQyxnQ0FBZ0MseUJBQXlCLGdDQUFnQyxxQkFBcUIsOENBQThDLHVDQUF1QyxpQ0FBaUMsMEJBQTBCLHNDQUFzQywyQkFBMkIscUNBQXFDLDhCQUE4Qiw4QkFBOEIsdUJBQXVCLHFDQUFxQyxVQUFVLEVBQUUsaUNBQWlDLGtSQUFrUixJQUFJLHkyRkFBeTJGLEUiLCJmaWxlIjoiMzAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBcIiMgRGVwbG95IHRvIHRoZSBBcHAgU3RvcmVcXHJcXG5cXHJcXG5UaGlzIGd1aWRlIGlzIGludGVuZGVkIHRvIGhlbHAgd2l0aCBhdXRvbWF0aW5nIGlPUyBidWlsZHMgYW5kIHVwbG9hZHMgdG8gdGhlIEFwcCBTdG9yZS5cXHJcXG5UaGlzIGd1aWRlIGFzc3VtZXMgdGhhdCB5b3UgYWxyZWFkeSBoYXZlIGV4cGVyaWVuY2Ugd2l0aCBbdXNpbmcgWGNvZGUgZm9yIGRpc3RyaWJ1dGlvbl0oaHR0cHM6Ly9kZXZlbG9wZXIuYXBwbGUuY29tL2RvY3VtZW50YXRpb24veGNvZGUvcHJlcGFyaW5nLXlvdXItYXBwLWZvci1kaXN0cmlidXRpb24pLlxcclxcbkl0IGlzIGltcG9ydGFudCB0byBiZSBmYW1pbGlhciB3aXRoIHRoZSBtYW51YWwgcHJvY2VzcywgYXMgYXV0b21hdGluZyB0aGlzIHByb2Nlc3MgY2FuIGJlIGNvbXBsaWNhdGVkLlxcclxcblxcclxcbj4gLS0gKipOb3RlOioqIE1ha2Ugc3VyZSB5b3UgZG8gYWxsIHRoZXNlIHN0ZXBzIGNhcmVmdWxseS5cXHJcXG4+XFxyXFxuPiAtLSAqKk5vdGU6KiogWW91IG5lZWQgYSBNYWMgZW52aXJvbm1lbnQgZm9yIGRvaW5nIHRoZXNlIHN0ZXBzLlxcclxcbj4gQSBNYWMgaXMgYWxzbyByZWNvbW1lbmRlZCBmb3IgZGVidWdnaW5nIGFueSBpc3N1ZXMgd2l0aCB0aGlzIHdvcmtmbG93LlxcclxcblxcclxcbiMjIyBDb25jZXB0dWFsIG92ZXJ2aWV3XFxyXFxuXFxyXFxuV2hlbiB5b3UgYnVpbGQgeW91ciBVbml0eSBwcm9qZWN0IGZvciBpT1MsIFVuaXR5IHdpbGwgcHJvZHVjZSBhbiBYY29kZSBwcm9qZWN0IHRoYXQgbmVlZHMgdG8gYmUgYnVpbHQgdXNpbmcgWGNvZGUgb24gYSBNYWMuIEluIG9yZGVyIHRvIHVwbG9hZCB5b3VyIGFwcCB0byB0aGUgQXBwIFN0b3JlLCBUZXN0RmxpZ2h0LCBvciBhIHRoaXJkLXBhcnR5IGJldGEgZGlzdHJpYnV0aW9uIHNlcnZpY2UsIHlvdSB3aWxsIGZpcnN0IG5lZWQgdG8gYnVpbGQgaXQgaW4gWGNvZGUgYW5kIHRoZW4gY29kZS1zaWduIGl0LlxcclxcblxcclxcbiMjIyAxLSBJbnN0YWxsIEZhc3RsYW5lXFxyXFxuXFxyXFxuW0Zhc3RsYW5lXShodHRwczovL2RvY3MuZmFzdGxhbmUudG9vbHMvZ2V0dGluZy1zdGFydGVkL2lvcy9zZXR1cC8pIGlzIGEgdG9vbCB0aGF0IGNhbiBmYWNpbGl0YXRlIGJ1aWxkaW5nLCBjb2Rlc2lnbmluZywgYW5kIHVwbG9hZGluZyBpT1MgYXBwcywgYW5kIGlzIHRoZSBlYXNpZXN0IHdheSB0byBkZXBsb3kgeW91ciBVbml0eSBwcm9qZWN0IHRvIGlPUy5cXHJcXG5cXHJcXG5UbyBjb25maWd1cmUgRmFzdGxhbmUgZm9yIHlvdXIgR2l0SHViIEFjdGlvbnMgd29ya2Zsb3cgcnVubmVycywgeW91IHdpbGwgbmVlZCB0byBsb2NhbGx5IHNldCB1cCBhIGBHZW1maWxlYCBhbmQgYEZhc3RmaWxlYCB3aXRoaW4geW91ciBwcm9qZWN0LiBBIGBHZW1maWxlYCBzcGVjaWZpZXMgd2hhdCBSdWJ5IGRlcGVuZGVuY2llcyBhcmUgbmVlZGVkIHRvIHNldCB1cCBhbmQgcnVuIEZhc3RsYW5lICh3aGljaCBpcyB3cml0dGVuIGluIFJ1YnkpLCBhbmQgYSBgRmFzdGZpbGVgIHdpbGwgYmUgaG93IHlvdSBjb25maWd1cmUgeW91ciBpT1MgYnVpbGQgc2V0dGluZ3MuIFdlIHdpbGwgc2V0IHVwIHRoZSBgR2VtZmlsZWAgbm93LCBhbmQgdGhlIGBGYXN0ZmlsZWAgaW4gYSBsYXRlciBzdGVwLlxcclxcblxcclxcbllvdSB3aWxsIG5lZWQgeW91ciBsb2NhbCBtYWNoaW5lIHRvIGhhdmUgW1J1YnldKGh0dHBzOi8vd3d3LnJ1YnktbGFuZy5vcmcvZW4vZG9jdW1lbnRhdGlvbi9pbnN0YWxsYXRpb24vKSBpbnN0YWxsZWQsIGFzIHdlbGwgYXMgQnVuZGxlci4gSWYgeW91IGhhdmUgUnVieSBpbnN0YWxsZWQgYnV0IGFyZSB1bnN1cmUgaWYgeW91IGhhdmUgQnVuZGxlciwgeW91IGNhbiBydW4gdGhlIGZvbGxvd2luZyB0byBpbnN0YWxsIGl0OlxcclxcblxcclxcbmBgYGJhc2hcXHJcXG5nZW0gaW5zdGFsbCBidW5kbGVyXFxyXFxuYGBgXFxyXFxuXFxyXFxuRnJvbSB0aGVyZSwgY3JlYXRlIGEgZmlsZSBjYWxsZWQgYEdlbWZpbGVgIGluIHRoZSByb290IG9mIHlvdXIgZ2l0IHJlcG9zaXRvcnkgd2l0aCBmb2xsb3dpbmcgY29udGVudDpcXHJcXG5cXHJcXG5gYGBydWJ5XFxyXFxuIyBHZW1maWxlXFxyXFxuc291cmNlIFxcXCJodHRwczovL3J1YnlnZW1zLm9yZ1xcXCJcXHJcXG5nZW0gXFxcImZhc3RsYW5lXFxcIlxcclxcbmBgYFxcclxcblxcclxcblRoZW4gcnVuIGBidW5kbGUgaW5zdGFsbGAuIFRoaXMgd2lsbCBjcmVhdGUgYW4gYWRkaXRpb25hbCBgR2VtZmlsZS5sb2NrYCBmaWxlIGluIHRoZSByb290IG9mIHlvdXIgcHJvamVjdC5cXHJcXG5cXHJcXG5Db21taXQgYm90aCBgR2VtZmlsZWAgYW5kIGBHZW1maWxlLmxvY2tgIHRvIHlvdXIgcmVwby5cXHJcXG5cXHJcXG4jIyMgMi0gQ3JlYXRlIGFuZCBzdG9yZSBDb2Rlc2lnbmluZyBDZXJ0aWZpY2F0ZXNcXHJcXG5cXHJcXG5Db2Rlc2lnbmluZyB5b3VyIGlPUyBhcHAgZm9yIGRpc3RyaWJ1dGlvbiByZXF1aXJlcyBhbiBBcHBsZSBkZXZlbG9wZXIgb3IgZGlzdHJpYnV0aW9uIGNlcnRpZmljYXRlLiBUcmFkaXRpb25hbGx5LCBhbGxvd2luZyBtdWx0aXBsZSBkZXZlbG9wZXJzIG9uIGEgdGVhbSB0byBidWlsZCB0aGUgc2FtZSBhcHAgKG9yIGFsbG93aW5nIGJ1aWxkcyBvbiBhIGNsb3VkIENJIHN5c3RlbSkgcmVxdWlyZXMgeW91IHRvIGVpdGhlciBtYW51YWxseSBzaGFyZSBhIGAucDEyYCBmaWxlIGFjcm9zcyBhbGwgbWFjaGluZXMgdGhhdCB3aWxsIGJ1aWxkIHRoZSBwcm9qZWN0LCBvciBzZXQgdXAgYSBkaWZmZXJlbnQgY29kZXNpZ25pbmcgaWRlbnRpdHkgZm9yIGVhY2ggZGV2ZWxvcGVyIG9yIHNoYXJlZCBidWlsZCBtYWNoaW5lLiBVcGRhdGluZyBhbGwgb2YgdGhlc2UgaWRlbnRpdGllcyBhbmQgY2VydGlmaWNhdGVzIHdoZW5ldmVyIGNoYW5nZXMgYXJlIG5lY2Vzc2FyeSBjYW4gYmUgYSBwYWluIHBvaW50LlxcclxcblxcclxcbkZhc3RsYW5lIGluY2x1ZGVzIGEgdG9vbCBjYWxsZWQgW0Zhc3RsYW5lIE1hdGNoXShodHRwczovL2RvY3MuZmFzdGxhbmUudG9vbHMvYWN0aW9ucy9tYXRjaC8pIHRvIHNpbXBsaWZ5IHRoaXMgcHJvY2Vzcy4gSXQgd2lsbCBzdG9yZSBhbGwgb2YgeW91ciBjb2Rlc2lnbmluZyBpZGVudGl0aWVzIGFuZCBjZXJ0aWZpY2F0ZXMgc2VjdXJlbHkgb24gdGhlIGNsb3VkICh0eXBpY2FsbHkgaW4gYSBwcml2YXRlIGdpdCByZXBvLCBhbHRob3VnaCB5b3UgbWF5IG9wdCB0byB1c2UgYSBHb29nbGUgQ2xvdWQgU3RvcmFnZSBvciBBbWF6b24gUzMgYnVja2V0KSwgYW5kIGF1dG9tYXRpY2FsbHkgZG93bmxvYWQgdGhlIGNvcnJlY3QgY2VydGlmaWNhdGVzIHdoZW5ldmVyIEZhc3RsYW5lIGV4ZWN1dGVzIGFuIFhjb2RlIGJ1aWxkIGluIGFueSBlbnZpcm9ubWVudC4gQWRkaXRpb25hbGx5LCBpdCBjYW4gYXV0b21hdGljYWxseSBtYW5hZ2UgeW91ciBjZXJ0aWZpY2F0ZXMgYW5kIGlkZW50aXRpZXMgZm9yIHlvdSwgaW50ZXJhY3RpbmcgZGlyZWN0bHkgd2l0aCBBcHBsZSdzIEFQSXMgaW5zdGVhZCBvZiByZXF1aXJpbmcgeW91IHRvIGNyZWF0ZSBhbmQgbWFuYWdlIGNlcnRpZmljYXRlcyB0aHJvdWdoIHRoZSBkZXZlbG9wZXIgcG9ydGFsLlxcclxcblxcclxcblRoZSBNYXRjaCBzZXR1cCBkZXNjcmliZWQgYmVsb3cgaXMgYSBjb21tb24gd29ya2Zsb3cgdGhhdCBpcyBsaWtlbHkgdG8gYmUgYSBnb29kIGZpdCBmb3IgbWFueSBHYW1lQ0kgdXNlcnMuIEhvd2V2ZXIsIHRoZXJlIGFyZSBhIG51bWJlciBvZiBkaWZmZXJlbnQgd2F5cyB5b3UgY2FuIHNldCB1cCBNYXRjaCwgYW5kIHdlIHJlY29tbWVuZCByZWFkaW5nIHRoZSBNYXRjaCBbZG9jdW1lbnRhdGlvbl0oaHR0cHM6Ly9kb2NzLmZhc3RsYW5lLnRvb2xzL2FjdGlvbnMvbWF0Y2gvKSBhbmQgW2NvZGVzaWduaW5nIGd1aWRlXShodHRwczovL2NvZGVzaWduaW5nLmd1aWRlKSBpbiB0aGVpciBlbnRpcmV0eS5cXHJcXG5cXHJcXG5JZiB5b3UgZG8gbm90IGFscmVhZHkgaGF2ZSBhIHNpbmdsZSBzaGFyZWQgQXBwbGUgSUQgdG8gYmUgdXNlZCBieSBhbGwgZGV2ZWxvcGVycyBhbmQgb24gYWxsIENJIGVudmlyb25tZW50cywgY3JlYXRlIGEgbmV3IG9uZS5cXHJcXG5cXHJcXG5JZiB5b3VyIEFwcGxlIERldmVsb3BlciBhY2NvdW50IGlzIG1lc3N5IGFuZCBoYXMgbG90cyBvZiBpbnZhbGlkLCBleHBpcmVkLCBvciBYY29kZS1tYW5hZ2VkIHByb2ZpbGVzIGFuZCBjZXJ0aWZpY2F0ZXMsIHlvdSBtYXkgKipvcHRpb25hbGx5Kiogd2FudCB0byB1c2UgTWF0Y2ggdG8gaW5pdGlhbGx5IGNsZWFuIG91dCB5b3VyIG9sZCBkZXZlbG9wZXIgcG9ydGFsIGJ5IHJ1bm5pbmcgYGJ1bmRsZSBleGVjIGZhc3RsYW5lIG1hdGNoIGRldmVsb3BtZW50YCBhbmQgYGJ1bmRsZSBleGVjIGZhc3RsYW5lIG1hdGNoIHByb2R1Y3Rpb25gLiAqKlRoaXMgd2lsbCBkZWxldGUgQXBwbGUgY29kZXNpZ25pbmcgaWRlbnRpdGllcyBhbmQgY2VydGlmaWNhdGVzIGFuZCBtYXkgYnJlYWsgYW55IGV4aXN0aW5nIHdvcmtmbG93cy4gSXQgaXMgTk9UIHJlY29tbWVuZGVkIGlmIHlvdXIgcHJvamVjdCBzaGFyZXMgYW4gQXBwbGUgRGV2ZWxvcGVyIGFjY291bnQgd2l0aCBvdGhlciBwcm9qZWN0cyBvciB0ZWFtcyBhdCB5b3VyIGNvbXBhbnkuKipcXHJcXG5cXHJcXG5OZXh0LCBjcmVhdGUgYSBwcml2YXRlIGdpdCByZXBvc2l0b3J5IHRvIHN0b3JlIHlvdXIgY2VydGlmaWNhdGVzLlxcclxcblxcclxcbkZyb20gdGhlIGNvbW1hbmQtbGluZSBvbiB5b3VyIE1hYywgcnVuIHRoZSBmb2xsb3dpbmcgdG8gZ2VuZXJhdGUgbmV3IERldmVsb3BtZW50IGFuZCBEaXN0cmlidXRpb24gY2VydGlmaWNhdGVzLiBJdCB3aWxsIGFzayB5b3UgZm9yIHRoZSBBcHBsZSBJRCBhbmQgcGFzc3dvcmQgb2YgeW91ciBuZXcgc2hhcmVkIEFwcGxlIElELCB0aGUgVVJMIG9mIHRoZSBnaXQgcmVwb3NpdG9yeSB5b3UgaGF2ZSBqdXN0IGNyZWF0ZWQsIGFuZCBhIHBhc3N3b3JkIHRvIGVuY3J5cHQgdGhlIGNvbnRlbnRzIG9mIHRoZSBnaXQgcmVwby4gWW91IHdpbGwgbmVlZCB0byB1c2UgdGhpcyBwYXNzd29yZCBsYXRlcjsgaXQncyByZWNvbW1lbmRlZCB5b3UgdXNlIGEgdGVhbS13aWRlIHBhc3N3b3JkIG1hbmFnZXIgb3Igc2ltaWxhciBzaGFyZWQgc2VjdXJlIGtleXN0b3JlIHRvIGJvdGggZ2VuZXJhdGUgYW5kIHN0b3JlIHRoaXMgcGFzc3dvcmQuXFxyXFxuXFxyXFxuYGBgYmFzaFxcclxcbmJ1bmRsZSBleGVjIGZhc3RsYW5lIG1hdGNoIGRldmVsb3BtZW50XFxyXFxuYnVuZGxlIGV4ZWMgZmFzdGxhbmUgbWF0Y2ggYXBwc3RvcmVcXHJcXG5gYGBcXHJcXG5cXHJcXG4jIyMgMy0gR2VuZXJhdGUgYW4gQXBwIFN0b3JlIENvbm5lY3QgQVBJIEtleVxcclxcblxcclxcbkluIG9yZGVyIGZvciBGYXN0bGFuZSBNYXRjaCB0byBmZXRjaCBhbmQgdmFsaWRhdGUgeW91ciBjb2Rlc2lnbmluZyBjZXJ0aWZpY2F0ZXMsIGl0IG5lZWRzIHRvIGF1dGhlbnRpY2F0ZSB5b3Ugd2l0aCBBcHBsZS4gQWxsIEFwcGxlIElEcyBub3cgcmVxdWlyZSB0d28tZmFjdG9yIGF1dGhlbnRpY2F0aW9uIHRvIGJlIGVuYWJsZWQsIHdoaWNoIG1lYW5zIHlvdSBuZWVkIHRvIG1hbnVhbGx5IGVudGVyIGEgMkZBIGNvZGUgd2hlbiBsb2dnaW5nIGluLiBUaGlzIGlzIGZpbmUgaWYgeW91J3JlIHJ1bm5pbmcgbWF0Y2ggbG9jYWxseSBvbiB5b3VyIG93biBtYWNoaW5lLCBidXQgaXMgYSBwcm9ibGVtIG9uIGFuIGF1dG9tYXRlZCBDSSBzeXN0ZW0uXFxyXFxuXFxyXFxuVG8gd29yayBhcm91bmQgdGhpcywgeW91IHdpbGwgbmVlZCB0byBnZW5lcmF0ZSBhbiBBcHAgU3RvcmUgQ29ubmVjdCBBUEkga2V5LCB3aGljaCBtYXRjaCBjYW4gdXNlIHRvIGF1dGhlbnRpY2F0ZSB5b3Ugd2l0aCBBcHBsZSB3aXRob3V0IG1hbnVhbCAyRkEgaW5wdXQgd2hpbGUgcnVubmluZyBvbiBDSS5cXHJcXG5cXHJcXG5HbyB0byBodHRwczovL2FwcHN0b3JlY29ubmVjdC5hcHBsZS5jb20vYWNjZXNzL3VzZXJzIGFuZCBsb2cgaW4uIEdvIHRvIHRoZSBcXFwiS2V5c1xcXCIgdGFiIGFuZCBjbGljayB0aGUgcGx1cyBzaWduICgrKSB0byBnZW5lcmF0ZSBhIG5ldyBzZXQgb2Yga2V5cy4gRW50ZXIgYSBuYW1lIGFuZCBzZWxlY3QgXFxcIkRldmVsb3BlclxcXCIgYWNjZXNzLiBPbmNlIGl0J3MgYmVlbiBnZW5lcmF0ZWQsIGNsaWNrIHRoZSBcXFwiRG93bmxvYWQgQVBJIGtleVxcXCIgbGluaywgd2hpY2ggd2lsbCBkb3dubG9hZCBhIGZpbGUuIE5vdGUgeW91IGNhbiBvbmx5IGRvIHRoaXMgb25jZS4gTGF0ZXIgb24gaW4gdGhpcyBndWlkZSwgeW91IHdpbGwgbmVlZCB0aGUgXFxcImtleSBJRFxcXCIgZnJvbSB0aGUgdGFibGUgcm93IGZvciB5b3VyIG5ld2x5LWdlbmVyYXRlZCBrZXksIHRoZSBcXFwiaXNzdWVyIElEXFxcIiBkaXNwbGF5ZWQgYXQgdGhlIHRvcCBvZiB0aGUgcGFnZSwgYW5kIHRoZSBkb3dubG9hZGVkIC5wOCBmaWxlLlxcclxcblxcclxcbiMjIyA0LSBDb25maWd1cmUgRmFzdGxhbmUgdG8gYnVpbGRcXHJcXG5cXHJcXG5BdCB0aGlzIHBvaW50LCB5b3Ugd2lsbCBoYXZlIGEgcHJpdmF0ZSBnaXQgcmVwb3NpdG9yeSB0aGF0IGNvbnRhaW5zIG5ldyB2YWxpZCBjb2Rlc2lnbmluZyBpZGVudGl0aWVzIGFuZCBjZXJ0aWZpY2F0ZXMuIEZyb20gaGVyZSwgeW91IG5lZWQgdG8gY29uZmlndXJlIEZhc3RsYW5lIHRvIGtub3cgaG93IHRvIGJ1aWxkIHlvdXIgWGNvZGUgcHJvamVjdC4gV2l0aGluIHlvdXIgcHJvamVjdCBkaXJlY3RvcnksIGNyZWF0ZSBhIGRpcmVjdG9yeSBjYWxsZWQgYGZhc3RsYW5lYCwgYW5kIHRoZW4gY3JlYXRlIHR3byBmaWxlcyB3aXRoaW4gdGhhdCBkaXJlY3RvcnksIGBBcHBmaWxlYCBhbmQgYEZhc3RmaWxlYC5cXHJcXG5cXHJcXG5gYGBydWJ5XFxyXFxuIyBmYXN0bGFuZS9BcHBmaWxlXFxyXFxuXFxyXFxuZm9yX3BsYXRmb3JtIDppb3MgZG9cXHJcXG4gIGFwcF9pZGVudGlmaWVyKEVOVlsnSU9TX0JVTkRMRV9JRCddKVxcclxcblxcclxcbiAgYXBwbGVfZGV2X3BvcnRhbF9pZChFTlZbJ0FQUExFX0RFVkVMT1BFUl9FTUFJTCddKVxcclxcbiAgaXR1bmVzX2Nvbm5lY3RfaWQoRU5WWydBUFBMRV9DT05ORUNUX0VNQUlMJ10pXFxyXFxuXFxyXFxuICB0ZWFtX2lkKEVOVlsnQVBQTEVfVEVBTV9JRCddKVxcclxcbiAgaXRjX3RlYW1faWQoRU5WWydBUFBMRV9URUFNX0lEJ10pXFxyXFxuZW5kXFxyXFxuYGBgXFxyXFxuXFxyXFxuYGBgcnVieVxcclxcbiMgZmFzdGxhbmUvRmFzdGZpbGVcXHJcXG5cXHJcXG5wbGF0Zm9ybSA6aW9zIGRvXFxyXFxuXFxyXFxuICBkZXNjIFxcXCJEZWxpdmVyIGEgbmV3IFJlbGVhc2UgYnVpbGQgdG8gdGhlIEFwcCBTdG9yZVxcXCJcXHJcXG4gIGxhbmUgOnJlbGVhc2UgZG9cXHJcXG4gICAgYnVpbGRcXHJcXG4gICAgdXBsb2FkX3RvX2FwcF9zdG9yZVxcclxcbiAgZW5kXFxyXFxuXFxyXFxuICBkZXNjIFxcXCJEZWxpdmVyIGEgbmV3IEJldGEgYnVpbGQgdG8gQXBwbGUgVGVzdEZsaWdodFxcXCJcXHJcXG4gIGxhbmUgOmJldGEgZG9cXHJcXG4gICAgIyBNaXNzaW5nIEV4cG9ydCBDb21wbGlhbmNlIGNhbiBhbHNvIGJlIHNldCB0aHJvdWdoIERlbGl2ZXJmaWxlXFxyXFxuICAgIHVwZGF0ZV9pbmZvX3BsaXN0KFxcclxcbiAgICAgIHhjb2RlcHJvajogXFxcIiN7RU5WWydJT1NfQlVJTERfUEFUSCddfS9pT1MvVW5pdHktaVBob25lLnhjb2RlcHJvalxcXCIsXFxyXFxuICAgICAgcGxpc3RfcGF0aDogJ0luZm8ucGxpc3QnLFxcclxcbiAgICAgIGJsb2NrOiBwcm9jIGRvIHxwbGlzdHxcXHJcXG4gICAgICAgIHBsaXN0WydJVFNBcHBVc2VzTm9uRXhlbXB0RW5jcnlwdGlvbiddID0gZmFsc2VcXHJcXG4gICAgICBlbmRcXHJcXG4gICAgKVxcclxcbiAgICBidWlsZFxcclxcbiAgICB1cGxvYWRfdG9fdGVzdGZsaWdodChza2lwX3dhaXRpbmdfZm9yX2J1aWxkX3Byb2Nlc3Npbmc6IHRydWUpXFxyXFxuICBlbmRcXHJcXG5cXHJcXG4gIGRlc2MgXFxcIkNyZWF0ZSAuaXBhXFxcIlxcclxcbiAgbGFuZSA6YnVpbGQgZG9cXHJcXG4gICAgc2V0dXBfY2lcXHJcXG4gICAgYXBwX3N0b3JlX2Nvbm5lY3RfYXBpX2tleShcXHJcXG4gICAgICBrZXlfaWQ6IEVOVlsnQVBQU1RPUkVfS0VZX0lEJ10sXFxyXFxuICAgICAgaXNzdWVyX2lkOiBFTlZbJ0FQUFNUT1JFX0lTU1VFUl9JRCddLFxcclxcbiAgICAgIGtleV9jb250ZW50OiBFTlZbXFxcIkFQUFNUT1JFX1A4XFxcIl1cXHJcXG4gICAgKVxcclxcblxcclxcbiAgICBtYXRjaChcXHJcXG4gICAgICB0eXBlOiAnYXBwc3RvcmUnLFxcclxcbiAgICAgIHN0b3JhZ2VfbW9kZTogJ2dpdCcsXFxyXFxuICAgICAgZ2l0X3VybDogRU5WWydNQVRDSF9VUkwnXSxcXHJcXG4gICAgICBnaXRfYmFzaWNfYXV0aG9yaXphdGlvbjogQmFzZTY0LnN0cmljdF9lbmNvZGU2NChcXFwiI3tFTlZbJ0FQUExFX0NPTk5FQ1RfRU1BSUwnXX06I3tFTlZbJ01BVENIX1BFUlNPTkFMX0FDQ0VTU19UT0tFTiddfVxcXCIpLFxcclxcbiAgICAgIGFwcF9pZGVudGlmaWVyOiBFTlZbJ0lPU19CVU5ETEVfSUQnXVxcclxcbiAgICApXFxyXFxuXFxyXFxuICAgICMgVW5pdHkgaGFzIHNwZWNpZmljIHJlcXVpcmVtZW50cyBhcm91bmQgY29kZXNpZ25pbmcgdGhhdCB3ZSBoYXZlIHRvIGhhbmRsZVxcclxcbiAgICAjIFNlZSBodHRwczovL2dpdGh1Yi5jb20vZmFzdGxhbmUvZmFzdGxhbmUvZGlzY3Vzc2lvbnMvMTc0NTggZm9yIGNvbnRleHRcXHJcXG4gICAgdXBkYXRlX2NvZGVfc2lnbmluZ19zZXR0aW5ncyhcXHJcXG4gICAgICB1c2VfYXV0b21hdGljX3NpZ25pbmc6IHRydWUsXFxyXFxuICAgICAgcGF0aDogXFxcIiN7RU5WWydJT1NfQlVJTERfUEFUSCddfS9pT1MvVW5pdHktaVBob25lLnhjb2RlcHJvalxcXCJcXHJcXG4gICAgKVxcclxcblxcclxcbiAgICB1cGRhdGVfY29kZV9zaWduaW5nX3NldHRpbmdzKFxcclxcbiAgICAgIHVzZV9hdXRvbWF0aWNfc2lnbmluZzogZmFsc2UsXFxyXFxuICAgICAgdGVhbV9pZDogRU5WW1xcXCJzaWdoXyN7RU5WWydJT1NfQlVORExFX0lEJ119X2FwcHN0b3JlX3RlYW0taWRcXFwiXSxcXHJcXG4gICAgICBjb2RlX3NpZ25faWRlbnRpdHk6ICdpUGhvbmUgRGlzdHJpYnV0aW9uJyxcXHJcXG4gICAgICB0YXJnZXRzOiAnVW5pdHktaVBob25lJyxcXHJcXG4gICAgICBwYXRoOiBcXFwiI3tFTlZbJ0lPU19CVUlMRF9QQVRIJ119L2lPUy9Vbml0eS1pUGhvbmUueGNvZGVwcm9qXFxcIixcXHJcXG4gICAgICBwcm9maWxlX25hbWU6IEVOVltcXFwic2lnaF8je0VOVlsnSU9TX0JVTkRMRV9JRCddfV9hcHBzdG9yZV9wcm9maWxlLW5hbWVcXFwiXSxcXHJcXG4gICAgICBwcm9maWxlX3V1aWQ6IEVOVltcXFwic2lnaF8je0VOVlsnSU9TX0JVTkRMRV9JRCddfV9hcHBzdG9yZVxcXCJdXFxyXFxuICAgIClcXHJcXG5cXHJcXG4gICAgYnVpbGRfYXBwKCAjYWxpYXM6IGd5bVxcclxcbiAgICAgIHByb2plY3Q6IFxcXCIje0VOVlsnSU9TX0JVSUxEX1BBVEgnXX0vaU9TL1VuaXR5LWlQaG9uZS54Y29kZXByb2pcXFwiLFxcclxcbiAgICAgIHNjaGVtZTogJ1VuaXR5LWlQaG9uZScsXFxyXFxuICAgICAgeGNhcmdzOiAnLWFsbG93UHJvdmlzaW9uaW5nVXBkYXRlcydcXHJcXG4gICAgKVxcclxcbiAgZW5kXFxyXFxuXFxyXFxuZW5kXFxyXFxuYGBgXFxyXFxuXFxyXFxuPiAtLSAqKk5vdGU6KiogSWYgeW91IGFkZCBsaWJyYXJpZXMgdGhhdCBuZWVkIGBQb2RmaWxlYCAoZS5nLiBGaXJlYmFzZSkgdG8geW91ciBwcm9qZWN0LFxcclxcbj4gYWRkIHRoaXMgbGluZSB0byB0aGUgYmVnaW5uaW5nIG9mIHlvdXIgYnVpbGQgc3RlcCAodGhlIGJsb2NrIG9mIGNvZGUgc3RhcnRpbmcgd2l0aCBgbGFuZSA6YnVpbGQgZG9gKTpcXHJcXG5cXHJcXG5gYGBydWJ5XFxyXFxuICAgIGNvY29hcG9kcyhcXHJcXG4gICAgICBjbGVhbl9pbnN0YWxsOiB0cnVlLFxcclxcbiAgICAgIHBvZGZpbGU6IFxcXCIje0VOVlsnSU9TX0JVSUxEX1BBVEgnXX0vaU9TL1xcXCJcXHJcXG4gICAgKVxcclxcbmBgYFxcclxcblxcclxcblRoaXMgd2lsbCBpbnN0YWxsIHBvZHMgYW5kIGdlbmVyYXRlIHRoZSBgeGN3b3Jrc3BhY2VgIGZvciB5b3UuXFxyXFxuXFxyXFxuVGhlbiBjaGFuZ2UgdGhlIFtgYnVpbGRfYXBwYF0oaHR0cDovL2RvY3MuZmFzdGxhbmUudG9vbHMvYWN0aW9ucy9idWlsZF9hcHAvI2J1aWxkX2FwcCkgKGFsaWFzOiBbYGd5bWBdKGh0dHBzOi8vZG9jcy5mYXN0bGFuZS50b29scy9hY3Rpb25zL2d5bS8pKSBzdGVwIGF0IHRoZSBlbmQgb2YgdGhpcyBidWlsZCBwaGFzZSB0byB1c2UgdGhlIG5ldyBgeGN3b3Jrc3BhY2VgIGluc3RlYWQgb2YgdGhlIG9sZCBgeGNvZGVwcm9qYDpcXHJcXG5cXHJcXG5gYGBydWJ5XFxyXFxuICAgIGJ1aWxkX2FwcCggI2FsaWFzOiBneW1cXHJcXG4gICAgICB3b3Jrc3BhY2U6IFxcXCIje0VOVlsnSU9TX0JVSUxEX1BBVEgnXX0vaU9TL1VuaXR5LWlQaG9uZS54Y3dvcmtzcGFjZVxcXCIsXFxyXFxuICAgICAgc2NoZW1lOiAnVW5pdHktaVBob25lJyxcXHJcXG4gICAgICB4Y2FyZ3M6ICctYWxsb3dQcm92aXNpb25pbmdVcGRhdGVzJ1xcclxcbiAgICApXFxyXFxuYGBgXFxyXFxuXFxyXFxuIyMjIDQtIEFkZCBqb2JzIHRvIHlvdXIgR2l0SHViIEFjdGlvbnMgd29ya2Zsb3dcXHJcXG5cXHJcXG5CdWlsZGluZyBmb3IgaU9TIGlzIGEgdHdvLXN0ZXAgYnVpbGQgcHJvY2Vzcy4gV2hlbiBVbml0eSBidWlsZHMgeW91ciBwcm9qZWN0IGZvciBpT1MsIGl0IGdlbmVyYXRlcyBhbiBYY29kZSBwcm9qZWN0LCB3aGljaCB0aGVuIG11c3QgYmUgYnVpbHQgYW5kIGNvZGUtc2lnbmVkIGluIFhjb2RlIHZpYSBGYXN0bGFuZS5cXHJcXG5cXHJcXG5Cb3RoIHdvcmtmbG93cyBkZXNjcmliZWQgYmVsb3cgYnVpbGQgeW91ciBhcHAgYW5kIHN1Ym1pdCBpdCB0byBBcHBsZSBmb3IgQXBwIFN0b3JlIHJlbGVhc2UuIElmIHlvdSB3YW50IHRvIHN1Ym1pdCB5b3VyIGFwcCBmb3IgVGVzdEZsaWdodCBkaXN0cmlidXRpb24sIHlvdSBjYW4gY3JlYXRlIGEgam9iIHRoYXQgaXMgaWRlbnRpY2FsIGV4Y2VwdCBpdCBydW5zIGBidW5kbGUgZXhlYyBmYXN0bGFuZSBiZXRhYCBpbnN0ZWFkIG9mIGBidW5kbGUgZXhlYyBmYXN0bGFuZSByZWxlYXNlYCBkdXJpbmcgdGhlIFxcXCJGaXggRmlsZSBQZXJtaXNzaW9ucyBhbmQgUnVuIEZhc3RsYW5lXFxcIiBzdGVwLiBZb3UgY2FuIGJ1aWxkIHlvdXIgaU9TIGFwcCB3aXRob3V0IHVwbG9hZGluZyBpdCAoZS5nLiB0byBjb25maXJtIGl0IGJ1aWxkcyBzdWNjZXNzZnVsbHksIG9yIGFzIGEgcHJlcGFyYXRpb24gc3RlcCBiZWZvcmUgdXBsb2FkaW5nIHRvIGFuIGFsdGVybmF0aXZlIGRpc3RyaWJ1dGlvbiBzZXJ2aWNlKSBieSBpbnN0ZWFkIHJ1bm5pbmcgYGJ1bmRsZSBleGVjIGZhc3RsYW5lIGJ1aWxkYC5cXHJcXG5cXHJcXG5QbGVhc2Ugbm90ZSB0aGF0IEFwcGxlIHdpbGwgYWdncmVzc2l2ZWx5IHJhdGUtbGltaXQgeW91IGlmIHlvdSB0cnkgdG8gdXBsb2FkIGJ1aWxkcyB0b28gZnJlcXVlbnRseS4gV2UgcmVjb21tZW5kIHlvdSBjb25maWd1cmUgYW55IHdvcmtmbG93IHRoYXQgc3VibWl0cyB0byB0aGUgQXBwIFN0b3JlIG9yIFRlc3RGbGlnaHQgdG8gYmUgbWFudWFsbHkgdHJpZ2dlcmVkLCBvciBvdGhlcndpc2UgbWFrZSBzdXJlIGl0IHdvbid0IGF1dG9tYXRpY2FsbHkgcnVuIG1vcmUgdGhhbiBhIGZldyB0aW1lcyBhIGRheS5cXHJcXG5cXHJcXG5UaGVyZSBhcmUgdHdvIG9wdGlvbnMgZm9yIGhvdyB0byBzZXQgdXAgdGhlIHR3by1waGFzZSBidWlsZCwgZGVwZW5kaW5nIG9uIHdoZXRoZXIgb3Igbm90IHlvdXIgcHJvamVjdCB1c2VzIElMMkNQUCBhcyBpdHMgc2NyaXB0aW5nIGJhY2tlbmQuIElmIHlvdXIgcHJvamVjdCBkb2VzICoqbm90KiogcmVseSBvbiBJTDJDUFAsIHlvdSBjYW4gYnVpbGQgeW91ciBVbml0eSBwcm9qZWN0IG9uIExpbnV4IGJlZm9yZSBzd2l0Y2hpbmcgb3ZlciB0byBhIE1hYyBydW5uZXIgdG8gYnVpbGQgdGhlIGdlbmVyYXRlZCBYY29kZSBwcm9qZWN0LiBCZWNhdXNlIExpbnV4IGV4ZWN1dGlvbiB0aW1lIGlzIGNoZWFwZXIgdGhhbiBNYWMgZXhlY3V0aW9uIHRpbWUgd2hlbiB1c2luZyBHaXRIdWIgQWN0aW9ucyBob3N0ZWQgcnVubmVycywgdGhpcyB3aWxsIGJlIGNoZWFwZXIsIGFuZCBpcyB3aGF0IHlvdSBzaG91bGQgbW9zdCBsaWtlbHkgZG8gaWYgeW91IGRvIG5vdCByZXF1aXJlIElMMkNQUCBzdXBwb3J0LlxcclxcblxcclxcbmBgYHlhbWxcXHJcXG4jIC5naXRodWIvd29ya2Zsb3dzL21haW4ueW1sXFxyXFxuam9iczpcXHJcXG4gIGJ1aWxkRm9yaU9TUGxhdGZvcm06XFxyXFxuICAgIG5hbWU6IEJ1aWxkIGZvciBpT1NcXHJcXG4gICAgcnVucy1vbjogdWJ1bnR1LWxhdGVzdFxcclxcbiAgICBzdGVwczpcXHJcXG4gICAgICAtIHVzZXM6IGFjdGlvbnMvY2hlY2tvdXRAdjJcXHJcXG5cXHJcXG4gICAgICAtIHVzZXM6IGFjdGlvbnMvY2FjaGVAdjJcXHJcXG4gICAgICAgIHdpdGg6XFxyXFxuICAgICAgICAgIHBhdGg6IExpYnJhcnlcXHJcXG4gICAgICAgICAga2V5OiBMaWJyYXJ5LWlPU1xcclxcblxcclxcbiAgICAgIC0gdXNlczogZ2FtZS1jaS91bml0eS1idWlsZGVyQHYyXFxyXFxuICAgICAgICB3aXRoOlxcclxcbiAgICAgICAgICB0YXJnZXRQbGF0Zm9ybTogaU9TXFxyXFxuXFxyXFxuICAgICAgLSB1c2VzOiBhY3Rpb25zL3VwbG9hZC1hcnRpZmFjdEB2MlxcclxcbiAgICAgICAgd2l0aDpcXHJcXG4gICAgICAgICAgbmFtZTogYnVpbGQtaU9TXFxyXFxuICAgICAgICAgIHBhdGg6IGJ1aWxkL2lPU1xcclxcblxcclxcbiAgcmVsZWFzZVRvQXBwU3RvcmU6XFxyXFxuICAgIG5hbWU6IFJlbGVhc2UgdG8gdGhlIEFwcCBTdG9yZVxcclxcbiAgICBydW5zLW9uOiBtYWNvcy1sYXRlc3RcXHJcXG4gICAgbmVlZHM6IGJ1aWxkRm9yaU9TUGxhdGZvcm1cXHJcXG4gICAgc3RlcHM6XFxyXFxuICAgICAgLSBuYW1lOiBDaGVja291dCBSZXBvc2l0b3J5XFxyXFxuICAgICAgICB1c2VzOiBhY3Rpb25zL2NoZWNrb3V0QHYyXFxyXFxuXFxyXFxuICAgICAgLSBuYW1lOiBEb3dubG9hZCBpT1MgQXJ0aWZhY3RcXHJcXG4gICAgICAgIHVzZXM6IGFjdGlvbnMvZG93bmxvYWQtYXJ0aWZhY3RAdjJcXHJcXG4gICAgICAgIHdpdGg6XFxyXFxuICAgICAgICAgIG5hbWU6IGJ1aWxkLWlPU1xcclxcbiAgICAgICAgICBwYXRoOiBidWlsZC9pT1NcXHJcXG5cXHJcXG4gICAgICAtIG5hbWU6IEZpeCBGaWxlIFBlcm1pc3Npb25zIGFuZCBSdW4gRmFzdGxhbmVcXHJcXG4gICAgICAgIGVudjpcXHJcXG4gICAgICAgICAgQVBQTEVfQ09OTkVDVF9FTUFJTDogJHt7IHNlY3JldHMuQVBQTEVfQ09OTkVDVF9FTUFJTCB9fVxcclxcbiAgICAgICAgICBBUFBMRV9ERVZFTE9QRVJfRU1BSUw6ICR7eyBzZWNyZXRzLkFQUExFX0RFVkVMT1BFUl9FTUFJTCB9fVxcclxcbiAgICAgICAgICBBUFBMRV9URUFNX0lEOiAke3sgc2VjcmV0cy5BUFBMRV9URUFNX0lEIH19XFxyXFxuXFxyXFxuICAgICAgICAgIE1BVENIX1VSTDogJHt7IHNlY3JldHMuTUFUQ0hfVVJMIH19XFxyXFxuICAgICAgICAgIE1BVENIX1BFUlNPTkFMX0FDQ0VTU19UT0tFTjogJHt7IHNlY3JldHMuTUFUQ0hfUEVSU09OQUxfQUNDRVNTX1RPS0VOIH19XFxyXFxuICAgICAgICAgIE1BVENIX1BBU1NXT1JEOiAke3sgc2VjcmV0cy5NQVRDSF9QQVNTV09SRCB9fVxcclxcblxcclxcbiAgICAgICAgICBBUFBTVE9SRV9LRVlfSUQ6ICR7eyBzZWNyZXRzLkFQUFNUT1JFX0tFWV9JRCB9fVxcclxcbiAgICAgICAgICBBUFBTVE9SRV9JU1NVRVJfSUQ6ICR7eyBzZWNyZXRzLkFQUFNUT1JFX0lTU1VFUl9JRCB9fVxcclxcbiAgICAgICAgICBBUFBTVE9SRV9QODogJHt7IHNlY3JldHMuQVBQU1RPUkVfUDggfX1cXHJcXG5cXHJcXG4gICAgICAgICAgSU9TX0JVSUxEX1BBVEg6ICR7eyBmb3JtYXQoJ3swfS9idWlsZC9pT1MnLCBnaXRodWIud29ya3NwYWNlKSB9fVxcclxcbiAgICAgICAgICBJT1NfQlVORExFX0lEOiBjb20uY29tcGFueS5hcHBsaWNhdGlvbiAjIENoYW5nZSBpdCB0byBtYXRjaCB5b3VyIFVuaXR5IGJ1bmRsZSBpZFxcclxcbiAgICAgICAgICBQUk9KRUNUX05BTUU6IFlvdXIgUHJvamVjdCBOYW1lICMgQ2hhbmdlIGl0IHRvIG1hdGNoIHlvdXIgcHJvamVjdCdzIG5hbWVcXHJcXG4gICAgICAgIHJ1bjogfFxcclxcbiAgICAgICAgICBmaW5kICRJT1NfQlVJTERfUEFUSCAtdHlwZSBmIC1uYW1lIFxcXCIqKi5zaFxcXCIgLWV4ZWMgY2htb2QgK3gge30gXFxcXDtcXHJcXG4gICAgICAgICAgYnVuZGxlIGluc3RhbGxcXHJcXG4gICAgICAgICAgYnVuZGxlIGV4ZWMgZmFzdGxhbmUgaW9zIHJlbGVhc2VcXHJcXG5cXHJcXG4gICAgICAtIG5hbWU6IENsZWFudXAgdG8gYXZvaWQgc3RvcmFnZSBsaW1pdFxcclxcbiAgICAgICAgaWY6IGFsd2F5cygpXFxyXFxuICAgICAgICB1c2VzOiBnZWVreWVnZ28vZGVsZXRlLWFydGlmYWN0QHYxXFxyXFxuICAgICAgICB3aXRoOlxcclxcbiAgICAgICAgICBuYW1lOiBidWlsZC1pT1NcXHJcXG5gYGBcXHJcXG5cXHJcXG5JZiB5b3VyIHByb2plY3QgZG9lcyByZXF1aXJlIElMMkNQUCwgeW91IHdpbGwgbmVlZCB0byBydW4geW91ciBVbml0eSBidWlsZCBvbiBhIE1hYyBydW5uZXIuIFRoaXMgYWxsb3dzIHlvdXIgd29ya2Zsb3cgdG8gYmUgc2xpZ2h0bHkgc2ltcGxlciwgYXMgeW91IGNhbiBydW4gYm90aCBidWlsZHMgb24gdGhlIHNhbWUgcnVubmVyLCBidXQgaXQgbWF5IGJlIG1vcmUgZXhwZW5zaXZlLlxcclxcblxcclxcbmBgYHlhbWxcXHJcXG4jIC5naXRodWIvd29ya2Zsb3dzL21haW4ueW1sXFxyXFxuam9iczpcXHJcXG4gIGJ1aWxkRm9yaU9TQW5kUmVsZWFzZVRvQXBwU3RvcmU6XFxyXFxuICAgIG5hbWU6IEJ1aWxkIGZvciBpT1MgYW5kIFJlbGVhc2UgdG8gdGhlIEFwcCBTdG9yZVxcclxcbiAgICBydW5zLW9uOiBtYWNvcy1sYXRlc3RcXHJcXG4gICAgc3RlcHM6XFxyXFxuICAgICAgLSB1c2VzOiBhY3Rpb25zL2NoZWNrb3V0QHYyXFxyXFxuXFxyXFxuICAgICAgLSB1c2VzOiBhY3Rpb25zL2NhY2hlQHYyXFxyXFxuICAgICAgICB3aXRoOlxcclxcbiAgICAgICAgICBwYXRoOiBMaWJyYXJ5XFxyXFxuICAgICAgICAgIGtleTogTGlicmFyeS1pT1NcXHJcXG5cXHJcXG4gICAgICAtIHVzZXM6IGdhbWUtY2kvdW5pdHktYnVpbGRlckB2MlxcclxcbiAgICAgICAgd2l0aDpcXHJcXG4gICAgICAgICAgdGFyZ2V0UGxhdGZvcm06IGlPU1xcclxcblxcclxcbiAgICAgIC0gbmFtZTogRml4IEZpbGUgUGVybWlzc2lvbnMgYW5kIFJ1biBGYXN0bGFuZVxcclxcbiAgICAgICAgZW52OlxcclxcbiAgICAgICAgICBBUFBMRV9DT05ORUNUX0VNQUlMOiAke3sgc2VjcmV0cy5BUFBMRV9DT05ORUNUX0VNQUlMIH19XFxyXFxuICAgICAgICAgIEFQUExFX0RFVkVMT1BFUl9FTUFJTDogJHt7IHNlY3JldHMuQVBQTEVfREVWRUxPUEVSX0VNQUlMIH19XFxyXFxuICAgICAgICAgIEFQUExFX1RFQU1fSUQ6ICR7eyBzZWNyZXRzLkFQUExFX1RFQU1fSUQgfX1cXHJcXG5cXHJcXG4gICAgICAgICAgTUFUQ0hfVVJMOiAke3sgc2VjcmV0cy5NQVRDSF9VUkwgfX1cXHJcXG4gICAgICAgICAgTUFUQ0hfUEVSU09OQUxfQUNDRVNTX1RPS0VOOiAke3sgc2VjcmV0cy5NQVRDSF9QRVJTT05BTF9BQ0NFU1NfVE9LRU4gfX1cXHJcXG4gICAgICAgICAgTUFUQ0hfUEFTU1dPUkQ6ICR7eyBzZWNyZXRzLk1BVENIX1BBU1NXT1JEIH19XFxyXFxuXFxyXFxuICAgICAgICAgIEFQUFNUT1JFX0tFWV9JRDogJHt7IHNlY3JldHMuQVBQU1RPUkVfS0VZX0lEIH19XFxyXFxuICAgICAgICAgIEFQUFNUT1JFX0lTU1VFUl9JRDogJHt7IHNlY3JldHMuQVBQU1RPUkVfSVNTVUVSX0lEIH19XFxyXFxuICAgICAgICAgIEFQUFNUT1JFX1A4OiAke3sgc2VjcmV0cy5BUFBTVE9SRV9QOCB9fVxcclxcblxcclxcbiAgICAgICAgICBJT1NfQlVJTERfUEFUSDogJHt7IGZvcm1hdCgnezB9L2J1aWxkL2lPUycsIGdpdGh1Yi53b3Jrc3BhY2UpIH19XFxyXFxuICAgICAgICAgIElPU19CVU5ETEVfSUQ6IGNvbS5jb21wYW55LmFwcGxpY2F0aW9uICMgQ2hhbmdlIGl0IHRvIG1hdGNoIHlvdXIgVW5pdHkgYnVuZGxlIGlkXFxyXFxuICAgICAgICAgIFBST0pFQ1RfTkFNRTogWW91ciBQcm9qZWN0IE5hbWUgIyBDaGFuZ2UgaXQgdG8gbWF0Y2ggeW91ciBwcm9qZWN0J3MgbmFtZVxcclxcbiAgICAgICAgcnVuOiB8XFxyXFxuICAgICAgICAgIGZpbmQgJElPU19CVUlMRF9QQVRIIC10eXBlIGYgLW5hbWUgXFxcIioqLnNoXFxcIiAtZXhlYyBjaG1vZCAreCB7fSBcXFxcO1xcclxcbiAgICAgICAgICBidW5kbGUgaW5zdGFsbFxcclxcbiAgICAgICAgICBidW5kbGUgZXhlYyBmYXN0bGFuZSBpb3MgcmVsZWFzZVxcclxcbmBgYFxcclxcblxcclxcbiMjIyA1LSBBZGQgc2VjcmV0cyB0byB5b3VyIEdpdEh1YiByZXBvXFxyXFxuXFxyXFxuT24geW91ciBwcm9qZWN0J3MgR2l0SHViIHJlcG8gcGFnZSwgYWRkIGEgbnVtYmVyIG9mIFJlcG9zaXRvcnkgU2VjcmV0cyBieSBnb2luZyB0byBTZXR0aW5ncyAtPiBTZWNyZXRzIGFuZCBjbGlja2luZyB0aGUgXFxcIk5ldyByZXBvc2l0b3J5IHNlY3JldFxcXCIgYnV0dG9uIGluIHRoZSB0b3AtcmlnaHQuXFxyXFxuXFxyXFxuLSAqKkFQUExFX0NPTk5FQ1RfRU1BSUwqKjogQXBwbGUgQ29ubmVjdCBlbWFpbCAoaWYgdXNpbmcgb3VyIHJlY29tbWVuZGF0aW9uIHRvIGNyZWF0ZSBhIHNpbmdsZSBzaGFyZWQgZGV2ZWxvcGVyIEFwcGxlIElEIGZvciBGYXN0bGFuZSBNYXRjaCwgdGhpcyB3aWxsIGJlIHRoZSBzYW1lIGFzIGBBUFBMRV9ERVZFTE9QRVJfRU1BSUxgKVxcclxcbi0gKipBUFBMRV9ERVZFTE9QRVJfRU1BSUwqKjogWW91ciBBcHBsZSBJRFxcclxcbi0gKipBUFBMRV9URUFNX0lEKio6IFRlYW0gSWQgZnJvbSB5b3VyIFtBcHBsZSBEZXZlbG9wZXIgQWNjb3VudCAtIE1lbWJlcnNoaXAgRGV0YWlsc10oaHR0cHM6Ly9kZXZlbG9wZXIuYXBwbGUuY29tL2FjY291bnQvIy9tZW1iZXJzaGlwLylcXHJcXG4tICoqTUFUQ0hfVVJMKio6IEh0dHBzIHVybCBmb3IgdGhlIHByaXZhdGUgZ2l0IHJlcG8gdG8gd2hpY2ggYGZhc3RsYW5lIG1hdGNoIGFwcHN0b3JlYCB1cGxvYWRlZCBjZXJ0aWZpY2F0ZXMuXFxyXFxuLSAqKk1BVENIX1BFUlNPTkFMX0FDQ0VTU19UT0tFTioqOiBHaXRIdWIgW1BlcnNvbmFsIEFjY2VzcyBUb2tlbl0oaHR0cHM6Ly9kb2NzLmdpdGh1Yi5jb20vZW4vYXV0aGVudGljYXRpb24va2VlcGluZy15b3VyLWFjY291bnQtYW5kLWRhdGEtc2VjdXJlL2NyZWF0aW5nLWEtcGVyc29uYWwtYWNjZXNzLXRva2VuKSB3aXRoIGZ1bGwgcmVwbyBhY2Nlc3MgdG8gTUFUQ0hfVVJMXFxyXFxuLSAqKk1BVENIX1BBU1NXT1JEKio6IFRoZSBwYXNzd29yZCB5b3Ugc2V0IHdoZW4gY29uZmlndXJpbmcgRmFzdGxhbmUgTWF0Y2guXFxyXFxuLSAqKkFQUFNUT1JFX0tFWV9JRCwgQVBQU1RPUkVfSVNTVUVSX0lELCBBUFBTVE9SRV9QOCoqOiBZb3VyIEFwcCBTdG9yZSBDb25uZWN0IEFQSSBrZXlzIGZyb20gdGhlIHByZXZpb3VzIHN0ZXAuIGBBUFBTVE9SRV9LRVlfSURgIGlzIHRoZSBcXFwiS2V5IElEXFxcIiBmcm9tIHRoZSB0YWJsZSByb3csIGBBUFBTVE9SRV9JU1NVRVJfSURgIGlzIHlvdXIgaXNzdWVyIElEIGZyb20gdGhlIHRvcCBvZiB0aGUgcGFnZSwgYW5kIGBBUFBTVE9SRV9QOGAgaXMgdGhlIGVudGlyZSBjb250ZW50cyBvZiB0aGUgYC5wOGAgZmlsZSB5b3UgZG93bmxvYWRlZCwgc3RhcnRpbmcgd2l0aCBgLS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tYCBhbmQgZW5kaW5nIHdpdGggYC0tLS0tRU5EIFBSSVZBVEUgS0VZLS0tLS1gLlxcclxcblxcclxcbiMjIyA2LSBDb25maXJtaW5nIHlvdXIgVW5pdHkgYW5kIEFwcCBTdG9yZSBDb25uZWN0IHNldHRpbmdzXFxyXFxuXFxyXFxuQXQgdGhpcyBwb2ludCwgaWYgeW91IGhhdmUgcHJldmlvdXNseSBzZXQgdXAgeW91ciBhcHAgZm9yIG1hbnVhbCBpT1MgYnVpbGRzIGFuZCBUZXN0RmxpZ2h0L0FwcCBTdG9yZSBkaXN0cmlidXRpb24sIHlvdXIgR2l0SHViIEFjdGlvbnMgd29ya2Zsb3cgd2lsbCBsaWtlbHkgY29tcGxldGUgc3VjY2Vzc2Z1bGx5LiBJZiB0aGF0IGlzIG5vdCB0aGUgY2FzZSwgdGhlcmUgYXJlIGEgZmV3IG1vcmUgc3RlcHMgdG8gZmluaXNoIHNldHVwLlxcclxcblxcclxcbkluIFVuaXR5LCB5b3Ugd2lsbCBuZWVkIHRvIGVuc3VyZSB0aGF0IHlvdXIgW2FwcGxpY2F0aW9uIGljb24ocyldKGh0dHBzOi8vZG9jcy51bml0eTNkLmNvbS9NYW51YWwvY2xhc3MtUGxheWVyU2V0dGluZ3NpT1MuaHRtbCNpY29uKSBhcmUgc2V0LCBhcyBhcHBsaWNhdGlvbnMgd2l0aG91dCB0aGUgY29ycmVjdCBpY29ucyB3aWxsIGdlbmVyYXRlIGFuIGVycm9yIHdoaWxlIHVwbG9hZGluZyB0byBUZXN0RmxpZ2h0LiBBZGRpdGlvbmFsbHksIHNldCB5b3VyIEJ1bmRsZSBJZGVudGlmaWVyIGFuZCBTaWduaW5nIFRlYW0gSUQgaW4gdGhlIFtpT1MgUGxheWVyIHNldHRpbmdzIC0gSWRlbnRpZmljYXRpb24gc2V0dGluZ3NdKGh0dHBzOi8vZG9jcy51bml0eTNkLmNvbS9NYW51YWwvY2xhc3MtUGxheWVyU2V0dGluZ3NpT1MuaHRtbCNJZGVudGlmaWNhdGlvbikuIFRoZSBidW5kbGUgaWRlbnRpZmllciBuZWVkcyB0byBiZSB0aGUgc2FtZSBhcyB5b3UgaGF2ZSBzZXQgZm9yIHRoZSBgSU9TX0JVTkRMRV9JRGAgcmVwb3NpdG9yeSBzZWNyZXQuIElmIHlvdSBkb24ndCBrbm93IHlvdXIgU2lnbmluZyBUZWFtIElELCB5b3UgY2FuIGZpbmQgaXQgYnkgZ29pbmcgdG8gaHR0cHM6Ly9kZXZlbG9wZXIuYXBwbGUuY29tL2FjY291bnQvIyEvbWVtYmVyc2hpcCB3aGlsZSBsb2dnZWQgaW4sIGFuZCBpdCB3aWxsIGJlIHRoZSBcXFwiVGVhbSBJRFxcXCIgbGlzdGVkLlxcclxcblxcclxcbkluIG9yZGVyIHRvIHVwbG9hZCBhIGJ1aWxkIHRvIEFwcGxlLCBhbiBlbnRyeSBmb3IgeW91ciBhcHAgbmVlZHMgdG8gZXhpc3QgaW4geW91ciB0ZWFtJ3MgW0FwcCBTdG9yZSBDb25uZWN0XShodHRwczovL2FwcHN0b3JlY29ubmVjdC5hcHBsZS5jb20vKS4gRnJvbSB0aGUgQXBwIFN0b3JlIENvbm5lY3QgaG9tZXBhZ2UsIHNlbGVjdCBcXFwiTXkgQXBwc1xcXCIsIGFuZCBjcmVhdGUgb3IgY29uZmlybSB0aGUgZXhpc3RlbmNlIG9mIGFuIEFwcCB3aXRoIHRoZSBzYW1lIGJ1bmRsZSBpZGVudGlmaWVyIHlvdSBhcmUgdXNpbmcgaW4geW91ciBVbml0eSBidWlsZCBzZXR0aW5ncyBhbmQgdGhlIGBJT1NfQlVORExFX0lEYCBHaXRIdWIgcmVwb3NpdG9yeSBzZWNyZXQuXFxyXFxuXCI7Il0sInNvdXJjZVJvb3QiOiIifQ==