exports.ids = [20];
exports.modules = {

/***/ "./docs/github/v1/04-builder.md":
/*!**************************************!*\
  !*** ./docs/github/v1/04-builder.md ***!
  \**************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("# Builder\r\n\r\nBuilding the project as part of a workflow may help to create mind-space and focus on the project itself.\r\n\r\nUse [Unity - Builder ](https://github.com/marketplace/actions/unity-builder)\r\nto automatically build Unity projects for different platforms.\r\n\r\n## Basic setup\r\n\r\nBy default, the enabled scenes from the project's settings will be built.\r\n\r\nCreate or edit the file called `.github/workflows/main.yml` and add a job to it.\r\n\r\n#### Personal License\r\n\r\nPersonal licenses require a one-time manual activation step (per unity version).\r\n\r\nMake sure you\r\n[acquire and activate](https://github.com/marketplace/actions/unity-request-activation-file)\r\nyour license file and add it as a secret.\r\n\r\nThen, define the build step as follows:\r\n\r\n```yaml\r\n- uses: webbertakken/unity-builder@1.5\r\n  env:\r\n    UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}\r\n  with:\r\n    projectPath: path/to/your/project\r\n    unityVersion: 2020.X.XXXX\r\n    targetPlatform: WebGL\r\n```\r\n\r\n#### Professional license\r\n\r\nMake sure you have set up these variables in the activation step.\r\n\r\n- `UNITY_EMAIL` (should contain the email address for your Unity account)\r\n- `UNITY_PASSWORD` (the password that you use to login to Unity)\r\n- `UNITY_SERIAL` (the serial provided by Unity)\r\n\r\nDefine the build step as follows:\r\n\r\n```yaml\r\n- uses: webbertakken/unity-builder@1.5\r\n  env:\r\n    UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}\r\n    UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}\r\n    UNITY_SERIAL: ${{ secrets.UNITY_SERIAL }}\r\n  with:\r\n    projectPath: path/to/your/project\r\n    unityVersion: 2020.X.XXXX\r\n    targetPlatform: WebGL\r\n```\r\n\r\nThat is all you need to build your project.\r\n\r\n## Storing the build\r\n\r\nTo be able to access your built files,\r\nthey need to be uploaded as artifacts.\r\nTo do this it is recommended to use Github Actions official\r\n[upload artifact action](https://github.com/marketplace/actions/upload-artifact)\r\nafter any build action.\r\n\r\nBy default, Builder outputs it's builds to a folder named `build`.\r\n\r\nExample:\r\n\r\n```yaml\r\n- uses: actions/upload-artifact@v1\r\n  with:\r\n    name: Build\r\n    path: build\r\n```\r\n\r\nBuilds can now be downloaded as Artifacts in the Actions tab.\r\n\r\n## Caching\r\n\r\nIn order to make builds run faster, you can cache Library files from previous\r\nbuilds. To do so simply add Github Actions official\r\n[cache action](https://github.com/marketplace/actions/cache) before any unity steps.\r\n\r\nExample:\r\n\r\n```yaml\r\n- uses: actions/cache@v1.1.0\r\n  with:\r\n    path: path/to/your/project/Library\r\n    key: Library-MyProjectName-TargetPlatform\r\n    restore-keys: |\r\n      Library-MyProjectName-\r\n      Library-\r\n```\r\n\r\nThis simple addition could speed up your build by more than 50%.\r\n\r\n## Configuration options\r\n\r\nBelow options can be specified under `with:` for the `unity-builder` action.\r\n\r\n#### projectPath\r\n\r\nSpecify the path to your Unity project to be built.\r\nThe path should be relative to the root of your project.\r\n\r\n_**required:** `false`_\r\n_**default:** `<your project root>`_\r\n\r\n#### unityVersion\r\n\r\nVersion of Unity to use for building the project.\r\nUse \"auto\" to get from your ProjectSettings/ProjectVersion.txt\r\n\r\n_**required:** `false`_\r\n_**default:** `auto`_\r\n\r\n#### targetPlatform\r\n\r\nPlatform that the build should target.\r\n\r\nMust be one of the [allowed values](https://docs.unity3d.com/ScriptReference/BuildTarget.html) listed in the Unity scripting manual.\r\n\r\n_**required:** `true`_\r\n\r\n#### buildName\r\n\r\nName of the build. Also the folder in which the build will be stored within `buildsPath`.\r\n\r\n_**required:** `false`_\r\n_**default:** `<build_target>`_\r\n\r\n#### buildsPath\r\n\r\nPath where the builds should be stored.\r\n\r\nIn this folder a folder will be created for every targetPlatform.\r\n\r\n_**required:** `false`_\r\n_**default:** `build`_\r\n\r\n#### buildMethod\r\n\r\nCustom command to run your build.\r\n\r\nThere are two conditions for a custom buildCommand:\r\n\r\n- Must reference a valid path to a `static` method.\r\n- The class must reside in the `Assets/Editor` directory.\r\n\r\n_**example:**_\r\n\r\n```yaml\r\n- uses: webbertakken/unity-builder@1.5\r\n  with:\r\n    buildMethod: EditorNamespace.BuilderClassName.StaticBulidMethod\r\n```\r\n\r\n_**required:** `false`_\r\n_**default:** Built-in script that will run a build out of the box._\r\n\r\n#### versioning\r\n\r\nConfigure a specific versioning strategy\r\n\r\n```yaml\r\n- uses: webbertakken/unity-builder@1.5\r\n  with:\r\n    versioning: Semantic\r\n```\r\n\r\nFind the available strategies below:\r\n\r\n##### Semantic\r\n\r\nVersioning out of the box! **(recommended)**\r\n\r\n> Compatible with **all platforms**.  \r\n> Does **not** modify your repository.  \r\n> Requires **zero configuration**.\r\n\r\nHow it works:\r\n\r\n> Generates a version based on [semantic versioning](https://semver.org/).  \r\n> Follows `<major>.<minor>.<patch>` for example `0.17.2`.  \r\n> The latest tag dictates `<major>.<minor>` (defaults to 0.0 for no tag).  \r\n> The number of commits (since the last tag, if any) is used for `<patch>`.\r\n\r\nNo configuration required.\r\n\r\n##### Custom\r\n\r\nAllows specifying a custom version in the `version` field. **(advanced users)**\r\n\r\n> This strategy is useful when your project or pipeline has some kind of orchestration\r\n> that determines the versions.\r\n\r\n##### None\r\n\r\nNo version will be set by Builder. **(not recommended)**\r\n\r\n> Not recommended unless you generate a new version in a pre-commit hook. Manually\r\n> setting versions is error-prone.\r\n\r\n#### androidVersionCode\r\n\r\nConfigure the android `versionCode`.\r\n\r\nWhen not specified, the version code is generated from the version using the `major * 1000000 + minor * 1000 + patch` scheme;\r\n\r\n#### androidAppBundle\r\n\r\nSet this flag to `true` to build '.aab' instead of '.apk'.\r\n\r\n```yaml\r\n- uses: webbertakken/unity-builder@1.5\r\n  with:\r\n    androidAppBundle: true\r\n    androidKeystoreName: user.keystore\r\n    androidKeystoreBase64: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}\r\n    androidKeystorePass: ${{ secrets.ANDROID_KEYSTORE_PASS }}\r\n    androidKeyaliasName: ${{ secrets.ANDROID_KEYALIAS_NAME }}\r\n    androidKeyaliasPass: ${{ secrets.ANDROID_KEYALIAS_PASS }}\r\n```\r\n\r\nYou should also set all the Android Keystore options (see below).\r\n\r\n_**required:** `false`_\r\n_**default:** `false`_\r\n\r\n#### androidKeystoreName\r\n\r\nConfigure the android `keystoreName`. Must be provided if configuring the below keystore options.\r\n\r\nFor this to take effect, you must enable `Custom Keystore` in your\r\n[Android Player settings](https://docs.unity3d.com/Manual/class-PlayerSettingsAndroid.html).\r\nThe default build script overrides the other keystore settings with these keystore options.\r\n\r\n_**required:** `false`_\r\n_**default:** `\"\"`_\r\n\r\n#### androidKeystoreBase64\r\n\r\nConfigure the base64 contents of the android keystore file. You should get this with `base64 $androidKeystoreName`\r\n\r\nThe contents will be decoded from base64 using `echo $androidKeystoreBase64 | base64 --decode > $projectPath/$androidKeystoreName`\r\n\r\nIt is recommended to use [GitHub Secrets](https://docs.github.com/en/actions/reference/encrypted-secrets).\r\n\r\n_**required:** `false`_\r\n_**default:** `\"\"`_\r\n\r\n#### androidKeystorePass\r\n\r\nConfigure the android `keystorePass`. Recommended to use GitHub Secrets.\r\n\r\n_**required:** `false`_\r\n_**default:** `\"\"`_\r\n\r\n#### androidKeyaliasName\r\n\r\nConfigure the android `keyaliasName`. Recommended to use GitHub Secrets.\r\n\r\n_**required:** `false`_\r\n_**default:** `\"\"`_\r\n\r\n#### androidKeyaliasPass\r\n\r\nConfigure the android `keyaliasPass`. Recommended to use GitHub Secrets.\r\n\r\n_**required:** `false`_\r\n_**default:** `\"\"`_\r\n\r\n#### allowDirtyBuild\r\n\r\nAllows the branch of the build to be dirty, and still generate the build.\r\n\r\n```yaml\r\n- uses: webbertakken/unity-builder@1.5\r\n  with:\r\n    allowDirtyBuild: true\r\n```\r\n\r\nNote that it is generally bad practice to modify your branch\r\nin a CI Pipeline. However there are exceptions where this might\r\nbe needed. (use with care).\r\n\r\n_**required:** `false`_\r\n_**default:** `false`_\r\n\r\n#### customParameters\r\n\r\nCustom parameters to configure the build.\r\n\r\nParameters must start with a hyphen (`-`) and may be followed by a value (without hyphen).\r\n\r\nParameters without a value will be considered booleans (with a value of true).\r\n\r\n```yaml\r\n- uses: webbertakken/unity-builder@1.5\r\n  with:\r\n    customParameters: -profile SomeProfile -someBoolean -someValue exampleValue\r\n```\r\n\r\n_**required:** `false`_\r\n_**default:** `\"\"`_\r\n\r\n#### customImage\r\n\r\nSpecific docker image that should be used for building the project.\r\n\r\n```yaml\r\n- uses: webbertakken/unity-builder@1.5\r\n  with:\r\n    customImage: 'unityci/editor:2020.1.14f1-base-0'\r\n```\r\n\r\n_**required:** `false`_\r\n_**default:** `\"\"`_\r\n\r\n## Outputs\r\n\r\nBelow are outputs that can be accessed by using `${{ steps.myBuildStep.outputs.outputName }}`, where `myBuildStep` is the id\r\nof the Builder step, and `outputName` is the name of the output.\r\n\r\n#### buildVersion\r\n\r\nReturns the version that was generated by Builder, following the strategy configured for `versioning`.\r\n\r\n```yaml\r\n- uses: webbertakken/unity-builder@1.5\r\n  id: myBuildStep\r\n- run: echo 'Project Version: ${{ steps.myBuildStep.outputs.buildVersion }}'\r\n```\r\n\r\n## Complete example\r\n\r\nA complete workflow that builds every available platform could look like this:\r\n\r\n```yaml\r\nname: Build project\r\n\r\non:\r\n  pull_request: {}\r\n  push: { branches: [main] }\r\n\r\nenv:\r\n  UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}\r\n\r\njobs:\r\n  buildForSomePlatforms:\r\n    name: Build for ${{ matrix.targetPlatform }} on version ${{ matrix.unityVersion }}\r\n    runs-on: ubuntu-latest\r\n    strategy:\r\n      fail-fast: false\r\n      matrix:\r\n        projectPath:\r\n          - path/to/your/project\r\n        unityVersion:\r\n          - 2019.2.11f1\r\n          - 2019.3.0f1\r\n        targetPlatform:\r\n          - StandaloneOSX # Build a macOS standalone (Intel 64-bit).\r\n          - StandaloneWindows # Build a Windows standalone.\r\n          - StandaloneWindows64 # Build a Windows 64-bit standalone.\r\n          - StandaloneLinux64 # Build a Linux 64-bit standalone.\r\n          - iOS # Build an iOS player.\r\n          - Android # Build an Android .apk standalone app.\r\n          - WebGL # WebGL.\r\n          - WSAPlayer # Build an Windows Store Apps player.\r\n          - PS4 # Build a PS4 Standalone.\r\n          - XboxOne # Build a Xbox One Standalone.\r\n          - tvOS # Build to Apple's tvOS platform.\r\n          - Switch # Build a Nintendo Switch player.\r\n    steps:\r\n      - uses: actions/checkout@v2\r\n        with:\r\n          lfs: true\r\n      - uses: actions/cache@v1.1.0\r\n        with:\r\n          path: ${{ matrix.projectPath }}/Library\r\n          key: Library-${{ matrix.projectPath }}-${{ matrix.targetPlatform }}\r\n          restore-keys: |\r\n            Library-${{ matrix.projectPath }}-\r\n            Library-\r\n      - uses: webbertakken/unity-builder@1.5\r\n        with:\r\n          projectPath: ${{ matrix.projectPath }}\r\n          unityVersion: ${{ matrix.unityVersion }}\r\n          targetPlatform: ${{ matrix.targetPlatform }}\r\n      - uses: actions/upload-artifact@v1\r\n        with:\r\n          name: Build\r\n          path: build\r\n```\r\n\r\n> **Note:** _Environment variables are set for all jobs in the workflow like this._\r\n");

/***/ })

};;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,