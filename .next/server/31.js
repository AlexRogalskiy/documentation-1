exports.ids = [31];
exports.modules = {

/***/ "./docs/github/v2/15-deployment/steam.md":
/*!***********************************************!*\
  !*** ./docs/github/v2/15-deployment/steam.md ***!
  \***********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("# Deploy to Steam\r\n\r\nThis page assumes you are registered as a [partner](https://partner.steamgames.com/) with Steam and that you are familiar with [using SteamPipe to upload your builds to Steam](https://partner.steamgames.com/doc/sdk/uploading).\r\n\r\n### 1. Create a Steam Build Account\r\n\r\nCreate a specialised builder account that only has access to `Edit App Metadata` and `Publish App Changes To Steam`.\r\n\r\nSee [the docs](https://partner.steamgames.com/doc/sdk/uploading#Build_Account).\r\n\r\n### 2. Add jobs to main.yml\r\n\r\n```yaml\r\njobs:\r\n  buildForWindowsAndLinux:\r\n    name: Build for ${{ matrix.targetPlatform }}\r\n    runs-on: ubuntu-latest\r\n    strategy:\r\n      fail-fast: false\r\n      matrix:\r\n        targetPlatform:\r\n          - StandaloneWindows64 # Build a Windows 64-bit standalone.\r\n          - StandaloneLinux64 # Build a Linux 64-bit standalone.\r\n    outputs:\r\n      buildVersion: ${{ steps.build.outputs.buildVersion }}\r\n    steps:\r\n      - uses: actions/checkout@v2\r\n        with:\r\n          fetch-depth: 0\r\n          lfs: true\r\n      - uses: actions/cache@v2\r\n        with:\r\n          path: Library\r\n          key: Library-${{ matrix.targetPlatform }}-${{ hashFiles('Assets/**', 'Packages/**', 'ProjectSettings/**') }}\r\n          restore-keys: |\r\n            Library-${{ matrix.targetPlatform }}-\r\n            Library-\r\n      - uses: game-ci/unity-builder@v2\r\n        id: build\r\n        env:\r\n          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}\r\n        with:\r\n          targetPlatform: ${{ matrix.targetPlatform }}\r\n          versioning: Semantic\r\n      - uses: actions/upload-artifact@v2\r\n        with:\r\n          name: Build-${{ matrix.targetPlatform }}\r\n          path: build/${{ matrix.targetPlatform }}\r\n  deployToSteam:\r\n    needs: [ buildForWindowsAndLinux ]\r\n    runs-on: ubuntu-latest\r\n    steps:\r\n      - name: Checkout Repository\r\n        uses: actions/checkout@v2\r\n        with:\r\n          fetch-depth: 0\r\n      - name: Download StandaloneWindows64 Artifact\r\n        uses: actions/download-artifact@v2\r\n        with:\r\n          name: Build-StandaloneWindows64\r\n          path: build/StandaloneWindows64\r\n      - name: Download StandaloneLinux64 Artifact\r\n        uses: actions/download-artifact@v2\r\n        with:\r\n          name: Build-StandaloneLinux64\r\n          path: build/StandaloneLinux64      \r\n      - uses: game-ci/steam-deploy@v1\r\n        with:\r\n          username: ${{ secrets.STEAM_USERNAME }}\r\n          password: ${{ secrets.STEAM_PASSWORD }}\r\n          configVdf: ${{ secrets.STEAM_CONFIG_VDF}}\r\n          ssfnFileName: ${{ secrets.STEAM_SSFN_FILE_NAME }}\r\n          ssfnFileContents: ${{ secrets.STEAM_SSFN_FILE_CONTENTS }}\r\n          appId: ${{ secrets.STEAM_APP_ID }}\r\n          buildDescription: v${{ needs.buildForWindowsAndLinux.outputs.buildVersion }}\r\n          rootPath: build\r\n          depot1Path: StandaloneWindows64\r\n          depot2Path: StandaloneLinux64\r\n          releaseBranch: prerelease\r\n```\r\n\r\n### 3. Add GitHub Secrets\r\n\r\n- **STEAM_USERNAME**: The username of the Steam Build Account that you created in step 1.\r\n- **STEAM_PASSWORD**: The password of the Steam Build Account that you created in step 1.\r\n- **STEAM_CONFIG_VDF**, **STEAM_SSFN_FILE_NAME**, and **STEAM_SSFN_FILE_CONTENTS**: See the step \"Setup Steam Authentication\" below. \r\n- **STEAM_APP_ID**: The identifier of your app on steam. You can find it on your [dashboard](https://partner.steamgames.com/dashboard).\r\n\r\n### 4. Setup Steam Authentication\r\n\r\nDeploying to Steam requires using Multi-Factor Authentication (MFA) through Steam Guard. \r\nThis means that simply using username and password isn't enough to authenticate with Steam. \r\nHowever, it is possible to go through the MFA process only once by setting up GitHub Secrets for configVdf, ssfnFileName, and ssfnFileContents with these steps:\r\n1. Install [Valve's offical steamcmd](https://partner.steamgames.com/doc/sdk/uploading#1) on your local machine. All following steps will also be done on your local machine.\r\n1. Try to login with `steamcmd +login <username> <password> +quit`, which may prompt for the MFA code. If so, type in the MFA code that was emailed to your builder account's email address.\r\n1. Validate that the MFA process is complete by running `steamcmd +login <username> <password> +quit` again. It should not ask for the MFA code again.\r\n1. The folder from which you run `steamcmd` will now contain an updated `config/config.vdf` file. Use `cat config/config.vdf | base64 > config_base64.txt` to encode the file. Copy the contents of `config_base64.txt` to a GitHub Secret `STEAM_CONFIG_VDF`.\r\n1. That folder will also contain two files whose names look like `ssfn<numbers>`, **but one of them is a hidden file**. [Find the hidden one](https://support.microsoft.com/en-us/windows/view-hidden-files-and-folders-in-windows-97fbc472-c603-9d90-91d0-1166d1d9f4b5), then copy the name of that file to a GitHub Secret `STEAM_SSFN_FILE_NAME`.\r\n1. Use `cat <ssfnFileName> | base64 > ssfn_base64.txt` to encode the contents of the hidden ssfn file. Copy the contents of `ssfn_base64.txt` to a GitHub Secret `STEAM_SSFN_FILE_CONTENTS`.\r\n\r\n### 5. Additional Configuration\r\n\r\nYou can configure these to better match your use case.\r\n\r\n#### buildDescription\r\n\r\nThe identifier for this specific build, which helps you identify it in steam. \r\n\r\nIt is recommended to use the semantic version of the build for this.\r\n\r\n#### rootPath\r\n\r\nThe root path to your builds. This is the base of which depots will search your files.\r\n\r\n#### depot[X]Path\r\n\r\nWhere X is any number between 1 and 9 (inclusive both).\r\n\r\nThe relative path following your root path for the files to be included in this depot.\r\n\r\nIf your appId is 125000 then the depots 125001 ... 125009 will be assumed.\r\n\r\n#### firstDepotId\r\n\r\nYou can use this to override the ID of the first depot in case the IDs do not start as described in depot[X]Path (e.g. for DLCs).\r\n\r\nIf your firstDepotId is 125000 then, regardless of the used appId, the depots 125000 ... 125008 will be assumed.\r\n\r\n#### releaseBranch\r\n\r\nThe branch within steam that this build will be automatically put live on.\r\n\r\nNote that the `default` branch [has been observed to not work](https://github.com/game-ci/steam-deploy/issues/19) as a release branch, presumably because it is potentially dangerous.\r\n\r\n");

/***/ })

};;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,