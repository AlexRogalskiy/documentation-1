exports.ids = [41];
exports.modules = {

/***/ "./docs/cloud-runner/v0/06-development.md":
/*!************************************************!*\
  !*** ./docs/cloud-runner/v0/06-development.md ***!
  \************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("# Development Roadmap\n\n## Iteration 0 - Quality Of Life\n\n```md\n| What                                | Status      | Why                                                  |\n| ----------------------------------- | ----------- | ---------------------------------------------------- |\n| preview feedback gathering          | in-progress | Gather feedback on experience using cloud runner.    |\n| preview beginner friendly           | in-progress | Iteration on UX for cloud runner APIs and usability. |\n| better unity test framework support | todo        |                                                      |\n| garbage collection guarentees       | todo        | Support for strong garbage collection guarentees.    |\n| better cli options for inspection   | todo        |                                                      |\n```\n\n## Iteration 1 - Advanced Caching\n\n```md\n| What                               | Status | Why                                                           |\n| ---------------------------------- | ------ | ------------------------------------------------------------- |\n| cache entire working directory     | todo   | Currently only supports caching LFS and Unity Library folder. |\n| skip cache duplicates by hash      | todo   |                                                               |\n| configurable tar compression       | todo   |                                                               |\n| skip to existing working directory | todo   |                                                               |\n| unity incremental build caching    | todo   |                                                               |\n```\n\n## Iteration 2 - GPU Workloads And Capabilities\n\n```md\n| What                                         | Status | Why                                                     |\n| -------------------------------------------- | ------ | ------------------------------------------------------- |\n| Automate rendering with GPU provider support | todo   | Automate screenshots, video and remote control clients. |\n```\n\n## Iteration 3 - Simple Performance Management\n\n```md\n| What                               | Status | Why                                                   |\n| ---------------------------------- | ------ | ----------------------------------------------------- |\n| better performance test support    | todo   |                                                       |\n| performance benchmark / sample     | todo   | Benchmark cloud runner on a variety of project sizes. |\n| simple performance metrics for aws | todo   |                                                       |\n```\n\n## Iteration 4 - Advanced Cloud Runner Workflows For Unity\n\n```md\n| What                              | Status | Why                                                                 |\n| --------------------------------- | ------ | ------------------------------------------------------------------- |\n| editor integration                | todo   | Integration into Unity to run cloud workloads.                      |\n| stream editor changes             | todo   | Game CI will stream any local changes to a build machine.           |\n| send uncommitted git changes      | todo   | Run automated jobs without having to commit, discover errors early. |\n| warm starts and push hooks        | todo   | Do not have to wait for cloud runner to spin up a new machine.      |\n| track target git reference by sha | todo   | Target very specific points in git history.                         |\n```\n\n## Backlog\n\n```md\n| What                                             | Status | Why                                                       |\n| ------------------------------------------------ | ------ | --------------------------------------------------------- |\n| Resilience hooks                                 | todo   | Retry, startup and cleanup hooks.                         |\n| custom logging                                   | todo   | Support extensible logging to your own loggin service.    |\n| custom storage engine                            | todo   | Share Unity import cache between local and runners.       |\n| better artifact handling                         | todo   | Better extensibility and support for artifact handling.   |\n| network game features                            | todo   | Quick deploy simulation server, relay or headless client. |\n| interactive cloud runner                         | todo   |                                                           |\n| scriptable custom provider                       | todo   |                                                           |\n| Cleaned up debug/prod                            | todo   |                                                           |\n| Custom cloud runner docker image                 | todo   |                                                           |\n| Infographics for cloud runner docs               | todo   |                                                           |\n| detect and warn about impending binary conflicts | todo   |                                                           |\n| Test coverage for hooks and steps                | todo   |                                                           |\n| Multiplayer test sample                          | todo   |                                                           |\n| Code report / project report                     | todo   |                                                           |\n| Kuberenetes Rook support                         | todo   |                                                           |\n| Custom provider sample                           | todo   |                                                           |\n```\n\nMinor changes, suggestions and bugs are tracked as GitHub issues:\n[Game CI Issues - GitHub](https://github.com/game-ci/unity-builder/labels/cloud-runner)\n\n# Feedback form\n\n[Feedback Form](https://forms.gle/3Wg1gGf9FnZ72RiJ9)\n\n# Contributions\n\nSource contributors are welcome via PR. You can always discuss a suggestion on discord.\n\nDonations welcome.\n");

/***/ })

};;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,