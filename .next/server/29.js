exports.ids = [29];
exports.modules = {

/***/ "./docs/github/v2/15-deployment/android.md":
/*!*************************************************!*\
  !*** ./docs/github/v2/15-deployment/android.md ***!
  \*************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("# Deploy to Google Play\r\n\r\nThis guide is intended to help with automating Android builds to upload to the Play Store. If you just need to produce an APK, the [unity-builder](https://game.ci/docs/github/builder) action will do that. However, if you intend to distribute your game on the Play Store, either for public distribution or a beta track, this guide is for you.\r\n\r\n### 1- Install Fastlane\r\n\r\n[Fastlane](https://docs.fastlane.tools/getting-started/ios/setup/) is a tool that can facilitate building and submitting your Android apps to Google, and is the easiest way to deploy your Unity project to Android for Play Store distribution.\r\n\r\nTo configure Fastlane for your GitHub Actions workflow runners, you will need to locally set up a `Gemfile` and `Fastfile` within your project. A `Gemfile` specifies what Ruby dependencies are needed to set up and run Fastlane (which is written in Ruby), and a `Fastfile` will be how you configure your Android deployment settings. We will set up the `Gemfile` now, and the `Fastfile` in a later step.\r\n\r\nYou will need your local machine to have [Ruby](https://www.ruby-lang.org/en/documentation/installation/) installed, as well as Bundler. If you have Ruby installed but are unsure if you have Bundler, you can run the following to install it:\r\n\r\n```bash\r\ngem install bundler\r\n```\r\n\r\nFrom there, create a file called `Gemfile` in the root of your git repository with following content:\r\n\r\n```ruby\r\n# Gemfile\r\nsource \"https://rubygems.org\"\r\ngem \"fastlane\"\r\n```\r\n\r\nThen run `bundle install`. This will create an additional `Gemfile.lock` file in the root of your project.\r\n\r\nCommit both `Gemfile` and `Gemfile.lock` to your repo.\r\n\r\n### 2- Create a Google Play Service Account\r\n\r\nTo programmatically access the Google Play Console, you will need a dedicated Google Play service account with API access.\r\n\r\nFollow the [\"Setup\" section of the Fastlane Supply documentation](https://docs.fastlane.tools/actions/supply/) to create a service account.\r\n\r\nAfter the last step, it will tell you to test the connection to the Google Play Store, and then add your JSON file path to your Appfile. You can do the first step if you would like (you may need to run `bundle exec fastlane` instead of just `fastlane`), but don't worry about the Appfile, as we will be be creating that in the next step.\r\n\r\nInstead, create a Repository Secret in your GitHub repository by going to Settings -> Secrets and clicking the \"New repository secret\" button in the top-right. It should be titled `GOOGLE_PLAY_KEY_FILE` and its value should be the plaintext contents of the downloaded JSON file.\r\n\r\n### 3- Generate an upload key and keystore\r\n\r\nDistributing an app via the Google Play store requires uploading an unsigned Android App Bundle (AAB) file and letting Google codesign your app for you using Play App Signing. In order to do this, you need to create an upload signing key, which you will then sign your app with.\r\n\r\nIn Unity, while Android is your selected build platform, open Player Settings. Under \"Publishing Settings\", click the \"Keystore Manager\" button to open the keystore manager. Click the \"Keystore\" dropdown, and then \"Create New\" > \"Anywhere\" to create a new keystore file. You can select any file location, just note where it is.\r\n\r\nFill out all the fields in this form. Both of the password and password confirmation fields (so, four password fields total) should contain the same password. Click \"Add key\" when you're done. In Player Settings, confirm that the \"Custom Keystore\" checkbox is checked, and the correct keystore path, keystore password, alias name, and alias password are set. Be sure to commit and push these changes to your git repository.\r\n\r\nIf you would rather use Android Studio to generate an upload key and keystore, you can follow [Google's guide](https://developer.android.com/studio/publish/app-signing#generate-key) and then manually select that keystore within the Unity Player Settings. It doesn't matter as long as you end up with a valid `.keystore` file and Unity is configured to use that custom keystore.\r\n\r\nBe sure to keep your `.keystore` file and password handy, as we will be using them in future steps. We recommend that you **not** check your `.keystore` file into git, as this can reduce security. If your workflow requires developers to be able to manually build the project, we recommend adding the `.keystore` file to your `.gitignore` (if you want to keep it in your project directory) and finding an alternate way to transfer it between developers, such as a shared password manager that supports file uploads.\r\n\r\nNext, you will need to add the keystore information to your GitHub repository.\r\n\r\nBegin by base64-encoding the contents of your `.keystore` file. On a Linux or MacOS command-line prompt, you can use the `base64` command to do so: `base64 user.keystore` (assuming you're in the correct working directory and your keystore file is named `user.keystore`). In Windows PowerShell, the following command will generate the same results: `[convert]::ToBase64String((Get-Content -path \"user.keystore\" -Encoding byte))`\r\n\r\nAdd four Repository Secrets in your GitHub repository by going to Settings -> Secrets and clicking the \"New repository secret\" button in the top-right. `ANDROID_KEYSTORE_BASE64` should contain the base64'd version of your keystore file's contents, and `ANDROID_KEYSTORE_PASS`, `ANDROID_KEYALIAS_NAME`, and `ANDROID_KEYALIAS_PASS` should contain your keystore's password, alias name, and alias password respectively. If you followed the instructions above, the keystore password and alias password will be the same.\r\n\r\n### 4- Manually upload a build to Google Play\r\n\r\nIn order to automate submission to the Google Play store, Google requires you to have already manually uploaded a version of your app to the Google Play Console. You also need to get your app out of the \"Draft\" status if you want to deploy anything but draft releases.\r\n\r\nTo begin, build your game in Unity. Ensure that the \"Build App Bundle (Google Play)\" checkbox is checked in the Build Settings, and that the keystore from the previous step is selected in the Publishing Settings section of the Player Settings. If both of these are correct, your build should produce an `.aab` file that has been signed with your upload key.\r\n\r\nIn the Google Play Console, select \"Internal Testing\" from the left-side menu (or an alternate track if you want to do a public production or beta released). Click \"Create new release\", and drag in an AAB you've manually built in Unity (or an existing GitHub Actions workflow). Fill out the rest of the required fields, then click Save.\r\n\r\nBefore you can programmatically deploy any release that is not a \"Draft\" release, you'll need to manually submit your app for review at least once to get it out of \"Draft\" status. Depending on where you are in the game production lifecycle, you may not want to this during initial setup, but be aware this is something you will need to do before you can use GameCI to release new live updates to a production build.\r\n\r\n### 5- Set up Fastlane\r\n\r\nAt this point, your Google Play Console app listing should be ready to accept programmatic uploads, but you still need to configure Fastlane. Within your project directory, create a directory called `fastlane`, and then create two files within that directory, `Appfile` and `Fastfile`.\r\n\r\n```ruby\r\n# fastlane/Appfile\r\nfor_platform :android do\r\n  package_name(ENV[\"ANDROID_PACKAGE_NAME\"])\r\n  json_key_file(ENV[\"GOOGLE_PLAY_KEY_FILE_PATH\"])\r\nend\r\n```\r\n\r\n```ruby\r\n# fastlane/Fastfile\r\nplatform :android do\r\n  desc \"Upload a new Android version to the production Google Play Store\"\r\n  lane :production do\r\n    upload_to_play_store(track: 'production', release_status: 'completed', aab: \"#{ENV['ANDROID_BUILD_FILE_PATH']}\")\r\n  end\r\n\r\n  desc \"Upload a new Android internal version to Google Play\"\r\n  lane :internal do\r\n    upload_to_play_store(track: 'internal', release_status: 'completed', aab: \"#{ENV['ANDROID_BUILD_FILE_PATH']}\")\r\n  end\r\nend\r\n```\r\n\r\nIf you would like to upload to other tracks (namely, `alpha` or `beta`), you can create additional lanes that look the same as the `:production` and `:internal` lanes except for the name and `track` parameter. Additionally, if you want to create draft releases (which will be necessary until you've manually pushed at least one build through the manual submission process), you will want to switch `release_status` from `completed` to `draft`.\r\n\r\n### 6- Add jobs to your GitHub workflow\r\n\r\nThe following workflow establishes two jobs. The first builds your game into an AAB file, and the second uploads that generated bundle to the Play Store.\r\n\r\n```yaml\r\n# .github/workflows/main.yml\r\njobs:\r\n  buildForAndroidPlatform:\r\n    name: Build For Android Platform\r\n    runs-on: ubuntu-latest\r\n    steps:\r\n      - uses: actions/checkout@v2\r\n      - uses: actions/cache@v2\r\n        with:\r\n          path: Library\r\n          key: Library-Android\r\n      - uses: game-ci/unity-builder@v2\r\n        with:\r\n          targetPlatform: Android\r\n          androidAppBundle: true\r\n          androidKeystoreName: user # This file won't exist, but this property needs to exist.\r\n          androidKeystoreBase64: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}\r\n          androidKeystorePass: ${{ secrets.ANDROID_KEYSTORE_PASS }}\r\n          androidKeyaliasName: ${{ secrets.ANDROID_KEYALIAS_NAME }}\r\n          androidKeyaliasPass: ${{ secrets.ANDROID_KEYALIAS_PASS }}\r\n      - uses: actions/upload-artifact@v2\r\n        with:\r\n          name: build-Android\r\n          path: build/Android\r\n\r\n  releaseToGooglePlay:\r\n    name: Release to the Google Play Store\r\n    runs-on: ubuntu-latest\r\n    needs: buildForAndroidPlatform\r\n    env:\r\n      GOOGLE_PLAY_KEY_FILE: ${{ secrets.GOOGLE_PLAY_KEY_FILE }}\r\n      GOOGLE_PLAY_KEY_FILE_PATH: ${{ format('{0}/fastlane/google-fastlane.json', github.workspace) }}\r\n      ANDROID_BUILD_FILE_PATH: ${{ format('{0}/build/Android/Android.aab', github.workspace) }}\r\n      ANDROID_PACKAGE_NAME: ${{ secrets.ANDROID_PACKAGE_NAME }}\r\n    steps:\r\n      - name: Checkout Repository\r\n        uses: actions/checkout@v2\r\n      - name: Download Android Artifact\r\n        uses: actions/download-artifact@v2\r\n        with:\r\n          name: build-Android\r\n          path: build/Android\r\n      - name: Add Authentication\r\n        run: echo \"$GOOGLE_PLAY_KEY_FILE\" > $GOOGLE_PLAY_KEY_FILE_PATH\r\n      - name: Set up Fastlane\r\n        uses: ruby/setup-ruby@v1\r\n        with:\r\n          ruby-version: 2.7.2\r\n          bundler-cache: true\r\n      - name: Upload to Google Play Internal\r\n        uses: maierj/fastlane-action@v2.0.1\r\n        with:\r\n          lane: 'android internal' # Change to upload to a different lane\r\n      - name: Cleanup to avoid storage limit\r\n        if: always()\r\n        uses: geekyeggo/delete-artifact@v1\r\n        with:\r\n          name: build-Android\r\n```\r\n\r\n### 5- Add secrets to your Github repo\r\n\r\nOn your project's GitHub repo page, add a number of Repository Secrets by going to Settings -> Secrets and clicking the \"New repository secret\" button in the top-right.\r\n\r\n- **ANDROID_KEYSTORE_BASE64** : Base64 of your keystore, generated in step 3\r\n- **ANDROID_KEYSTORE_PASS**: Password for your keystore\r\n- **ANDROID_KEYALIAS_NAME**: Name of the alias in your keystore\r\n- **ANDROID_KEYALIAS_PASS**: Password for the alias in your keystore\r\n- **GOOGLE_PLAY_KEY_FILE**: The contents of the Google Account Service .json file from step 2\r\n- **ANDROID_PACKAGE_NAME**: Your application package name (e.g com.company.application)\r\n\r\nIf you get build failures around the keystore being invalid, _please_ confirm that your keystore base64, alias, and two passwords are correct, as that is a common source of failure. If you want to double-check your keystore has been correctly encoded as valid base64, you can locally recreate your keystore by manually running `cat [keystore file] | base64 --decode > user.keystore`, swapping in the name of a text file containing the base64 value. This will create a new keystore that you can attempt to manually build from in Unity. On Windows, this would be `[Text.Encoding]::Utf8.GetString([Convert]::FromBase64String('base 64 value')) | Out-File -FilePath .\\user.keystore`\r\n");

/***/ })

};;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,