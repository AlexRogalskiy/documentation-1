exports.ids = [37];
exports.modules = {

/***/ "./docs/gitlab/deployment/ios.md":
/*!***************************************!*\
  !*** ./docs/gitlab/deployment/ios.md ***!
  \***************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("# iOS\r\n\r\n## Setup (only one time per mac)\r\n\r\nInstall the latest Xcode command line tools :\r\n\r\n```bash\r\nxcode-select --install\r\n```\r\n\r\nInstall fastlane using:\r\n\r\n```bash\r\n# Using RubyGems\r\nsudo gem install fastlane -NV\r\n\r\n# Alternatively using Homebrew\r\nbrew install fastlane\r\n```\r\n\r\n## Unity Settings\r\n\r\n1. Switch target to iOS\r\n1. In `PlayerSettings -> Other Settings`\r\n   1. Fill the field `Signing Team ID`\r\n   1. Ensure `Automatically Sign` is unchecked\r\n   1. iOS Provisioning Profile\r\n      1. `ProfileID`: `match AppStore your_bundle_identifier` _Replace `your_bundle_identifier` by yours_\r\n      1. `ProfileType`: `Distribution`\r\n\r\n## XCode project\r\n\r\nMake a first iOS build using your mac from Unity, that will create an xcode project.  \r\nEnsure you target the same path as the CI.  \r\nEx: if you let `BUILD_NAME: ExampleProjectName` in `.gitlab-ci.yml`, your xcode project must be at the root of the following path: `.\\Builds\\iOS\\ExampleProjectName\\`\r\n\r\n## App on portal\r\n\r\nMake sure that you have setup your app on the Apple Developer Portal and the App Store Connect or use [fastlane produce](https://docs.fastlane.tools/actions/produce/) to create it.\r\n\r\n## Fastlane initialization\r\n\r\nOpen the terminal at the same path then run `fastlane init`, follow instructions to generate Appfile and default Fastfile.\r\n\r\n## Provisioning profile\r\n\r\nRun `fastlane match init`, follow instructions, select `appstore` provisioning profile type. ([Documentation](https://docs.fastlane.tools/actions/match/))\r\n\r\n## Make lane\r\n\r\nCopy the following instructions on your `fastlane/Fastfile`:\r\n\r\n```ruby\r\ndefault_platform(:ios)\r\n\r\nplatform :ios do\r\n  desc \"Push a new beta build to TestFlight\"\r\n  lane :beta do\r\n    sync_code_signing(type:\"appstore\", readonly: is_ci)\r\n    increment_build_number({\r\n        build_number: latest_testflight_build_number + 1\r\n    })\r\n    build_app(scheme:\"Unity-iPhone\")\r\n    upload_to_testflight(groups:[\"Team\"])\r\n  end\r\nend\r\n```\r\n\r\nNote about `upload_to_testflight`: Change \"Team\" to your internal tester or remove `(groups:[\"Team\"])` if you want set manually who can test the build\r\n\r\n### Related documentation\r\n\r\n- [sync_code_signing (alias for match)](https://docs.fastlane.tools/actions/sync_code_signing/)\r\n- [increment_build_number](https://docs.fastlane.tools/actions/increment_build_number/)\r\n- [build_app (alias for gym)](https://docs.fastlane.tools/actions/build_app/)\r\n- [upload_to_testflight (alias for pilot)](https://docs.fastlane.tools/actions/testflight/)\r\n\r\n## Run tests locally\r\n\r\nRun the following command to test the build and the deployement localy:\r\n\r\n```bash\r\nfastlane ios beta\r\n```\r\n\r\nIf the build and upload are ok, you have to force add some file to your git using command below\r\n\r\n```bash\r\ngit add -f pathToTheFileToAdd\r\n```\r\n\r\nyou have to add the following files:\r\n\r\n- `Gemfile`\r\n- `Gemfile.lock` (if here)\r\n- `fastlane/Appfile`\r\n- `fastlane/Fastfile`\r\n- `fastlane/Matchfile`\r\n\r\n## Gitlab-runner - register your mac\r\n\r\nTo automate your build with gitlab, you need to setup your mac as a gitlab runner.  \r\nInstallation:\r\n\r\n```bash\r\nsudo curl --output /usr/local/bin/gitlab-runner https://gitlab-runner-downloads.s3.amazonaws.com/latest/binaries/gitlab-runner-darwin-amd64\r\n```\r\n\r\nGive permission to execute :\r\n\r\n```bash\r\nsudo chmod +x /usr/local/bin/gitlab-runner\r\n```\r\n\r\n- [Source (if you would like to check)](https://docs.gitlab.com/runner/install/osx.html)\r\n\r\nGo to your project gitlab page, then go to `settings` -> `CI/CD` -> `Runners` -> `Specitic Runners` -> `Set up a specific Runner manually` -> take note of the token\r\n\r\n[Follow these instructions](https://docs.gitlab.com/runner/register/index.html) to register your mac as a gitlab-runner for your specific project.  \r\nFollow **macOS** instructions **without** sudo command for registration.\r\n\r\n- Tags: set `mac,ios`\r\n- Executor: set `shell`\r\n\r\nThen, to install/launch the runner:\r\n\r\n```bash\r\ncd ~\r\ngitlab-runner install\r\ngitlab-runner start\r\n```\r\n\r\nRunner is installed and will be run after a system reboot.\r\n\r\nNow, you can uncomment the job `build-and-deploy-ios` in `.gitlab-ci.yml` to make the app build and deployement work.\r\n");

/***/ })

};;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9kb2NzL2dpdGxhYi9kZXBsb3ltZW50L2lvcy5tZCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBO0FBQWUsMjdEQUE0M0QscUVBQXFFLGk1RUFBaTVFLEUiLCJmaWxlIjoiMzcuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBcIiMgaU9TXFxyXFxuXFxyXFxuIyMgU2V0dXAgKG9ubHkgb25lIHRpbWUgcGVyIG1hYylcXHJcXG5cXHJcXG5JbnN0YWxsIHRoZSBsYXRlc3QgWGNvZGUgY29tbWFuZCBsaW5lIHRvb2xzIDpcXHJcXG5cXHJcXG5gYGBiYXNoXFxyXFxueGNvZGUtc2VsZWN0IC0taW5zdGFsbFxcclxcbmBgYFxcclxcblxcclxcbkluc3RhbGwgZmFzdGxhbmUgdXNpbmc6XFxyXFxuXFxyXFxuYGBgYmFzaFxcclxcbiMgVXNpbmcgUnVieUdlbXNcXHJcXG5zdWRvIGdlbSBpbnN0YWxsIGZhc3RsYW5lIC1OVlxcclxcblxcclxcbiMgQWx0ZXJuYXRpdmVseSB1c2luZyBIb21lYnJld1xcclxcbmJyZXcgaW5zdGFsbCBmYXN0bGFuZVxcclxcbmBgYFxcclxcblxcclxcbiMjIFVuaXR5IFNldHRpbmdzXFxyXFxuXFxyXFxuMS4gU3dpdGNoIHRhcmdldCB0byBpT1NcXHJcXG4xLiBJbiBgUGxheWVyU2V0dGluZ3MgLT4gT3RoZXIgU2V0dGluZ3NgXFxyXFxuICAgMS4gRmlsbCB0aGUgZmllbGQgYFNpZ25pbmcgVGVhbSBJRGBcXHJcXG4gICAxLiBFbnN1cmUgYEF1dG9tYXRpY2FsbHkgU2lnbmAgaXMgdW5jaGVja2VkXFxyXFxuICAgMS4gaU9TIFByb3Zpc2lvbmluZyBQcm9maWxlXFxyXFxuICAgICAgMS4gYFByb2ZpbGVJRGA6IGBtYXRjaCBBcHBTdG9yZSB5b3VyX2J1bmRsZV9pZGVudGlmaWVyYCBfUmVwbGFjZSBgeW91cl9idW5kbGVfaWRlbnRpZmllcmAgYnkgeW91cnNfXFxyXFxuICAgICAgMS4gYFByb2ZpbGVUeXBlYDogYERpc3RyaWJ1dGlvbmBcXHJcXG5cXHJcXG4jIyBYQ29kZSBwcm9qZWN0XFxyXFxuXFxyXFxuTWFrZSBhIGZpcnN0IGlPUyBidWlsZCB1c2luZyB5b3VyIG1hYyBmcm9tIFVuaXR5LCB0aGF0IHdpbGwgY3JlYXRlIGFuIHhjb2RlIHByb2plY3QuICBcXHJcXG5FbnN1cmUgeW91IHRhcmdldCB0aGUgc2FtZSBwYXRoIGFzIHRoZSBDSS4gIFxcclxcbkV4OiBpZiB5b3UgbGV0IGBCVUlMRF9OQU1FOiBFeGFtcGxlUHJvamVjdE5hbWVgIGluIGAuZ2l0bGFiLWNpLnltbGAsIHlvdXIgeGNvZGUgcHJvamVjdCBtdXN0IGJlIGF0IHRoZSByb290IG9mIHRoZSBmb2xsb3dpbmcgcGF0aDogYC5cXFxcQnVpbGRzXFxcXGlPU1xcXFxFeGFtcGxlUHJvamVjdE5hbWVcXFxcYFxcclxcblxcclxcbiMjIEFwcCBvbiBwb3J0YWxcXHJcXG5cXHJcXG5NYWtlIHN1cmUgdGhhdCB5b3UgaGF2ZSBzZXR1cCB5b3VyIGFwcCBvbiB0aGUgQXBwbGUgRGV2ZWxvcGVyIFBvcnRhbCBhbmQgdGhlIEFwcCBTdG9yZSBDb25uZWN0IG9yIHVzZSBbZmFzdGxhbmUgcHJvZHVjZV0oaHR0cHM6Ly9kb2NzLmZhc3RsYW5lLnRvb2xzL2FjdGlvbnMvcHJvZHVjZS8pIHRvIGNyZWF0ZSBpdC5cXHJcXG5cXHJcXG4jIyBGYXN0bGFuZSBpbml0aWFsaXphdGlvblxcclxcblxcclxcbk9wZW4gdGhlIHRlcm1pbmFsIGF0IHRoZSBzYW1lIHBhdGggdGhlbiBydW4gYGZhc3RsYW5lIGluaXRgLCBmb2xsb3cgaW5zdHJ1Y3Rpb25zIHRvIGdlbmVyYXRlIEFwcGZpbGUgYW5kIGRlZmF1bHQgRmFzdGZpbGUuXFxyXFxuXFxyXFxuIyMgUHJvdmlzaW9uaW5nIHByb2ZpbGVcXHJcXG5cXHJcXG5SdW4gYGZhc3RsYW5lIG1hdGNoIGluaXRgLCBmb2xsb3cgaW5zdHJ1Y3Rpb25zLCBzZWxlY3QgYGFwcHN0b3JlYCBwcm92aXNpb25pbmcgcHJvZmlsZSB0eXBlLiAoW0RvY3VtZW50YXRpb25dKGh0dHBzOi8vZG9jcy5mYXN0bGFuZS50b29scy9hY3Rpb25zL21hdGNoLykpXFxyXFxuXFxyXFxuIyMgTWFrZSBsYW5lXFxyXFxuXFxyXFxuQ29weSB0aGUgZm9sbG93aW5nIGluc3RydWN0aW9ucyBvbiB5b3VyIGBmYXN0bGFuZS9GYXN0ZmlsZWA6XFxyXFxuXFxyXFxuYGBgcnVieVxcclxcbmRlZmF1bHRfcGxhdGZvcm0oOmlvcylcXHJcXG5cXHJcXG5wbGF0Zm9ybSA6aW9zIGRvXFxyXFxuICBkZXNjIFxcXCJQdXNoIGEgbmV3IGJldGEgYnVpbGQgdG8gVGVzdEZsaWdodFxcXCJcXHJcXG4gIGxhbmUgOmJldGEgZG9cXHJcXG4gICAgc3luY19jb2RlX3NpZ25pbmcodHlwZTpcXFwiYXBwc3RvcmVcXFwiLCByZWFkb25seTogaXNfY2kpXFxyXFxuICAgIGluY3JlbWVudF9idWlsZF9udW1iZXIoe1xcclxcbiAgICAgICAgYnVpbGRfbnVtYmVyOiBsYXRlc3RfdGVzdGZsaWdodF9idWlsZF9udW1iZXIgKyAxXFxyXFxuICAgIH0pXFxyXFxuICAgIGJ1aWxkX2FwcChzY2hlbWU6XFxcIlVuaXR5LWlQaG9uZVxcXCIpXFxyXFxuICAgIHVwbG9hZF90b190ZXN0ZmxpZ2h0KGdyb3VwczpbXFxcIlRlYW1cXFwiXSlcXHJcXG4gIGVuZFxcclxcbmVuZFxcclxcbmBgYFxcclxcblxcclxcbk5vdGUgYWJvdXQgYHVwbG9hZF90b190ZXN0ZmxpZ2h0YDogQ2hhbmdlIFxcXCJUZWFtXFxcIiB0byB5b3VyIGludGVybmFsIHRlc3RlciBvciByZW1vdmUgYChncm91cHM6W1xcXCJUZWFtXFxcIl0pYCBpZiB5b3Ugd2FudCBzZXQgbWFudWFsbHkgd2hvIGNhbiB0ZXN0IHRoZSBidWlsZFxcclxcblxcclxcbiMjIyBSZWxhdGVkIGRvY3VtZW50YXRpb25cXHJcXG5cXHJcXG4tIFtzeW5jX2NvZGVfc2lnbmluZyAoYWxpYXMgZm9yIG1hdGNoKV0oaHR0cHM6Ly9kb2NzLmZhc3RsYW5lLnRvb2xzL2FjdGlvbnMvc3luY19jb2RlX3NpZ25pbmcvKVxcclxcbi0gW2luY3JlbWVudF9idWlsZF9udW1iZXJdKGh0dHBzOi8vZG9jcy5mYXN0bGFuZS50b29scy9hY3Rpb25zL2luY3JlbWVudF9idWlsZF9udW1iZXIvKVxcclxcbi0gW2J1aWxkX2FwcCAoYWxpYXMgZm9yIGd5bSldKGh0dHBzOi8vZG9jcy5mYXN0bGFuZS50b29scy9hY3Rpb25zL2J1aWxkX2FwcC8pXFxyXFxuLSBbdXBsb2FkX3RvX3Rlc3RmbGlnaHQgKGFsaWFzIGZvciBwaWxvdCldKGh0dHBzOi8vZG9jcy5mYXN0bGFuZS50b29scy9hY3Rpb25zL3Rlc3RmbGlnaHQvKVxcclxcblxcclxcbiMjIFJ1biB0ZXN0cyBsb2NhbGx5XFxyXFxuXFxyXFxuUnVuIHRoZSBmb2xsb3dpbmcgY29tbWFuZCB0byB0ZXN0IHRoZSBidWlsZCBhbmQgdGhlIGRlcGxveWVtZW50IGxvY2FseTpcXHJcXG5cXHJcXG5gYGBiYXNoXFxyXFxuZmFzdGxhbmUgaW9zIGJldGFcXHJcXG5gYGBcXHJcXG5cXHJcXG5JZiB0aGUgYnVpbGQgYW5kIHVwbG9hZCBhcmUgb2ssIHlvdSBoYXZlIHRvIGZvcmNlIGFkZCBzb21lIGZpbGUgdG8geW91ciBnaXQgdXNpbmcgY29tbWFuZCBiZWxvd1xcclxcblxcclxcbmBgYGJhc2hcXHJcXG5naXQgYWRkIC1mIHBhdGhUb1RoZUZpbGVUb0FkZFxcclxcbmBgYFxcclxcblxcclxcbnlvdSBoYXZlIHRvIGFkZCB0aGUgZm9sbG93aW5nIGZpbGVzOlxcclxcblxcclxcbi0gYEdlbWZpbGVgXFxyXFxuLSBgR2VtZmlsZS5sb2NrYCAoaWYgaGVyZSlcXHJcXG4tIGBmYXN0bGFuZS9BcHBmaWxlYFxcclxcbi0gYGZhc3RsYW5lL0Zhc3RmaWxlYFxcclxcbi0gYGZhc3RsYW5lL01hdGNoZmlsZWBcXHJcXG5cXHJcXG4jIyBHaXRsYWItcnVubmVyIC0gcmVnaXN0ZXIgeW91ciBtYWNcXHJcXG5cXHJcXG5UbyBhdXRvbWF0ZSB5b3VyIGJ1aWxkIHdpdGggZ2l0bGFiLCB5b3UgbmVlZCB0byBzZXR1cCB5b3VyIG1hYyBhcyBhIGdpdGxhYiBydW5uZXIuICBcXHJcXG5JbnN0YWxsYXRpb246XFxyXFxuXFxyXFxuYGBgYmFzaFxcclxcbnN1ZG8gY3VybCAtLW91dHB1dCAvdXNyL2xvY2FsL2Jpbi9naXRsYWItcnVubmVyIGh0dHBzOi8vZ2l0bGFiLXJ1bm5lci1kb3dubG9hZHMuczMuYW1hem9uYXdzLmNvbS9sYXRlc3QvYmluYXJpZXMvZ2l0bGFiLXJ1bm5lci1kYXJ3aW4tYW1kNjRcXHJcXG5gYGBcXHJcXG5cXHJcXG5HaXZlIHBlcm1pc3Npb24gdG8gZXhlY3V0ZSA6XFxyXFxuXFxyXFxuYGBgYmFzaFxcclxcbnN1ZG8gY2htb2QgK3ggL3Vzci9sb2NhbC9iaW4vZ2l0bGFiLXJ1bm5lclxcclxcbmBgYFxcclxcblxcclxcbi0gW1NvdXJjZSAoaWYgeW91IHdvdWxkIGxpa2UgdG8gY2hlY2spXShodHRwczovL2RvY3MuZ2l0bGFiLmNvbS9ydW5uZXIvaW5zdGFsbC9vc3guaHRtbClcXHJcXG5cXHJcXG5HbyB0byB5b3VyIHByb2plY3QgZ2l0bGFiIHBhZ2UsIHRoZW4gZ28gdG8gYHNldHRpbmdzYCAtPiBgQ0kvQ0RgIC0+IGBSdW5uZXJzYCAtPiBgU3BlY2l0aWMgUnVubmVyc2AgLT4gYFNldCB1cCBhIHNwZWNpZmljIFJ1bm5lciBtYW51YWxseWAgLT4gdGFrZSBub3RlIG9mIHRoZSB0b2tlblxcclxcblxcclxcbltGb2xsb3cgdGhlc2UgaW5zdHJ1Y3Rpb25zXShodHRwczovL2RvY3MuZ2l0bGFiLmNvbS9ydW5uZXIvcmVnaXN0ZXIvaW5kZXguaHRtbCkgdG8gcmVnaXN0ZXIgeW91ciBtYWMgYXMgYSBnaXRsYWItcnVubmVyIGZvciB5b3VyIHNwZWNpZmljIHByb2plY3QuICBcXHJcXG5Gb2xsb3cgKiptYWNPUyoqIGluc3RydWN0aW9ucyAqKndpdGhvdXQqKiBzdWRvIGNvbW1hbmQgZm9yIHJlZ2lzdHJhdGlvbi5cXHJcXG5cXHJcXG4tIFRhZ3M6IHNldCBgbWFjLGlvc2BcXHJcXG4tIEV4ZWN1dG9yOiBzZXQgYHNoZWxsYFxcclxcblxcclxcblRoZW4sIHRvIGluc3RhbGwvbGF1bmNoIHRoZSBydW5uZXI6XFxyXFxuXFxyXFxuYGBgYmFzaFxcclxcbmNkIH5cXHJcXG5naXRsYWItcnVubmVyIGluc3RhbGxcXHJcXG5naXRsYWItcnVubmVyIHN0YXJ0XFxyXFxuYGBgXFxyXFxuXFxyXFxuUnVubmVyIGlzIGluc3RhbGxlZCBhbmQgd2lsbCBiZSBydW4gYWZ0ZXIgYSBzeXN0ZW0gcmVib290Llxcclxcblxcclxcbk5vdywgeW91IGNhbiB1bmNvbW1lbnQgdGhlIGpvYiBgYnVpbGQtYW5kLWRlcGxveS1pb3NgIGluIGAuZ2l0bGFiLWNpLnltbGAgdG8gbWFrZSB0aGUgYXBwIGJ1aWxkIGFuZCBkZXBsb3llbWVudCB3b3JrLlxcclxcblwiOyJdLCJzb3VyY2VSb290IjoiIn0=