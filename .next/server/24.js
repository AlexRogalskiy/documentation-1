exports.ids = [24];
exports.modules = {

/***/ "./docs/github/v2/01-getting-started.md":
/*!**********************************************!*\
  !*** ./docs/github/v2/01-getting-started.md ***!
  \**********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("# Getting started\r\n\r\nGitHub [Actions for Unity](https://github.com/game-ci/unity-actions) provide the fastest and **easiest** way to automatically test and build any Unity project.\r\n\r\nThere are a few parts to setting up a workflow. Steps may slightly differ depending on each license type.\r\n\r\n## Mental model\r\n\r\n#### Overall steps\r\n\r\n1. Understand how\r\n   [Github Actions](https://docs.github.com/en/actions)\r\n   work.\r\n2. Configure a license for Unity.\r\n3. Set up a workflow for your project.\r\n4. Result: Merge pull requests with more confidence.\r\n\r\n#### Setting up a workflow\r\n\r\nSetting up a workflow is easy!\r\n\r\nCreate a file called `.github/workflows/main.yml` in your repository and configure the following steps;\r\n\r\n1. Checkout your repository using\r\n   [Checkout](https://github.com/marketplace/actions/checkout).\r\n2. Cache Unity Library folder using\r\n   [Cache](https://github.com/marketplace/actions/cache).\r\n3. Configure your test job using\r\n   [Test Runner](https://github.com/marketplace/actions/unity-test-runner).\r\n4. Configure your build job using\r\n   [Builder](https://github.com/marketplace/actions/unity-builder).\r\n5. Deploy your application.\r\n\r\n_**Note:** all steps will be explained in the next chapters._\r\n\r\n## Support\r\n\r\n#### First time using GitHub Actions?\r\n\r\nRead the official documentation on how to setup a\r\n[workflow](https://help.github.com/en/actions/automating-your-workflow-with-github-actions/configuring-a-workflow).\r\n\r\nAny subsequent steps assume you have read the above.\r\n\r\n#### Supported Unity versions\r\n\r\nUnity Actions are using\r\n[game-ci/docker](https://github.com/game-ci/docker/)\r\nsince `unity-builder` version 2. Any version in this\r\n[list](/docs/docker/versions) can be used.\r\n\r\n## Video Tutorial\r\n\r\nhttps://www.youtube-nocookie.com/embed/M2BZr02uai0\r\n\r\n## Workflow examples\r\n\r\nBelow are workflow examples displaying various levels of complexity.\r\n\r\nIt is **recommended** to start from the [Simple Example](/docs/github/getting-started#simple-example) and work your way down the page.\r\n\r\n### Simple example\r\n\r\nThis example tests your project then builds it for a single target (WebGL in this case).\r\n\r\nThis example assumes that your Unity project is in the root of your repository.\r\n\r\n```yaml\r\nname: Actions ðŸ˜Ž\r\n\r\non: [push, pull_request]\r\n\r\njobs:\r\n  build:\r\n    name: Build my project âœ¨\r\n    runs-on: ubuntu-latest\r\n    steps:\r\n      # Checkout\r\n      - name: Checkout repository\r\n        uses: actions/checkout@v2\r\n        with:\r\n          lfs: true\r\n\r\n      # Cache\r\n      - uses: actions/cache@v2\r\n        with:\r\n          path: Library\r\n          key: Library-${{ hashFiles('Assets/**', 'Packages/**', 'ProjectSettings/**') }}\r\n          restore-keys: |\r\n            Library-\r\n\r\n      # Test\r\n      - name: Run tests\r\n        uses: game-ci/unity-test-runner@v2\r\n        env:\r\n          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}\r\n        with:\r\n          githubToken: ${{ secrets.GITHUB_TOKEN }}\r\n\r\n      # Build\r\n      - name: Build project\r\n        uses: game-ci/unity-builder@v2\r\n        env:\r\n          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}\r\n          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}\r\n          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}\r\n        with:\r\n          targetPlatform: WebGL\r\n\r\n      # Output\r\n      - uses: actions/upload-artifact@v2\r\n        with:\r\n          name: Build\r\n          path: build\r\n```\r\n\r\n### Simple example with Git LFS\r\n\r\nIf you are using GitHub's git-lfs hosting service to store your large binary assets, you will want to cache them to avoid consuming massive amounts of bandwidth. The extra steps in this example try to restore your git-lfs assets from a cache before doing a git lfs pull.\r\n\r\n```yaml\r\nname: Actions ðŸ˜Ž\r\n\r\non: [push, pull_request]\r\n\r\njobs:\r\n  build:\r\n    name: Build my project âœ¨\r\n    runs-on: ubuntu-latest\r\n    steps:\r\n      # Checkout (without LFS)\r\n      - name: Checkout repository\r\n        uses: actions/checkout@v2\r\n\r\n      # Git LFS\r\n      - name: Create LFS file list\r\n        run: git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-assets-id\r\n\r\n      - name: Restore LFS cache\r\n        uses: actions/cache@v2\r\n        id: lfs-cache\r\n        with:\r\n          path: .git/lfs\r\n          key: ${{ runner.os }}-lfs-${{ hashFiles('.lfs-assets-id') }}\r\n\r\n      - name: Git LFS Pull\r\n        run: |\r\n          git lfs pull\r\n          git add .\r\n          git reset --hard\r\n\r\n      # Cache\r\n      - uses: actions/cache@v2\r\n        with:\r\n          path: Library\r\n          key: Library-${{ hashFiles('Assets/**', 'Packages/**', 'ProjectSettings/**') }}\r\n          restore-keys: |\r\n            Library-\r\n\r\n      # Test\r\n      - name: Run tests\r\n        uses: game-ci/unity-test-runner@v2\r\n        env:\r\n          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}\r\n        with:\r\n          githubToken: ${{ secrets.GITHUB_TOKEN }}\r\n\r\n      # Build\r\n      - name: Build project\r\n        uses: game-ci/unity-builder@v2\r\n        env:\r\n          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}\r\n          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}\r\n          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}\r\n        with:\r\n          targetPlatform: WebGL\r\n\r\n      # Output\r\n      - uses: actions/upload-artifact@v2\r\n        with:\r\n          name: Build\r\n          path: build\r\n```\r\n\r\n### Advanced IL2CPP example\r\n\r\nThis example leverages the powerful Github Actions construct called a\r\n[matrix](https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstrategy)\r\nto test and build for multiple versions of Unity and several target platforms in parallel.\r\n\r\nIL2CPP builds require the base operating system to match the build target.\r\n\r\nBelow is an example to build for all supported platforms with the IL2CPP scripting backend enabled in the project settings.\r\n\r\n> **Note: Tests are currently only compatible on Linux hosts.**\r\n\r\n```yaml\r\nname: Actions ðŸ˜Ž\r\n\r\non: [push, pull_request]\r\n\r\njobs:\r\n  buildAndTestForLinuxBasedPlatforms:\r\n    name: Build for ${{ matrix.targetPlatform }}\r\n    runs-on: ubuntu-latest\r\n    strategy:\r\n      fail-fast: false\r\n      matrix:\r\n        projectPath:\r\n          - test-project\r\n        unityVersion:\r\n          - 2019.4.1f1\r\n          - 2020.2.1f1\r\n        targetPlatform:\r\n          - StandaloneLinux64 # Build a Linux 64-bit standalone.\r\n          - iOS # Build an iOS player.\r\n          - Android # Build an Android player.\r\n          - WebGL # WebGL.\r\n    steps:\r\n      - uses: actions/checkout@v2\r\n        with:\r\n          fetch-depth: 0\r\n          lfs: true\r\n      - uses: actions/cache@v2\r\n        with:\r\n          path: ${{ matrix.projectPath }}/Library\r\n          key: Library-${{ matrix.projectPath }}-${{ matrix.targetPlatform }}-${{ hashFiles(matrix.projectPath) }}\r\n          restore-keys: |\r\n            Library-${{ matrix.projectPath }}-${{ matrix.targetPlatform }}-\r\n            Library-${{ matrix.projectPath }}-\r\n            Library-\r\n      - uses: game-ci/unity-test-runner@v2\r\n        id: testRunner\r\n        env:\r\n          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}\r\n        with:\r\n          projectPath: ${{ matrix.projectPath }}\r\n          unityVersion: ${{ matrix.unityVersion }}\r\n          githubToken: ${{ secrets.GITHUB_TOKEN }}\r\n      - uses: actions/upload-artifact@v2\r\n        if: always()\r\n        with:\r\n          name: Test results (all modes)\r\n          path: ${{ steps.testRunner.outputs.artifactsPath }}\r\n      - uses: game-ci/unity-builder@v2\r\n        env:\r\n          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}\r\n          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}\r\n          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}\r\n        with:\r\n          projectPath: ${{ matrix.projectPath }}\r\n          unityVersion: ${{ matrix.unityVersion }}\r\n          targetPlatform: ${{ matrix.targetPlatform }}\r\n          customParameters: '-myParameter myValue -myBoolean -ThirdParameter andItsValue'\r\n      - uses: actions/upload-artifact@v2\r\n        with:\r\n          name: Build\r\n          path: build\r\n\r\n  buildForWindowsBasedPlatforms:\r\n    name: Build for ${{ matrix.targetPlatform }}\r\n    runs-on: windows-2019\r\n    strategy:\r\n      fail-fast: false\r\n      matrix:\r\n        projectPath:\r\n          - test-project\r\n        unityVersion:\r\n          - 2019.4.1f1\r\n          - 2020.2.1f1\r\n        targetPlatform:\r\n          - StandaloneWindows # Build a Windows 32-bit standalone.\r\n          - StandaloneWindows64 # Build a Windows 64-bit standalone.\r\n          - tvOS # Build an AppleTV player.\r\n          - WSAPlayer # Build a UWP App.\r\n\r\n    steps:\r\n      - uses: actions/checkout@v2\r\n        with:\r\n          fetch-depth: 0\r\n          lfs: true\r\n      - uses: actions/cache@v2\r\n        with:\r\n          path: ${{ matrix.projectPath }}/Library\r\n          key: Library-${{ matrix.projectPath }}-${{ matrix.targetPlatform }}-${{ hashFiles(matrix.projectPath) }}\r\n          restore-keys: |\r\n            Library-${{ matrix.projectPath }}-${{ matrix.targetPlatform }}-\r\n            Library-${{ matrix.projectPath }}-\r\n            Library-\r\n      - uses: game-ci/unity-builder@v2\r\n        env:\r\n          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}\r\n          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}\r\n          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}\r\n        with:\r\n          projectPath: ${{ matrix.projectPath }}\r\n          unityVersion: ${{ matrix.unityVersion }}\r\n          targetPlatform: ${{ matrix.targetPlatform }}\r\n          customParameters: '-myParameter myValue -myBoolean -ThirdParameter andItsValue'\r\n      - uses: actions/upload-artifact@v2\r\n        with:\r\n          name: Build\r\n          path: build\r\n\r\n  buildForMacOSBasedPlatforms:\r\n    name: Build for ${{ matrix.targetPlatform }}\r\n    runs-on: macos-latest\r\n    strategy:\r\n      fail-fast: false\r\n      matrix:\r\n        projectPath:\r\n          - test-project\r\n        unityVersion:\r\n          - 2019.4.1f1\r\n          - 2020.2.1f1\r\n        targetPlatform:\r\n          - StandaloneOSX # Build a macOS standalone.\r\n\r\n    steps:\r\n      - uses: actions/checkout@v2\r\n        with:\r\n          fetch-depth: 0\r\n          lfs: true\r\n\r\n      - uses: actions/cache@v2\r\n        with:\r\n          path: ${{ matrix.projectPath }}/Library\r\n          key: Library-${{ matrix.projectPath }}-${{ matrix.targetPlatform }}-${{ hashFiles(matrix.projectPath) }}\r\n          restore-keys: |\r\n            Library-${{ matrix.projectPath }}-${{ matrix.targetPlatform }}-\r\n            Library-${{ matrix.projectPath }}-\r\n            Library-\r\n\r\n      - uses: game-ci/unity-builder@v2\r\n        env:\r\n          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}\r\n          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}\r\n          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}\r\n        with:\r\n          projectPath: ${{ matrix.projectPath }}\r\n          unityVersion: ${{ matrix.unityVersion }}\r\n          targetPlatform: ${{ matrix.targetPlatform }}\r\n          customParameters: '-myParameter myValue -myBoolean -ThirdParameter andItsValue'\r\n\r\n      - uses: actions/upload-artifact@v2\r\n        with:\r\n          name: Build\r\n          path: build\r\n```\r\n");

/***/ })

};;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,