exports.ids = [23];
exports.modules = {

/***/ "./docs/github/v1/06-deployment/ios.md":
/*!*********************************************!*\
  !*** ./docs/github/v1/06-deployment/ios.md ***!
  \*********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("# Publish to AppStore\r\n\r\nUploading to AppStore is a little tricky to handle certificates, Make sure you do all these steps carefully\r\n\r\n> -- **Note:** You need a Mac environment for doing these steps .\r\n\r\n### 1- Install [fastlane](https://docs.fastlane.tools/getting-started/ios/setup/)\r\n\r\nThere are different ways of installing fastlane,\r\nbut the recommended approach is to make a Gemfile with following content :\r\n\r\n```bash\r\n# fastlane/Gemfile\r\nsource \"https://rubygems.org\"\r\ngem \"fastlane\"\r\n```\r\n\r\nThen run `bundle install`\r\n\r\nThis will create a `Gemfile.lock`, upload both `Gemfile` and `Gemfile.lock` to your repo .\r\n\r\n### 2- Create storage for Apple certifications\r\n\r\nFastlane has a nice implementation of [codesigning.guide concept](https://codesigning.guide/)\r\ncalled match. It basically uploads all necessary keys and certificated in a storage of your\r\nchoice(Private Git repo,Amazon S3,..) and then share it between your different development envs.\r\n\r\nFor using match :\r\n\r\n- Create a private git repository\r\n\r\n- Run following command : `fastlane match appstore` this will ask for your github repository\r\n  and AppleId, and then upload your certificates to the private git repository.\r\n\r\n> -- **Note:** Make sure your AppleId have two-step Authentication and have enough\r\n> access .\r\n>\r\n> -- **Note:** If possible,It's also better to remove(after making a backup) all your certificates before doing it. Some times Match mess things up.\r\n\r\n### 3- Add following fastlane files to your Fastlane folder\r\n\r\n```bash\r\n# fastlane/Matchfile\r\n\r\ngit_url(ENV[\"MATCH_URL\"])\r\ngit_basic_authorization(ENV[\"GIT_TOKEN\"])\r\n\r\ntype(\"appstore\")\r\n\r\napp_identifier(ENV[\"IOS_APP_ID\"])\r\nusername(ENV[\"APPLE_CONNECT_EMAIL\"])\r\n\r\n```\r\n\r\n```bash\r\n# fastlane/Appfile\r\n\r\nfor_platform :ios do\r\n  app_identifier(ENV[\"IOS_APP_ID\"])\r\n\r\n  apple_dev_portal_id(ENV[\"APPLE_DEVELOPER_EMAIL\"])\r\n  itunes_connect_id(ENV[\"APPLE_CONNECT_EMAIL\"])\r\n\r\n  team_id(ENV[\"APPLE_TEAM_ID\"])\r\n  itc_team_id(ENV[\"APPLE_TEAM_ID\"])\r\nend\r\n```\r\n\r\nIn the following file Change com.company.application to your bundle identifier .\r\n\r\n```bash\r\n# fastlane/Fastfile\r\nkeychain_name = \"temporary_keychain\"\r\nkeychain_password = SecureRandom.base64\r\n\r\nplatform :ios do\r\n\r\n  desc \"Push a new release build to the App Store\"\r\n  lane :release do\r\n    build\r\n    upload_to_app_store\r\n  end\r\n\r\n  desc \"Submit a new Beta Build to Apple TestFlight\"\r\n  lane :beta do\r\n    build\r\n    api_key = app_store_connect_api_key(\r\n      key_id: \"#{ENV[APPSTORE_KEY_ID]}\",\r\n      issuer_id: \"#{ENV[APPSTORE_ISSUER_ID]}\",\r\n      key_filepath: \"#{ENV['APPSTORE_P8_PATH']}\",\r\n      duration: 1200, # optional\r\n      in_house: false, # true for enterprice and false for individual accounts\r\n    )\r\n    upload_to_testflight(skip_waiting_for_build_processing:true,api_key: api_key)\r\n  end\r\n\r\n  desc \"Create .ipa\"\r\n  lane :build do\r\n    update_code_signing_settings(use_automatic_signing: false,path: \"#{ENV['IOS_BUILD_PATH']}/iOS/Unity-iPhone.xcodeproj\")\r\n    certificates\r\n    update_project_provisioning(\r\n      xcodeproj: \"#{ENV['IOS_BUILD_PATH']}/iOS/Unity-iPhone.xcodeproj\",\r\n      target_filter: \"Unity-iPhone\",\r\n      profile: ENV[\"sigh_com.company.application_appstore_profile-path\"],\r\n      code_signing_identity: \"Apple Distribution: #{ENV['APPLE_TEAM_NAME']} (#{ENV['APPLE_TEAM_ID']})\"\r\n    )\r\n    increment_build_number(\r\n       xcodeproj: \"#{ENV['IOS_BUILD_PATH']}/iOS/Unity-iPhone.xcodeproj\"\r\n    )\r\n    gym(\r\n      project: \"#{ENV['IOS_BUILD_PATH']}/iOS/Unity-iPhone.xcodeproj\",\r\n      scheme: \"Unity-iPhone\",\r\n      clean: true,\r\n      skip_profile_detection: true,\r\n      codesigning_identity: \"Apple Distribution: #{ENV['APPLE_TEAM_NAME']} (#{ENV['APPLE_TEAM_ID']})\",\r\n      export_method: \"app-store\",\r\n      export_options: {\r\n        method: \"app-store\",\r\n        provisioningProfiles: {\r\n          ENV[\"IOS_APP_ID\"] => \"match AppStore #{ENV['IOS_APP_ID']}\"\r\n        }\r\n      }\r\n    )\r\n  end\r\n\r\n  desc \"Synchronize certificates\"\r\n  lane :certificates do\r\n    cleanup_keychain\r\n    create_keychain(\r\n      name: keychain_name,\r\n      password: keychain_password,\r\n      default_keychain: true,\r\n      lock_when_sleeps: true,\r\n      timeout: 3600,\r\n      unlock: true\r\n    )\r\n    match(\r\n      type: \"appstore\",\r\n      readonly: true,\r\n      keychain_name: keychain_name,\r\n      keychain_password: keychain_password\r\n    )\r\n  end\r\n\r\n  lane :cleanup_keychain do\r\n    if File.exist?(File.expand_path(\"~/Library/Keychains/#{keychain_name}-db\"))\r\n      delete_keychain(name: keychain_name)\r\n    end\r\n  end\r\n\r\n  after_all do\r\n    if File.exist?(File.expand_path(\"~/Library/Keychains/#{keychain_name}-db\"))\r\n      delete_keychain(name: keychain_name)\r\n    end\r\n  end\r\n\r\nend\r\n\r\n```\r\n\r\n> -- **Note:** If you add libraries that need Podfile (e,g Firebase) to your project,\r\n> Add this line in the beginning of build step :\r\n\r\n```\r\ncocoapods(\r\n    clean_install: true,\r\n    podfile: \"#{ENV['IOS_BUILD_PATH']}/iOS/\"\r\n)\r\n```\r\n\r\nThis will install pods and generate `xcworkspace` for you .\r\n\r\nThen change the gym section so that it use the new `xcworkspace` :\r\n\r\n```bash\r\ngym(\r\n  workspace: \"#{ENV['IOS_BUILD_PATH']}/iOS/Unity-iPhone.xcworkspace\",\r\n  scheme: \"Unity-iPhone\",\r\n  clean: true,\r\n  skip_profile_detection: true,\r\n  codesigning_identity: \"Apple Distribution: #{ENV['APPLE_TEAM_NAME']} (#{ENV['APPLE_TEAM_ID']})\",\r\n  export_method: \"app-store\",\r\n  export_options: {\r\n  method: \"app-store\",\r\n    provisioningProfiles: {\r\n    ENV[\"IOS_APP_ID\"] => \"match AppStore #{ENV['IOS_APP_ID']}\"\r\n   }\r\n  }\r\n)\r\n```\r\n\r\n### 4- Add Github action\r\n\r\n```yaml\r\n# .github/workflows/main.yml\r\n\r\nBuildForiOSPlatform:\r\n  name: Build for iOS\r\n  runs-on: ubuntu-latest\r\n  steps:\r\n    - uses: actions/checkout@v2\r\n    - uses: actions/cache@v2\r\n      with:\r\n        path: Library\r\n        key: Library-iOS\r\n    - uses: webbertakken/unity-builder@v1.5\r\n      with:\r\n        targetPlatform: iOS\r\n    - uses: actions/upload-artifact@v2\r\n      with:\r\n        name: build-iOS\r\n        path: build/iOS\r\n\r\n  ReleaseToAppStore:\r\n    name: Release to the App Store\r\n    runs-on: macos-latest\r\n    needs: buildForiOsPlatform\r\n    env:\r\n      APPLE_CONNECT_EMAIL: ${{ secrets.APPLE_CONNECT_EMAIL }}\r\n      APPLE_DEVELOPER_EMAIL: ${{ secrets.APPLE_DEVELOPER_EMAIL }}\r\n      APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}\r\n      APPLE_TEAM_NAME: ${{ secrets.APPLE_TEAM_NAME }}\r\n      MATCH_URL: ${{ secrets.MATCH_URL }}\r\n      GIT_TOKEN: ${{ secrets.GIT_TOKEN }}\r\n      MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}\r\n      APPSTORE_KEY_ID: ${{ secrets.APPSTORE_KEY_ID }}\r\n      APPSTORE_ISSUER_ID: ${{ secrets.APPSTORE_ISSUER_ID }}\r\n      APPSTORE_P8: ${{ secrets. APPSTORE_P8 }}\r\n      APPSTORE_P8_PATH: ${{ format('{0}/fastlane/p8.json', github.workspace) }}\r\n      IOS_APP_ID: com.company.application # Change it to match your unity bundle id\r\n      IOS_BUILD_PATH: ${{ format('{0}/build/iOS', github.workspace) }}\r\n      PROJECT_NAME: Your Project Name\r\n      RELEASE_NOTES: Your Release Notes\r\n    steps:\r\n      - name: Checkout Repository\r\n        uses: actions/checkout@v2\r\n      - name: Make App Store p8\r\n        run: echo \"$APPSTORE_P8\" > $APPSTORE_P8_PATH\r\n      - name: Download iOS Artifact\r\n        uses: actions/download-artifact@v2\r\n        with:\r\n          name: build-iOS\r\n          path: build/iOS\r\n      - uses: actions/cache@v2\r\n        with:\r\n          path: vendor/bundle\r\n          key: ${{ runner.os }}-${{ hashFiles('**/Gemfile.lock') }}\r\n      - name: Install Fastlane\r\n        run: bundle install\r\n      - name: Prepare for Upload\r\n        run: find $IOS_BUILD_PATH -type f -iname \"*.sh\" -exec chmod +x {} \\;\r\n      - name: Upload to the Test Flight\r\n        uses: maierj/fastlane-action@v2.0.0\r\n        with:\r\n          lane: 'ios beta'\r\n      - name: Tidy up artifact to avoid storage limit\r\n        if: ${{ always() }}\r\n        uses: geekyeggo/delete-artifact@v1\r\n        with:\r\n          name: build-iOS\r\n```\r\n\r\n### 5- Add secrets to your Github repo\r\n\r\n- **APPLE_CONNECT_EMAIL** : Apple connect email (usually same as APPLE_DEVELOPER_EMAIL)\r\n- **APPLE_DEVELOPER_EMAIL**: Your AppleId\r\n- **APPLE_TEAM_ID**: Team Id From developer.apple.com/MemberShip\r\n- **APPLE_TEAM_NAME**: Team Name From developer.apple.com/MemberShip\r\n- **MATCH_URL**: Address of private repository that you made in previous steps for storing certificates.\r\n- **GIT_TOKEN**: Base64 of user@MATCH_URL e,g user@https://github.com/game-ci/documentation.git .\r\n  You can use some online base64 encoder for this step\r\n- **MATCH_PASSWORD**: The password you set when you use `fastlane match appstore`\r\n- **APPSTORE_KEY_ID ,APPSTORE_ISSUER_ID,APPSTORE_P8**: Because of limitation in using Apple accounts\r\n  with 2fa ( 2-factor authentication ) in CI environments, you have to\r\n  make special key for accessing appstore . Follow [fastlane official guide](https://docs.fastlane.tools/app-store-connect-api/)\r\n  to generate these values.\r\n\r\n### 6- Unity Settings\r\n\r\n- Set Signing Team Id and Bundle identifier in iOS player setting\r\n- Add your application icon (Application with no icon generate error during uploading to test flight)");

/***/ })

};;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,