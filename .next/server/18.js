exports.ids = [18];
exports.modules = {

/***/ "./docs/github/v1/02-activation.md":
/*!*****************************************!*\
  !*** ./docs/github/v1/02-activation.md ***!
  \*****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("# Activation\r\n\r\nAll actions use a Unity installation, which needs to be activated.\r\n\r\nUnity differentiates their methods between `personal` and `professional` licenses.\r\n\r\n## Personal license\r\n\r\n#### Mental model\r\n\r\n1. Request activation file for usage on GitHub\r\n2. Use that file to acquire a license\r\n3. Set the license as a secret\r\n\r\n#### About the activation file\r\n\r\nYou may use the\r\n[Unity - Request Activation File](https://github.com/marketplace/actions/unity-request-activation-file)\r\naction using below instructions.\r\n\r\nThe activation file uses machine identifiers and the Unity version number.\r\nAll github virtual machines emit the same hardware ID.\r\nYou cannot perform this step locally.\r\n\r\nLet's go!\r\n\r\n### Acquiring an activation file\r\n\r\nCreate a file called `.github/workflows/activation.yml` and add a job to it.\r\n\r\n```yaml\r\nname: Acquire activation file\r\non: [push]\r\njobs:\r\n  activation:\r\n    name: Request manual activation file ðŸ”‘\r\n    runs-on: ubuntu-latest\r\n    steps:\r\n```\r\n\r\nTo **configure** this action, add this step and set the id.\r\n\r\n```yaml\r\n# Request manual activation file\r\n- name: Request manual activation file\r\n  id: getManualLicenseFile\r\n  uses: webbertakken/unity-request-manual-activation-file@v1.2\r\n  with:\r\n    unityVersion: 2019.2.11f1\r\n```\r\n\r\nYou use the id to **upload the output file** like so:\r\n\r\n```yaml\r\n# Upload artifact (Unity_v20XX.X.XXXX.alf)\r\n- name: Expose as artifact\r\n  uses: actions/upload-artifact@v1\r\n  with:\r\n    name: ${{ steps.getManualLicenseFile.outputs.filePath }}\r\n    path: ${{ steps.getManualLicenseFile.outputs.filePath }}\r\n```\r\n\r\nCommit and push your workflow definition.\r\n\r\n### Converting into a license\r\n\r\nFollow these (one-time) steps for simple activation.\r\n\r\n- Download the manual activation file that now appeared as an artifact.\r\n- Visit [license.unity3d.com](https://license.unity3d.com/manual) and upload it.\r\n- You should now receive your license file (Unity_v20XX.x.ulf) as a download.\r\n- Open `Github` > `<Your repository>` > `Settings` > `Secrets`.\r\n- Create a secret called `UNITY_LICENSE` and copy the contents your license file into it.\r\n\r\n> _**Note:** When changing Unity version, you may need to repeat the same process._\r\n\r\n## Professional license\r\n\r\n1. Open `Github` > `<Your repository>` > `Settings` > `Secrets`\r\n2. Create the following secrets;\r\n   - `UNITY_SERIAL` - _(Add the code that looks like `XX-XXXX-XXXX-XXXX-XXXX-XXXX`)_\r\n   - `UNITY_EMAIL` - _(Add the email address that you use to login to Unity)_\r\n   - `UNITY_PASSWORD` - _(Add the password that you use to login to Unity)_\r\n\r\n## Optional steps\r\n\r\n- Verify your license using\r\n  [Activate](https://github.com/marketplace/actions/unity-activate).\r\n- When using a pro license also use\r\n  [Return License](https://github.com/marketplace/actions/unity-return-license)\r\n  to free up the license allocation after usage.\r\n\r\n> _**Note:** Test runner and Builder already include these steps._\r\n\r\n## Next steps\r\n\r\nThe license can be used in test and build steps.\r\n\r\nYou are now ready to start configuring these.\r\n");

/***/ })

};;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9kb2NzL2dpdGh1Yi92MS8wMi1hY3RpdmF0aW9uLm1kIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUE7QUFBZSwwbkRBQTJqRCwrQ0FBK0MsaUJBQWlCLCtDQUErQyxreEJBQWt4QiwydkJBQTJ2QixFIiwiZmlsZSI6IjE4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgXCIjIEFjdGl2YXRpb25cXHJcXG5cXHJcXG5BbGwgYWN0aW9ucyB1c2UgYSBVbml0eSBpbnN0YWxsYXRpb24sIHdoaWNoIG5lZWRzIHRvIGJlIGFjdGl2YXRlZC5cXHJcXG5cXHJcXG5Vbml0eSBkaWZmZXJlbnRpYXRlcyB0aGVpciBtZXRob2RzIGJldHdlZW4gYHBlcnNvbmFsYCBhbmQgYHByb2Zlc3Npb25hbGAgbGljZW5zZXMuXFxyXFxuXFxyXFxuIyMgUGVyc29uYWwgbGljZW5zZVxcclxcblxcclxcbiMjIyMgTWVudGFsIG1vZGVsXFxyXFxuXFxyXFxuMS4gUmVxdWVzdCBhY3RpdmF0aW9uIGZpbGUgZm9yIHVzYWdlIG9uIEdpdEh1YlxcclxcbjIuIFVzZSB0aGF0IGZpbGUgdG8gYWNxdWlyZSBhIGxpY2Vuc2VcXHJcXG4zLiBTZXQgdGhlIGxpY2Vuc2UgYXMgYSBzZWNyZXRcXHJcXG5cXHJcXG4jIyMjIEFib3V0IHRoZSBhY3RpdmF0aW9uIGZpbGVcXHJcXG5cXHJcXG5Zb3UgbWF5IHVzZSB0aGVcXHJcXG5bVW5pdHkgLSBSZXF1ZXN0IEFjdGl2YXRpb24gRmlsZV0oaHR0cHM6Ly9naXRodWIuY29tL21hcmtldHBsYWNlL2FjdGlvbnMvdW5pdHktcmVxdWVzdC1hY3RpdmF0aW9uLWZpbGUpXFxyXFxuYWN0aW9uIHVzaW5nIGJlbG93IGluc3RydWN0aW9ucy5cXHJcXG5cXHJcXG5UaGUgYWN0aXZhdGlvbiBmaWxlIHVzZXMgbWFjaGluZSBpZGVudGlmaWVycyBhbmQgdGhlIFVuaXR5IHZlcnNpb24gbnVtYmVyLlxcclxcbkFsbCBnaXRodWIgdmlydHVhbCBtYWNoaW5lcyBlbWl0IHRoZSBzYW1lIGhhcmR3YXJlIElELlxcclxcbllvdSBjYW5ub3QgcGVyZm9ybSB0aGlzIHN0ZXAgbG9jYWxseS5cXHJcXG5cXHJcXG5MZXQncyBnbyFcXHJcXG5cXHJcXG4jIyMgQWNxdWlyaW5nIGFuIGFjdGl2YXRpb24gZmlsZVxcclxcblxcclxcbkNyZWF0ZSBhIGZpbGUgY2FsbGVkIGAuZ2l0aHViL3dvcmtmbG93cy9hY3RpdmF0aW9uLnltbGAgYW5kIGFkZCBhIGpvYiB0byBpdC5cXHJcXG5cXHJcXG5gYGB5YW1sXFxyXFxubmFtZTogQWNxdWlyZSBhY3RpdmF0aW9uIGZpbGVcXHJcXG5vbjogW3B1c2hdXFxyXFxuam9iczpcXHJcXG4gIGFjdGl2YXRpb246XFxyXFxuICAgIG5hbWU6IFJlcXVlc3QgbWFudWFsIGFjdGl2YXRpb24gZmlsZSDwn5SRXFxyXFxuICAgIHJ1bnMtb246IHVidW50dS1sYXRlc3RcXHJcXG4gICAgc3RlcHM6XFxyXFxuYGBgXFxyXFxuXFxyXFxuVG8gKipjb25maWd1cmUqKiB0aGlzIGFjdGlvbiwgYWRkIHRoaXMgc3RlcCBhbmQgc2V0IHRoZSBpZC5cXHJcXG5cXHJcXG5gYGB5YW1sXFxyXFxuIyBSZXF1ZXN0IG1hbnVhbCBhY3RpdmF0aW9uIGZpbGVcXHJcXG4tIG5hbWU6IFJlcXVlc3QgbWFudWFsIGFjdGl2YXRpb24gZmlsZVxcclxcbiAgaWQ6IGdldE1hbnVhbExpY2Vuc2VGaWxlXFxyXFxuICB1c2VzOiB3ZWJiZXJ0YWtrZW4vdW5pdHktcmVxdWVzdC1tYW51YWwtYWN0aXZhdGlvbi1maWxlQHYxLjJcXHJcXG4gIHdpdGg6XFxyXFxuICAgIHVuaXR5VmVyc2lvbjogMjAxOS4yLjExZjFcXHJcXG5gYGBcXHJcXG5cXHJcXG5Zb3UgdXNlIHRoZSBpZCB0byAqKnVwbG9hZCB0aGUgb3V0cHV0IGZpbGUqKiBsaWtlIHNvOlxcclxcblxcclxcbmBgYHlhbWxcXHJcXG4jIFVwbG9hZCBhcnRpZmFjdCAoVW5pdHlfdjIwWFguWC5YWFhYLmFsZilcXHJcXG4tIG5hbWU6IEV4cG9zZSBhcyBhcnRpZmFjdFxcclxcbiAgdXNlczogYWN0aW9ucy91cGxvYWQtYXJ0aWZhY3RAdjFcXHJcXG4gIHdpdGg6XFxyXFxuICAgIG5hbWU6ICR7eyBzdGVwcy5nZXRNYW51YWxMaWNlbnNlRmlsZS5vdXRwdXRzLmZpbGVQYXRoIH19XFxyXFxuICAgIHBhdGg6ICR7eyBzdGVwcy5nZXRNYW51YWxMaWNlbnNlRmlsZS5vdXRwdXRzLmZpbGVQYXRoIH19XFxyXFxuYGBgXFxyXFxuXFxyXFxuQ29tbWl0IGFuZCBwdXNoIHlvdXIgd29ya2Zsb3cgZGVmaW5pdGlvbi5cXHJcXG5cXHJcXG4jIyMgQ29udmVydGluZyBpbnRvIGEgbGljZW5zZVxcclxcblxcclxcbkZvbGxvdyB0aGVzZSAob25lLXRpbWUpIHN0ZXBzIGZvciBzaW1wbGUgYWN0aXZhdGlvbi5cXHJcXG5cXHJcXG4tIERvd25sb2FkIHRoZSBtYW51YWwgYWN0aXZhdGlvbiBmaWxlIHRoYXQgbm93IGFwcGVhcmVkIGFzIGFuIGFydGlmYWN0Llxcclxcbi0gVmlzaXQgW2xpY2Vuc2UudW5pdHkzZC5jb21dKGh0dHBzOi8vbGljZW5zZS51bml0eTNkLmNvbS9tYW51YWwpIGFuZCB1cGxvYWQgaXQuXFxyXFxuLSBZb3Ugc2hvdWxkIG5vdyByZWNlaXZlIHlvdXIgbGljZW5zZSBmaWxlIChVbml0eV92MjBYWC54LnVsZikgYXMgYSBkb3dubG9hZC5cXHJcXG4tIE9wZW4gYEdpdGh1YmAgPiBgPFlvdXIgcmVwb3NpdG9yeT5gID4gYFNldHRpbmdzYCA+IGBTZWNyZXRzYC5cXHJcXG4tIENyZWF0ZSBhIHNlY3JldCBjYWxsZWQgYFVOSVRZX0xJQ0VOU0VgIGFuZCBjb3B5IHRoZSBjb250ZW50cyB5b3VyIGxpY2Vuc2UgZmlsZSBpbnRvIGl0Llxcclxcblxcclxcbj4gXyoqTm90ZToqKiBXaGVuIGNoYW5naW5nIFVuaXR5IHZlcnNpb24sIHlvdSBtYXkgbmVlZCB0byByZXBlYXQgdGhlIHNhbWUgcHJvY2Vzcy5fXFxyXFxuXFxyXFxuIyMgUHJvZmVzc2lvbmFsIGxpY2Vuc2VcXHJcXG5cXHJcXG4xLiBPcGVuIGBHaXRodWJgID4gYDxZb3VyIHJlcG9zaXRvcnk+YCA+IGBTZXR0aW5nc2AgPiBgU2VjcmV0c2BcXHJcXG4yLiBDcmVhdGUgdGhlIGZvbGxvd2luZyBzZWNyZXRzO1xcclxcbiAgIC0gYFVOSVRZX1NFUklBTGAgLSBfKEFkZCB0aGUgY29kZSB0aGF0IGxvb2tzIGxpa2UgYFhYLVhYWFgtWFhYWC1YWFhYLVhYWFgtWFhYWGApX1xcclxcbiAgIC0gYFVOSVRZX0VNQUlMYCAtIF8oQWRkIHRoZSBlbWFpbCBhZGRyZXNzIHRoYXQgeW91IHVzZSB0byBsb2dpbiB0byBVbml0eSlfXFxyXFxuICAgLSBgVU5JVFlfUEFTU1dPUkRgIC0gXyhBZGQgdGhlIHBhc3N3b3JkIHRoYXQgeW91IHVzZSB0byBsb2dpbiB0byBVbml0eSlfXFxyXFxuXFxyXFxuIyMgT3B0aW9uYWwgc3RlcHNcXHJcXG5cXHJcXG4tIFZlcmlmeSB5b3VyIGxpY2Vuc2UgdXNpbmdcXHJcXG4gIFtBY3RpdmF0ZV0oaHR0cHM6Ly9naXRodWIuY29tL21hcmtldHBsYWNlL2FjdGlvbnMvdW5pdHktYWN0aXZhdGUpLlxcclxcbi0gV2hlbiB1c2luZyBhIHBybyBsaWNlbnNlIGFsc28gdXNlXFxyXFxuICBbUmV0dXJuIExpY2Vuc2VdKGh0dHBzOi8vZ2l0aHViLmNvbS9tYXJrZXRwbGFjZS9hY3Rpb25zL3VuaXR5LXJldHVybi1saWNlbnNlKVxcclxcbiAgdG8gZnJlZSB1cCB0aGUgbGljZW5zZSBhbGxvY2F0aW9uIGFmdGVyIHVzYWdlLlxcclxcblxcclxcbj4gXyoqTm90ZToqKiBUZXN0IHJ1bm5lciBhbmQgQnVpbGRlciBhbHJlYWR5IGluY2x1ZGUgdGhlc2Ugc3RlcHMuX1xcclxcblxcclxcbiMjIE5leHQgc3RlcHNcXHJcXG5cXHJcXG5UaGUgbGljZW5zZSBjYW4gYmUgdXNlZCBpbiB0ZXN0IGFuZCBidWlsZCBzdGVwcy5cXHJcXG5cXHJcXG5Zb3UgYXJlIG5vdyByZWFkeSB0byBzdGFydCBjb25maWd1cmluZyB0aGVzZS5cXHJcXG5cIjsiXSwic291cmNlUm9vdCI6IiJ9