exports.ids = [19];
exports.modules = {

/***/ "./docs/github/v1/03-test-runner.md":
/*!******************************************!*\
  !*** ./docs/github/v1/03-test-runner.md ***!
  \******************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("# Test runner\r\n\r\nRunning your test suite in an automated workflow helps increase certainty when merging.\r\n\r\nUse [Unity - Test runner](https://github.com/marketplace/actions/unity-test-runner) to run your Unity tests.\r\n\r\n## Basic setup\r\n\r\nBy default, the test runner will run both `playmode` and `editmode` tests.\r\n\r\nCreate or edit the file called `.github/workflows/main.yml` and add a job to it.\r\n\r\n#### Personal license\r\n\r\nPersonal licenses require a one-time manual activation step (per unity version).\r\n\r\nMake sure you\r\n[acquire and activate](https://github.com/marketplace/actions/unity-request-activation-file)\r\nyour license file and add it as a secret.\r\n\r\nThen, define the test step as follows:\r\n\r\n```yaml\r\n- uses: webbertakken/unity-test-runner@v1.7\r\n  env:\r\n    UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}\r\n  with:\r\n    projectPath: path/to/your/project\r\n    unityVersion: 20XX.X.XXXX\r\n```\r\n\r\n#### Professional license\r\n\r\nMake sure you have set up these variables in the activation step.\r\n\r\n- `UNITY_EMAIL` (should contain the email address for your Unity account)\r\n- `UNITY_PASSWORD` (the password that you use to login to Unity)\r\n- `UNITY_SERIAL` (the serial provided by Unity)\r\n\r\nDefine the test step as follows:\r\n\r\n```yaml\r\n- uses: webbertakken/unity-test-runner@v1.7\r\n  env:\r\n    UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}\r\n    UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}\r\n    UNITY_SERIAL: ${{ secrets.UNITY_SERIAL }}\r\n  with:\r\n    projectPath: path/to/your/project\r\n    unityVersion: 20XX.X.XXXX\r\n```\r\n\r\nThat is all you need to test your project.\r\n\r\n## Storing test results\r\n\r\nTo be able to access the test results,\r\nthey need to be uploaded as artifacts.\r\n\r\nTo do this it is recommended to use Github Actions official\r\n[upload artifact action](https://github.com/marketplace/actions/upload-artifact)\r\nafter any test action.\r\n\r\nBy default, Test Runner outputs its results to a folder named `artifacts`.\r\n\r\n```yaml\r\n- uses: actions/upload-artifact@v1\r\n  with:\r\n    name: Test results\r\n    path: artifacts\r\n```\r\n\r\nTest results can now be downloaded as `Artifacts` in the `Actions` tab.\r\n\r\n#### Specifying artifacts folder\r\n\r\nYou can specify a different `artifactsPath` in the test runner and reference this path using the `id` of the test step.\r\n\r\n```yaml\r\n- uses: webbertakken/unity-test-runner@v1.7\r\n  id: myTestStep\r\n```\r\n\r\n```yaml\r\n- uses: actions/upload-artifact@v1\r\n  with:\r\n    name: Test results\r\n    path: ${{ steps.myTestStep.outputs.artifactsPath }}\r\n```\r\n\r\n## Caching\r\n\r\nIn order to make test runs (and builds) faster,\r\nyou can cache Library files from previous runs.\r\n\r\nTo do so, simply add Github Actions' official\r\n[cache action](https://github.com/marketplace/actions/cache)\r\nbefore any unity steps.\r\n\r\n```yaml\r\n- uses: actions/cache@v1.1.0\r\n  with:\r\n    path: path/to/your/project/Library\r\n    key: Library-MyProjectName-TargetPlatform\r\n    restore-keys: |\r\n      Library-MyProjectName-\r\n      Library-\r\n```\r\n\r\nThis simple addition could speed up your test runs by more than 50%.\r\n\r\n## Configuration options\r\n\r\nBelow options can be specified under `with:` for the `unity-test-runner` action.\r\n\r\n#### projectPath\r\n\r\nSpecify the path to your Unity project to be tested.\r\nThe path should be relative to the root of your project.\r\n\r\n_**required:** `false`_\r\n_**default:** `<your project root>`_\r\n\r\n#### unityVersion\r\n\r\nVersion of Unity to use for testing the project.\r\nUse \"auto\" to get from your ProjectSettings/ProjectVersion.txt\r\n\r\n_**required:** `false`_\r\n_**default:** `auto`_\r\n\r\n#### testMode\r\n\r\nThe type of tests to be run by the test runner.\r\n\r\nOptions are: \"all\", \"playmode\", \"editmode\"\r\n\r\n_**required:** `false`_\r\n_**default:** `all`_\r\n\r\n#### artifactsPath\r\n\r\nPath where the test results should be stored.\r\n\r\nIn this folder a folder will be created for every test mode.\r\n\r\n_**required:** `false`_\r\n_**default:** `artifacts`_\r\n\r\n#### useHostNetwork\r\n\r\nInitializes Docker using the host network.\r\n\r\nThis is useful if Unity needs to access a local server that was started as part of your workflow.\r\n\r\nOptions are: \"true\", \"false\"\r\n\r\n_**required:** `false`_\r\n_**default:** `false`_\r\n\r\n#### customParameters\r\n\r\nCustom parameters to configure the test runner.\r\n\r\nParameters must start with a hyphen (`-`) and may be followed by a value (without hyphen).\r\n\r\nParameters without a value will be considered booleans (with a value of true).\r\n\r\n```yaml\r\n- uses: webbertakken/unity-test-runner@1.7\r\n  with:\r\n    customParameters: -profile SomeProfile -someBoolean -someValue exampleValue\r\n```\r\n\r\n_**required:** `false`_\r\n_**default:** `\"\"`_\r\n\r\n#### customImage\r\n\r\nSpecific docker image that should be used for testing the project.\r\n\r\n```yaml\r\n- uses: webbertakken/unity-test-runner@1.7\r\n  with:\r\n    customImage: 'unityci/editor:2020.1.14f1-base-0'\r\n```\r\n\r\n_**required:** `false`_\r\n_**default:** `\"\"`_\r\n\r\n## Complete example\r\n\r\nA complete workflow that tests all modes separately could look like this:\r\n\r\n```yaml\r\nname: Build project\r\n\r\non:\r\n  pull_request: {}\r\n  push: { branches: [main] }\r\n\r\nenv:\r\n  UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}\r\n\r\njobs:\r\n  testAllModes:\r\n    name: Test in ${{ matrix.testMode }} on version ${{ matrix.unityVersion }}\r\n    runs-on: ubuntu-latest\r\n    strategy:\r\n      fail-fast: false\r\n      matrix:\r\n        projectPath:\r\n          - path/to/your/project\r\n        unityVersion:\r\n          - 2019.2.11f1\r\n        testMode:\r\n          - playmode\r\n          - editmode\r\n    steps:\r\n      - uses: actions/checkout@v2\r\n        with:\r\n          lfs: true\r\n      - uses: actions/cache@v1.1.0\r\n        with:\r\n          path: ${{ matrix.projectPath }}/Library\r\n          key: Library-${{ matrix.projectPath }}\r\n          restore-keys: |\r\n            Library-\r\n      - uses: webbertakken/unity-test-runner@v1.7\r\n        id: tests\r\n        with:\r\n          projectPath: ${{ matrix.projectPath }}\r\n          unityVersion: ${{ matrix.unityVersion }}\r\n          testMode: ${{ matrix.testMode }}\r\n          artifactsPath: ${{ matrix.testMode }}-artifacts\r\n      - uses: actions/upload-artifact@v1\r\n        with:\r\n          name: Test results for ${{ matrix.testMode }}\r\n          path: ${{ steps.tests.outputs.artifactsPath }}\r\n```\r\n\r\n> _**Note:** Environment variables are set for all jobs in the workflow like this._\r\n");

/***/ })

};;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,