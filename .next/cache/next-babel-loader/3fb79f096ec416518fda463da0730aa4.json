{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport UnityVersion from '@/components/docs/versions/unity-version';\nimport Heading from '@/components/markdown/components/heading';\nimport { Collapse } from 'antd';\nimport React, { useEffect } from 'react';\nimport { useFirestore, useFirestoreCollectionData } from 'reactfire';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar UnityVersions = function UnityVersions(_ref) {\n  var selectedRepoVersion = _ref.selectedRepoVersion,\n      setIsLoading = _ref.setIsLoading;\n  if (!selectedRepoVersion) return null;\n  var ciJobs = useFirestore().collection('ciJobs').orderBy('editorVersionInfo.major', 'desc').orderBy('editorVersionInfo.minor', 'desc').orderBy('editorVersionInfo.patch', 'desc').where('repoVersionInfo.version', '==', selectedRepoVersion);\n\n  var _useFirestoreCollecti = useFirestoreCollectionData(ciJobs),\n      status = _useFirestoreCollecti.status,\n      data = _useFirestoreCollecti.data;\n\n  var isLoading = status === 'loading';\n  useEffect(function () {\n    setIsLoading(isLoading);\n  });\n\n  var loading = /*#__PURE__*/_jsx(\"p\", {\n    children: \"Fetching versions...\"\n  });\n\n  var failures = isLoading ? [] : data.filter(function (version) {\n    return version.status === 'failed';\n  });\n\n  if (data) {\n    // Sorting the data based on the version numbers to maintain the version order\n    data.sort(function (a, b) {\n      var infoA = a.editorVersionInfo;\n      var infoB = b.editorVersionInfo; // Using major , minor and patch to compare the two numbers\n\n      var majorA = infoA.major,\n          minorA = infoA.minor,\n          patchA = infoA.patch;\n      var majorB = infoB.major,\n          minorB = infoB.minor,\n          patchB = infoB.patch; // First checking for major version.\n\n      if (majorA > majorB) return -1;\n      if (majorA < majorB) return 1; // If major version is equal check for minor version.\n\n      if (minorA > minorB) return -1;\n      if (minorA < minorB) return 1; // If major and minor both are equal check the patch version.\n      // For patch assuming \"f\" is present and splitting based on that.(Can use regex to split also).\n      // Calculating a patchNumber which is the priority offset based sum of the numbers in\n      // the array formed after split. The offset is used to correctly get the priority.\n\n      var patchANumber = 0;\n\n      var _iterator = _createForOfIteratorHelper(patchA.split('f').entries()),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var _step$value = _slicedToArray(_step.value, 2),\n              index = _step$value[0],\n              currentValue = _step$value[1];\n\n          patchANumber += Math.pow(10, 9 - 3 * index) * Number.parseInt(currentValue, 10);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      var patchBNumber = 0;\n\n      var _iterator2 = _createForOfIteratorHelper(patchB.split('f').entries()),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var _step2$value = _slicedToArray(_step2.value, 2),\n              _index = _step2$value[0],\n              _currentValue = _step2$value[1];\n\n          patchBNumber += Math.pow(10, 9 - 3 * _index) * Number.parseInt(_currentValue, 10);\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      return patchBNumber - patchANumber;\n    });\n  }\n\n  return /*#__PURE__*/_jsxs(\"main\", {\n    style: {\n      paddingTop: 24\n    },\n    children: [failures.length > 0 && /*#__PURE__*/_jsxs(_Fragment, {\n      children: [/*#__PURE__*/_jsx(Heading, {\n        level: 3,\n        children: \"Current failures\"\n      }), /*#__PURE__*/_jsx(Collapse, {\n        accordion: true,\n        style: {\n          marginBottom: 24\n        },\n        children: failures.map(function (version) {\n          return /*#__PURE__*/_jsx(UnityVersion, {\n            data: version\n          }, version.NO_ID_FIELD);\n        })\n      })]\n    }), /*#__PURE__*/_jsx(Heading, {\n      level: 3,\n      children: \"All versions\"\n    }), /*#__PURE__*/_jsx(Collapse, {\n      accordion: true,\n      children: isLoading ? loading : data.map(function (version) {\n        return /*#__PURE__*/_jsx(UnityVersion, {\n          data: version\n        }, version.NO_ID_FIELD);\n      })\n    })]\n  });\n};\n\nexport default UnityVersions;","map":null,"metadata":{},"sourceType":"module"}