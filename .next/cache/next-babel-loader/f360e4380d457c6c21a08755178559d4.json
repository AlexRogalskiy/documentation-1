{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Mark\\\\Documents\\\\documentation\\\\components\\\\markdown\\\\components\\\\anchor-view.tsx\";\nimport React, { useState, useEffect } from 'react';\nimport { Anchor } from 'antd';\nimport styles from './anchor-view.module.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst AnchorView = ({\n  children\n}) => {\n  const {\n    0: targetOffset,\n    1: setTargetOffset\n  } = useState();\n  const {\n    0: windowHeight,\n    1: setWindowHeight\n  } = useState(); // Update offset based on window size\n\n  useEffect(() => {\n    const eightPercentOfScreenHeight = Math.floor(window.innerHeight / 12.5);\n    const maxDistance = 24; // This will need to be higher if there's a sticky menu bar\n\n    const offset = Math.min(eightPercentOfScreenHeight, maxDistance);\n    setTargetOffset(offset);\n  }, [windowHeight]); // Update window size on resize\n\n  useEffect(() => {\n    const onResize = () => setWindowHeight(window.innerHeight);\n\n    window.addEventListener('resize', onResize);\n    return () => window.removeEventListener('resize', onResize);\n  });\n  return /*#__PURE__*/_jsxDEV(Anchor, {\n    className: styles.anchorWrapper,\n    targetOffset: targetOffset,\n    affix: true,\n    showInkInFixed: true,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.topSpacer\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), children]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n};\n\nexport default AnchorView;","map":{"version":3,"sources":["C:/Users/Mark/Documents/documentation/components/markdown/components/anchor-view.tsx"],"names":["React","useState","useEffect","Anchor","styles","AnchorView","children","targetOffset","setTargetOffset","windowHeight","setWindowHeight","eightPercentOfScreenHeight","Math","floor","window","innerHeight","maxDistance","offset","min","onResize","addEventListener","removeEventListener","anchorWrapper","topSpacer"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,MAAT,QAAuB,MAAvB;AAGA,OAAOC,MAAP,MAAmB,2BAAnB;;;AAMA,MAAMC,UAAU,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAyB;AAC1C,QAAM;AAAA,OAACC,YAAD;AAAA,OAAeC;AAAf,MAAkCP,QAAQ,EAAhD;AACA,QAAM;AAAA,OAACQ,YAAD;AAAA,OAAeC;AAAf,MAAkCT,QAAQ,EAAhD,CAF0C,CAI1C;;AACAC,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMS,0BAA0B,GAAGC,IAAI,CAACC,KAAL,CAAWC,MAAM,CAACC,WAAP,GAAqB,IAAhC,CAAnC;AACA,UAAMC,WAAW,GAAG,EAApB,CAFc,CAEU;;AACxB,UAAMC,MAAM,GAAGL,IAAI,CAACM,GAAL,CAASP,0BAAT,EAAqCK,WAArC,CAAf;AACAR,IAAAA,eAAe,CAACS,MAAD,CAAf;AACD,GALQ,EAKN,CAACR,YAAD,CALM,CAAT,CAL0C,CAY1C;;AACAP,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMiB,QAAQ,GAAG,MAAMT,eAAe,CAACI,MAAM,CAACC,WAAR,CAAtC;;AACAD,IAAAA,MAAM,CAACM,gBAAP,CAAwB,QAAxB,EAAkCD,QAAlC;AAEA,WAAO,MAAML,MAAM,CAACO,mBAAP,CAA2B,QAA3B,EAAqCF,QAArC,CAAb;AACD,GALQ,CAAT;AAOA,sBACE,QAAC,MAAD;AAAQ,IAAA,SAAS,EAAEf,MAAM,CAACkB,aAA1B;AAAyC,IAAA,YAAY,EAAEf,YAAvD;AAAqE,IAAA,KAAK,MAA1E;AAA2E,IAAA,cAAc,MAAzF;AAAA,4BACE;AAAK,MAAA,SAAS,EAAEH,MAAM,CAACmB;AAAvB;AAAA;AAAA;AAAA;AAAA,YADF,EAEGjB,QAFH;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAMD,CA1BD;;AA4BA,eAAeD,UAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Anchor } from 'antd';\r\nimport { ReactNodeLike } from 'prop-types';\r\n\r\nimport styles from './anchor-view.module.scss';\r\n\r\ninterface Props {\r\n  children: ReactNodeLike;\r\n}\r\n\r\nconst AnchorView = ({ children }: Props) => {\r\n  const [targetOffset, setTargetOffset] = useState<number | undefined>();\r\n  const [windowHeight, setWindowHeight] = useState<number | undefined>();\r\n\r\n  // Update offset based on window size\r\n  useEffect(() => {\r\n    const eightPercentOfScreenHeight = Math.floor(window.innerHeight / 12.5);\r\n    const maxDistance = 24; // This will need to be higher if there's a sticky menu bar\r\n    const offset = Math.min(eightPercentOfScreenHeight, maxDistance);\r\n    setTargetOffset(offset);\r\n  }, [windowHeight]);\r\n\r\n  // Update window size on resize\r\n  useEffect(() => {\r\n    const onResize = () => setWindowHeight(window.innerHeight);\r\n    window.addEventListener('resize', onResize);\r\n\r\n    return () => window.removeEventListener('resize', onResize);\r\n  });\r\n\r\n  return (\r\n    <Anchor className={styles.anchorWrapper} targetOffset={targetOffset} affix showInkInFixed>\r\n      <div className={styles.topSpacer} />\r\n      {children}\r\n    </Anchor>\r\n  );\r\n};\r\n\r\nexport default AnchorView;\r\n"]},"metadata":{},"sourceType":"module"}