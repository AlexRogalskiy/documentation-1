{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Mark\\\\Documents\\\\documentation\\\\pages\\\\docs\\\\[...documentation-page].tsx\",\n    _this = this;\n\nimport DocumentationPage from '@/components/pages/docs/documentation-page';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\n// Represents all the markdown documentation pages\nvar Documentation = function Documentation(_ref) {\n  var content = _ref.content,\n      data = _ref.data,\n      meta = _ref.meta;\n  return /*#__PURE__*/_jsxDEV(DocumentationPage, {\n    content: content,\n    data: data,\n    meta: meta\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 3\n  }, _this);\n}; // Build time: Determines which pages are generated\n\n\n_c = Documentation;\nexport var __N_SSG = true;\nexport default Documentation;\n\nvar _c;\n\n$RefreshReg$(_c, \"Documentation\");","map":{"version":3,"sources":["C:/Users/Mark/Documents/documentation/pages/docs/[...documentation-page].tsx"],"names":["DocumentationPage","Documentation","content","data","meta"],"mappings":";;;AAIA,OAAOA,iBAAP,MAA8B,4CAA9B;;;AAUA;AACA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB;AAAA,MAAGC,OAAH,QAAGA,OAAH;AAAA,MAAYC,IAAZ,QAAYA,IAAZ;AAAA,MAAkBC,IAAlB,QAAkBA,IAAlB;AAAA,sBACpB,QAAC,iBAAD;AAAmB,IAAA,OAAO,EAAEF,OAA5B;AAAqC,IAAA,IAAI,EAAEC,IAA3C;AAAiD,IAAA,IAAI,EAAEC;AAAvD;AAAA;AAAA;AAAA;AAAA,WADoB;AAAA,CAAtB,C,CAIA;;;KAJMH,a;;AAuCN,eAAeA,aAAf","sourcesContent":["import { MenuStructure } from '@/tools/menu/menu-structure';\r\nimport path from 'path';\r\nimport { GetStaticProps, GetStaticPaths } from 'next';\r\nimport matter from 'gray-matter';\r\nimport DocumentationPage from '@/components/pages/docs/documentation-page';\r\nimport readDirectoryRecursively from '@/core/fs/read-directory-recursively';\r\nimport generateSearchDefinitionsFromFiles from '@/tools/search/generate-definitions-from-files';\r\n\r\ninterface Props {\r\n  content: string;\r\n  data: { title: string; date: string };\r\n  meta: { [key: string]: any };\r\n}\r\n\r\n// Represents all the markdown documentation pages\r\nconst Documentation = ({ content, data, meta }: Props) => (\r\n  <DocumentationPage content={content} data={data} meta={meta} />\r\n);\r\n\r\n// Build time: Determines which pages are generated\r\nexport const getStaticPaths: GetStaticPaths = async () => {\r\n  const filePaths = await readDirectoryRecursively(path.resolve('docs/'));\r\n  const structure = await MenuStructure.generateFromFiles(filePaths);\r\n  const fileMetas = await MenuStructure.getFileMetas(structure);\r\n\r\n  if (process.env.CI) generateSearchDefinitionsFromFiles(fileMetas);\r\n\r\n  const paths = fileMetas.map((file) => ({\r\n    params: { 'documentation-page': file.meta.path.split('/') },\r\n  }));\r\n\r\n  return { paths, fallback: false };\r\n};\r\n\r\ninterface StaticProps {\r\n  params: { [key: string]: string[] };\r\n}\r\n\r\n// Build time: Generate JSON for each generated page\r\nexport const getStaticProps: GetStaticProps = async ({ params }: StaticProps) => {\r\n  const { 'documentation-page': parts } = params;\r\n\r\n  const structure = await MenuStructure.load();\r\n  const fileMetas = await MenuStructure.getFileMetas(structure);\r\n\r\n  const seoPath = parts.join('/');\r\n  const { meta } = fileMetas.find((file) => file.meta.path === seoPath);\r\n\r\n  const content = await import(`../../docs/${meta.absolutePath}`);\r\n  const { orig, ...data } = matter(content.default);\r\n\r\n  return { props: { ...data, meta } };\r\n};\r\n\r\nexport default Documentation;\r\n"]},"metadata":{},"sourceType":"module"}