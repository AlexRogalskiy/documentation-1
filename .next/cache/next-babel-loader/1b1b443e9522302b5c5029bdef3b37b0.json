{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { MenuNode } from '@/tools/menu/menu-node';\nimport { MenuSegment } from '@/tools/menu/menu-segment';\nimport { MenuStructureGenerator } from '@/tools/menu/menu-structure-generator';\nimport { MenuStructureParser } from '@/tools/menu/menu-structure-parser';\nimport { sleep } from '@/tools/utils';\nimport { readFileSync, writeFileSync } from 'fs';\nimport { set, get } from 'lodash';\nimport fsPath from 'path';\nexport var MenuStructure = /*#__PURE__*/function () {\n  function MenuStructure() {\n    _classCallCheck(this, MenuStructure);\n  }\n\n  _createClass(MenuStructure, null, [{\n    key: \"generateFromFiles\",\n    value: function () {\n      var _generateFromFiles = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(filePaths) {\n        var menuStructure;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return MenuStructureGenerator.generateMenuStructure(filePaths);\n\n              case 2:\n                menuStructure = _context.sent;\n                _context.next = 5;\n                return this.save(menuStructure);\n\n              case 5:\n                return _context.abrupt(\"return\", menuStructure);\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function generateFromFiles(_x) {\n        return _generateFromFiles.apply(this, arguments);\n      }\n\n      return generateFromFiles;\n    }()\n  }, {\n    key: \"getFileMetas\",\n    value: function () {\n      var _getFileMetas = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(structure) {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                return _context2.abrupt(\"return\", MenuStructureParser.getFileMetas(structure));\n\n              case 1:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function getFileMetas(_x2) {\n        return _getFileMetas.apply(this, arguments);\n      }\n\n      return getFileMetas;\n    }()\n  }, {\n    key: \"load\",\n    value: function () {\n      var _load = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var asJson;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                asJson = readFileSync(fsPath.resolve(this.saveFile), {\n                  encoding: 'utf8'\n                });\n                return _context3.abrupt(\"return\", JSON.parse(asJson));\n\n              case 2:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function load() {\n        return _load.apply(this, arguments);\n      }\n\n      return load;\n    }()\n  }, {\n    key: \"save\",\n    value: function () {\n      var _save = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(menuStructure) {\n        var asJson;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                asJson = \"\".concat(JSON.stringify({\n                  docs: menuStructure\n                }, null, 2), \"\\n\");\n                writeFileSync(fsPath.resolve(this.saveFile), asJson, {\n                  encoding: 'utf8'\n                });\n                _context4.next = 4;\n                return sleep(250);\n\n              case 4:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function save(_x3) {\n        return _save.apply(this, arguments);\n      }\n\n      return save;\n    }()\n  }, {\n    key: \"getCurrentVersions\",\n    value: function getCurrentVersions(collection) {\n      var sections = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      for (var _i = 0, _Object$entries = Object.entries(collection); _i < _Object$entries.length; _i++) {\n        var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n            segment = _Object$entries$_i[0],\n            node = _Object$entries$_i[1];\n\n        if (MenuSegment.isMeta(segment)) continue;\n\n        if (MenuSegment.isVersionContainer(segment)) {\n          var _node$meta = node.meta,\n              path = _node$meta.path,\n              currentVersion = _node$meta.currentVersion;\n          set(sections, \"\".concat(path), currentVersion);\n        }\n\n        if (MenuNode.hasChildren(node)) {\n          this.getCurrentVersions(node, sections);\n        }\n      }\n\n      return sections;\n    }\n  }, {\n    key: \"getNodeByUrl\",\n    value: function getNodeByUrl(menuStructure, urlPath) {\n      return get(menuStructure, urlPath.replace(/^\\/+/, '').split('/').join('.'));\n    }\n  }]);\n\n  return MenuStructure;\n}();\n\n_defineProperty(MenuStructure, \"saveFile\", 'core/menu-structure.json');","map":null,"metadata":{},"sourceType":"module"}