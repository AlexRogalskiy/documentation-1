{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Button } from 'antd';\nimport firebase from 'firebase/app';\nimport { useState } from 'react';\nimport { AiOutlineClose, AiTwotoneLock } from 'react-icons/all';\nimport { useAuth, AuthCheck } from 'reactfire';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nconst loadingDelay = async (delayMs = 100) => {\n  return new Promise(resolve => setTimeout(() => resolve('loading'), delayMs));\n};\n\nconst SignInSignOutButton = props => {\n  const {\n    0: isLoading,\n    1: setIsLoading\n  } = useState(false);\n  const {\n    0: isHovered,\n    1: setIsHovered\n  } = useState(false);\n  const auth = useAuth();\n\n  const signIn = async () => {\n    try {\n      const action = auth.signInWithPopup(new firebase.auth.GoogleAuthProvider());\n      const result = await Promise.race([action, loadingDelay()]);\n\n      if (result === 'loading') {\n        setIsLoading(true);\n      }\n\n      await action;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const signOut = async () => {\n    try {\n      const action = auth.signOut();\n      const result = await Promise.race([action, loadingDelay()]);\n\n      if (result === 'loading') {\n        setIsLoading(true);\n      }\n\n      await action;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return /*#__PURE__*/_jsx(Button, _objectSpread(_objectSpread({}, props), {}, {\n    onClick: auth.currentUser ? signOut : signIn,\n    loading: isLoading,\n    onMouseEnter: () => setIsHovered(true),\n    onMouseLeave: () => setIsHovered(false),\n    children: /*#__PURE__*/_jsx(AuthCheck, {\n      fallback: /*#__PURE__*/_jsx(AiTwotoneLock, {}),\n      children: isHovered ? /*#__PURE__*/_jsx(AiOutlineClose, {\n        color: \"#ff4d4f\"\n      }) : /*#__PURE__*/_jsx(AiTwotoneLock, {\n        color: \"#52c41a\"\n      })\n    })\n  }));\n};\n\nexport default SignInSignOutButton;","map":null,"metadata":{},"sourceType":"module"}