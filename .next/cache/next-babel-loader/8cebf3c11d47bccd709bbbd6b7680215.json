{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useRouter } from 'next/router';\n\nvar usePathSegments = function usePathSegments(nameOfRootSegment) {\n  _s();\n\n  var _useRouter = useRouter(),\n      asPath = _useRouter.asPath;\n\n  var segments = asPath.slice(1).split('#')[0].split('/');\n  var url = '';\n  var pathSegments = segments.map(function (segment) {\n    url += \"/\".concat(segment);\n    var name = segment.replace(/-/g, ' ');\n    return {\n      url: url,\n      name: name\n    };\n  });\n\n  if (nameOfRootSegment !== undefined) {\n    pathSegments.unshift({\n      url: '/',\n      name: nameOfRootSegment\n    });\n  }\n\n  return pathSegments;\n};\n\n_s(usePathSegments, \"9pMG9Ra3x5O/yaZiUz6XxVJ+Rds=\", false, function () {\n  return [useRouter];\n});\n\nexport default usePathSegments;","map":{"version":3,"sources":["C:/Users/Mark/Documents/documentation/core/routing/use-path-segments.js"],"names":["useRouter","usePathSegments","nameOfRootSegment","asPath","segments","slice","split","url","pathSegments","map","segment","name","replace","undefined","unshift"],"mappings":";;AAAA,SAASA,SAAT,QAA0B,aAA1B;;AAEA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,iBAAD,EAAuB;AAAA;;AAAA,mBAC1BF,SAAS,EADiB;AAAA,MACrCG,MADqC,cACrCA,MADqC;;AAE7C,MAAMC,QAAQ,GAAGD,MAAM,CAACE,KAAP,CAAa,CAAb,EAAgBC,KAAhB,CAAsB,GAAtB,EAA2B,CAA3B,EAA8BA,KAA9B,CAAoC,GAApC,CAAjB;AAEA,MAAIC,GAAG,GAAG,EAAV;AACA,MAAMC,YAAY,GAAGJ,QAAQ,CAACK,GAAT,CAAa,UAACC,OAAD,EAAa;AAC7CH,IAAAA,GAAG,eAAQG,OAAR,CAAH;AACA,QAAMC,IAAI,GAAGD,OAAO,CAACE,OAAR,CAAgB,IAAhB,EAAsB,GAAtB,CAAb;AAEA,WAAO;AAAEL,MAAAA,GAAG,EAAHA,GAAF;AAAOI,MAAAA,IAAI,EAAJA;AAAP,KAAP;AACD,GALoB,CAArB;;AAOA,MAAIT,iBAAiB,KAAKW,SAA1B,EAAqC;AACnCL,IAAAA,YAAY,CAACM,OAAb,CAAqB;AAAEP,MAAAA,GAAG,EAAE,GAAP;AAAYI,MAAAA,IAAI,EAAET;AAAlB,KAArB;AACD;;AAED,SAAOM,YAAP;AACD,CAjBD;;GAAMP,e;UACeD,S;;;AAkBrB,eAAeC,eAAf","sourcesContent":["import { useRouter } from 'next/router';\r\n\r\nconst usePathSegments = (nameOfRootSegment) => {\r\n  const { asPath } = useRouter();\r\n  const segments = asPath.slice(1).split('#')[0].split('/');\r\n\r\n  let url = '';\r\n  const pathSegments = segments.map((segment) => {\r\n    url += `/${segment}`;\r\n    const name = segment.replace(/-/g, ' ');\r\n\r\n    return { url, name };\r\n  });\r\n\r\n  if (nameOfRootSegment !== undefined) {\r\n    pathSegments.unshift({ url: '/', name: nameOfRootSegment });\r\n  }\r\n\r\n  return pathSegments;\r\n};\r\n\r\nexport default usePathSegments;\r\n"]},"metadata":{},"sourceType":"module"}