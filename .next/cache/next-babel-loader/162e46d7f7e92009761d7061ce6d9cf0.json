{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\n/**\r\n * official example from redux, for reference\r\n */\n\nexport const counterSlice = createSlice({\n  name: 'counter',\n  initialState: {\n    value: 0\n  },\n  reducers: {\n    incremented: state => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1;\n    },\n    decremented: state => {\n      state.value -= 1;\n    }\n  }\n});\nexport const {\n  incremented,\n  decremented\n} = counterSlice.actions;","map":{"version":3,"sources":["C:/Users/Mark/Documents/documentation/logic/counter/counter-slice.js"],"names":["createSlice","counterSlice","name","initialState","value","reducers","incremented","state","decremented","actions"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AAEA;AACA;AACA;;AACA,OAAO,MAAMC,YAAY,GAAGD,WAAW,CAAC;AACtCE,EAAAA,IAAI,EAAE,SADgC;AAEtCC,EAAAA,YAAY,EAAE;AACZC,IAAAA,KAAK,EAAE;AADK,GAFwB;AAKtCC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,WAAW,EAAGC,KAAD,IAAW;AACtB;AACA;AACA;AACA;AACAA,MAAAA,KAAK,CAACH,KAAN,IAAe,CAAf;AACD,KAPO;AAQRI,IAAAA,WAAW,EAAGD,KAAD,IAAW;AACtBA,MAAAA,KAAK,CAACH,KAAN,IAAe,CAAf;AACD;AAVO;AAL4B,CAAD,CAAhC;AAmBP,OAAO,MAAM;AAAEE,EAAAA,WAAF;AAAeE,EAAAA;AAAf,IAA+BP,YAAY,CAACQ,OAAlD","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\r\n\r\n/**\r\n * official example from redux, for reference\r\n */\r\nexport const counterSlice = createSlice({\r\n  name: 'counter',\r\n  initialState: {\r\n    value: 0,\r\n  },\r\n  reducers: {\r\n    incremented: (state) => {\r\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n      // doesn't actually mutate the state because it uses the Immer library,\r\n      // which detects changes to a \"draft state\" and produces a brand new\r\n      // immutable state based off those changes\r\n      state.value += 1;\r\n    },\r\n    decremented: (state) => {\r\n      state.value -= 1;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { incremented, decremented } = counterSlice.actions;\r\n"]},"metadata":{},"sourceType":"module"}