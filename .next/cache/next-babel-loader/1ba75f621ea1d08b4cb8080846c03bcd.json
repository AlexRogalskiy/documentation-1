{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { MenuNode } from '@/tools/menu/menu-node';\nimport { MenuSegment } from '@/tools/menu/menu-segment';\nimport { MenuStructureGenerator } from '@/tools/menu/menu-structure-generator';\nimport { MenuStructureParser } from '@/tools/menu/menu-structure-parser';\nimport { sleep } from '@/tools/utils';\nimport { readFileSync, writeFileSync } from 'fs';\nimport { set, get } from 'lodash';\nimport fsPath from 'path';\nexport class MenuStructure {\n  static async generateFromFiles(filePaths) {\n    const menuStructure = await MenuStructureGenerator.generateMenuStructure(filePaths);\n    await this.save(menuStructure);\n    return menuStructure;\n  }\n\n  static async getFileMetas(structure) {\n    return MenuStructureParser.getFileMetas(structure);\n  }\n\n  static async load() {\n    const asJson = readFileSync(fsPath.resolve(this.saveFile), {\n      encoding: 'utf8'\n    });\n    return JSON.parse(asJson);\n  }\n\n  static async save(menuStructure) {\n    const asJson = `${JSON.stringify({\n      docs: menuStructure\n    }, null, 2)}\\n`;\n    writeFileSync(fsPath.resolve(this.saveFile), asJson, {\n      encoding: 'utf8'\n    });\n    await sleep(250); // Allow for windows filesystem to catch up.\n  }\n\n  static getCurrentVersions(collection, sections = {}) {\n    for (const [segment, node] of Object.entries(collection)) {\n      if (MenuSegment.isMeta(segment)) continue;\n\n      if (MenuSegment.isVersionContainer(segment)) {\n        const {\n          path,\n          currentVersion\n        } = node.meta;\n        set(sections, `${path}`, currentVersion);\n      }\n\n      if (MenuNode.hasChildren(node)) {\n        this.getCurrentVersions(node, sections);\n      }\n    }\n\n    return sections;\n  }\n\n  static getNodeByUrl(menuStructure, urlPath) {\n    return get(menuStructure, urlPath.replace(/^\\/+/, '').split('/').join('.'));\n  }\n\n}\n\n_defineProperty(MenuStructure, \"saveFile\", 'core/menu-structure.json');","map":{"version":3,"sources":["C:/Users/Mark/Documents/documentation/tools/menu/menu-structure.ts"],"names":["MenuNode","MenuSegment","MenuStructureGenerator","MenuStructureParser","sleep","readFileSync","writeFileSync","set","get","fsPath","MenuStructure","generateFromFiles","filePaths","menuStructure","generateMenuStructure","save","getFileMetas","structure","load","asJson","resolve","saveFile","encoding","JSON","parse","stringify","docs","getCurrentVersions","collection","sections","segment","node","Object","entries","isMeta","isVersionContainer","path","currentVersion","meta","hasChildren","getNodeByUrl","urlPath","replace","split","join"],"mappings":";;AAAA,SAASA,QAAT,QAAyB,wBAAzB;AACA,SAASC,WAAT,QAA4B,2BAA5B;AACA,SAASC,sBAAT,QAAuC,uCAAvC;AACA,SAASC,mBAAT,QAAoC,oCAApC;AACA,SAASC,KAAT,QAAsB,eAAtB;AACA,SAASC,YAAT,EAAuBC,aAAvB,QAA4C,IAA5C;AACA,SAASC,GAAT,EAAcC,GAAd,QAAyB,QAAzB;AACA,OAAOC,MAAP,MAAmB,MAAnB;AAEA,OAAO,MAAMC,aAAN,CAAoB;AAGY,eAAjBC,iBAAiB,CAACC,SAAD,EAAsB;AACzD,UAAMC,aAAa,GAAG,MAAMX,sBAAsB,CAACY,qBAAvB,CAA6CF,SAA7C,CAA5B;AACA,UAAM,KAAKG,IAAL,CAAUF,aAAV,CAAN;AAEA,WAAOA,aAAP;AACD;;AAE+B,eAAZG,YAAY,CAACC,SAAD,EAAsB;AACpD,WAAOd,mBAAmB,CAACa,YAApB,CAAiCC,SAAjC,CAAP;AACD;;AAEuB,eAAJC,IAAI,GAAG;AACzB,UAAMC,MAAM,GAAGd,YAAY,CAACI,MAAM,CAACW,OAAP,CAAe,KAAKC,QAApB,CAAD,EAAgC;AAAEC,MAAAA,QAAQ,EAAE;AAAZ,KAAhC,CAA3B;AACA,WAAOC,IAAI,CAACC,KAAL,CAAWL,MAAX,CAAP;AACD;;AAEwB,eAAJJ,IAAI,CAACF,aAAD,EAAgB;AACvC,UAAMM,MAAM,GAAI,GAAEI,IAAI,CAACE,SAAL,CAAe;AAAEC,MAAAA,IAAI,EAAEb;AAAR,KAAf,EAAwC,IAAxC,EAA8C,CAA9C,CAAiD,IAAnE;AACAP,IAAAA,aAAa,CAACG,MAAM,CAACW,OAAP,CAAe,KAAKC,QAApB,CAAD,EAAgCF,MAAhC,EAAwC;AAAEG,MAAAA,QAAQ,EAAE;AAAZ,KAAxC,CAAb;AACA,UAAMlB,KAAK,CAAC,GAAD,CAAX,CAHuC,CAGrB;AACnB;;AAE+B,SAAlBuB,kBAAkB,CAACC,UAAD,EAAuBC,QAAQ,GAAG,EAAlC,EAAsC;AACpE,SAAK,MAAM,CAACC,OAAD,EAAUC,IAAV,CAAX,IAA8BC,MAAM,CAACC,OAAP,CAAeL,UAAf,CAA9B,EAA0D;AACxD,UAAI3B,WAAW,CAACiC,MAAZ,CAAmBJ,OAAnB,CAAJ,EAAiC;;AAEjC,UAAI7B,WAAW,CAACkC,kBAAZ,CAA+BL,OAA/B,CAAJ,EAA6C;AAC3C,cAAM;AAAEM,UAAAA,IAAF;AAAQC,UAAAA;AAAR,YAA2BN,IAAI,CAACO,IAAtC;AACA/B,QAAAA,GAAG,CAACsB,QAAD,EAAY,GAAEO,IAAK,EAAnB,EAAsBC,cAAtB,CAAH;AACD;;AAED,UAAIrC,QAAQ,CAACuC,WAAT,CAAqBR,IAArB,CAAJ,EAAgC;AAC9B,aAAKJ,kBAAL,CAAwBI,IAAxB,EAA8BF,QAA9B;AACD;AACF;;AAED,WAAOA,QAAP;AACD;;AAEkB,SAAZW,YAAY,CAAC3B,aAAD,EAAgB4B,OAAhB,EAAyB;AAC1C,WAAOjC,GAAG,CAACK,aAAD,EAAgB4B,OAAO,CAACC,OAAR,CAAgB,MAAhB,EAAwB,EAAxB,EAA4BC,KAA5B,CAAkC,GAAlC,EAAuCC,IAAvC,CAA4C,GAA5C,CAAhB,CAAV;AACD;;AA5CwB;;gBAAdlC,a,cACe,0B","sourcesContent":["import { MenuNode } from '@/tools/menu/menu-node';\r\nimport { MenuSegment } from '@/tools/menu/menu-segment';\r\nimport { MenuStructureGenerator } from '@/tools/menu/menu-structure-generator';\r\nimport { MenuStructureParser } from '@/tools/menu/menu-structure-parser';\r\nimport { sleep } from '@/tools/utils';\r\nimport { readFileSync, writeFileSync } from 'fs';\r\nimport { set, get } from 'lodash';\r\nimport fsPath from 'path';\r\n\r\nexport class MenuStructure {\r\n  private static saveFile = 'core/menu-structure.json';\r\n\r\n  public static async generateFromFiles(filePaths: string[]) {\r\n    const menuStructure = await MenuStructureGenerator.generateMenuStructure(filePaths);\r\n    await this.save(menuStructure);\r\n\r\n    return menuStructure;\r\n  }\r\n\r\n  public static async getFileMetas(structure: MenuNode) {\r\n    return MenuStructureParser.getFileMetas(structure);\r\n  }\r\n\r\n  public static async load() {\r\n    const asJson = readFileSync(fsPath.resolve(this.saveFile), { encoding: 'utf8' });\r\n    return JSON.parse(asJson);\r\n  }\r\n\r\n  private static async save(menuStructure) {\r\n    const asJson = `${JSON.stringify({ docs: menuStructure }, null, 2)}\\n`;\r\n    writeFileSync(fsPath.resolve(this.saveFile), asJson, { encoding: 'utf8' });\r\n    await sleep(250); // Allow for windows filesystem to catch up.\r\n  }\r\n\r\n  public static getCurrentVersions(collection: MenuNode, sections = {}) {\r\n    for (const [segment, node] of Object.entries(collection)) {\r\n      if (MenuSegment.isMeta(segment)) continue;\r\n\r\n      if (MenuSegment.isVersionContainer(segment)) {\r\n        const { path, currentVersion } = node.meta;\r\n        set(sections, `${path}`, currentVersion);\r\n      }\r\n\r\n      if (MenuNode.hasChildren(node)) {\r\n        this.getCurrentVersions(node, sections);\r\n      }\r\n    }\r\n\r\n    return sections;\r\n  }\r\n\r\n  static getNodeByUrl(menuStructure, urlPath) {\r\n    return get(menuStructure, urlPath.replace(/^\\/+/, '').split('/').join('.'));\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}