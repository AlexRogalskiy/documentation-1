{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Mark\\\\Documents\\\\documentation\\\\components\\\\markdown\\\\components\\\\anchor-item.tsx\",\n    _this = this;\n\nimport React from 'react';\nimport { Anchor } from 'antd';\nimport { extractAnchorId } from '@/tools/search/utils/extract-sections';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar Link = Anchor.Link;\n\nvar AnchorItem = function AnchorItem(_ref) {\n  var level = _ref.level,\n      children = _ref.children;\n\n  if (level >= 6) {\n    return null;\n  }\n\n  var value = React.Children.toArray(children)[0];\n  var anchorId = extractAnchorId(value); // styles\n\n  var paddingLeft = level * 8 - 8;\n  var fontSize = \"\".concat(120 - level * 10, \"%\");\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      paddingLeft: paddingLeft,\n      fontSize: fontSize\n    },\n    children: /*#__PURE__*/_jsxDEV(Link, {\n      href: \"#\".concat(anchorId),\n      title: value\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, _this);\n};\n\n_c = AnchorItem;\nexport default AnchorItem;\n\nvar _c;\n\n$RefreshReg$(_c, \"AnchorItem\");","map":{"version":3,"sources":["C:/Users/Mark/Documents/documentation/components/markdown/components/anchor-item.tsx"],"names":["React","Anchor","extractAnchorId","Link","AnchorItem","level","children","value","Children","toArray","anchorId","paddingLeft","fontSize"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAASC,MAAT,QAAuB,MAAvB;AACA,SAASC,eAAT,QAAgC,uCAAhC;;IAEQC,I,GAASF,M,CAATE,I;;AAOR,IAAMC,UAAU,GAAG,SAAbA,UAAa,OAAgC;AAAA,MAA7BC,KAA6B,QAA7BA,KAA6B;AAAA,MAAtBC,QAAsB,QAAtBA,QAAsB;;AACjD,MAAID,KAAK,IAAI,CAAb,EAAgB;AACd,WAAO,IAAP;AACD;;AAED,MAAME,KAAK,GAAGP,KAAK,CAACQ,QAAN,CAAeC,OAAf,CAAuBH,QAAvB,EAAiC,CAAjC,CAAd;AACA,MAAMI,QAAQ,GAAGR,eAAe,CAACK,KAAD,CAAhC,CANiD,CAQjD;;AACA,MAAMI,WAAW,GAAGN,KAAK,GAAG,CAAR,GAAY,CAAhC;AACA,MAAMO,QAAQ,aAAM,MAAMP,KAAK,GAAG,EAApB,MAAd;AAEA,sBACE;AAAK,IAAA,KAAK,EAAE;AAAEM,MAAAA,WAAW,EAAXA,WAAF;AAAeC,MAAAA,QAAQ,EAARA;AAAf,KAAZ;AAAA,2BACE,QAAC,IAAD;AAAM,MAAA,IAAI,aAAMF,QAAN,CAAV;AAA4B,MAAA,KAAK,EAAEH;AAAnC;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,WADF;AAKD,CAjBD;;KAAMH,U;AAmBN,eAAeA,UAAf","sourcesContent":["import React from 'react';\r\nimport { ReactNodeLike } from 'prop-types';\r\nimport { Anchor } from 'antd';\r\nimport { extractAnchorId } from '@/tools/search/utils/extract-sections';\r\n\r\nconst { Link } = Anchor;\r\n\r\ninterface Props {\r\n  level: number;\r\n  children: ReactNodeLike;\r\n}\r\n\r\nconst AnchorItem = ({ level, children }: Props) => {\r\n  if (level >= 6) {\r\n    return null;\r\n  }\r\n\r\n  const value = React.Children.toArray(children)[0];\r\n  const anchorId = extractAnchorId(value);\r\n\r\n  // styles\r\n  const paddingLeft = level * 8 - 8;\r\n  const fontSize = `${120 - level * 10}%`;\r\n\r\n  return (\r\n    <div style={{ paddingLeft, fontSize }}>\r\n      <Link href={`#${anchorId}`} title={value} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AnchorItem;\r\n"]},"metadata":{},"sourceType":"module"}