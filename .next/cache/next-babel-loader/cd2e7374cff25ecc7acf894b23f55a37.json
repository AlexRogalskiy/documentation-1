{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { MenuStructure } from '@/tools/menu/menu-structure';\nimport { createSlice } from '@reduxjs/toolkit';\nimport menuStructure from '@/core/menu-structure.json';\nexport var selectedVersionSlice = createSlice({\n  name: 'version',\n  initialState: _objectSpread({}, MenuStructure.getCurrentVersions(menuStructure)),\n  reducers: {\n    updateSelection: function updateSelection(state, action) {\n      var _action$payload = action.payload,\n          section = _action$payload.section,\n          selection = _action$payload.selection;\n      state[section] = selection;\n    }\n  }\n});\nexport var selectedVersionsSelector = function selectedVersionsSelector(state) {\n  return state.versions.selected;\n};\nvar updateSelection = selectedVersionSlice.actions.updateSelection;\nexport { updateSelection };","map":null,"metadata":{},"sourceType":"module"}