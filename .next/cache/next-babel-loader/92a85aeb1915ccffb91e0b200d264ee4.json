{"ast":null,"code":"import { cloneDeep } from 'lodash';\n\nconst determineLevel = line => {\n  for (let level = 0; level <= 5; level += 1) {\n    const char = line[level];\n\n    if (char !== '#') {\n      return level;\n    }\n  }\n\n  return null;\n};\n\nconst extractTitle = line => {\n  if (!line) {\n    // eslint-disable-next-line no-console\n    console.log('\\u001B[33m%s\\u001B[0m  - %s', 'warn', 'Unable to extract title from', line);\n    return '';\n  }\n\n  if (typeof line !== 'string') {\n    // eslint-disable-next-line no-console\n    console.error(`Expected heading to consist of a string. That way we can easily use them as anchors.\n      The following does not adhere to this rule: \"${JSON.stringify(line, null, 2)}\"`);\n  }\n\n  return line.replace(/^[\\s#]*/, '').trim();\n};\n\nexport const extractAnchorId = line => {\n  return extractTitle(line).toLowerCase().split(' ').join('-');\n};\n\nconst forceSingleLine = content => {\n  // One space for each newline\n  return content.replace(/\\n/, ' ');\n};\n\nconst extractSummary = (rawContent, maxLength = 100) => {\n  const content = forceSingleLine(rawContent);\n\n  if (content.length <= maxLength) {\n    return content;\n  }\n\n  return `${content.slice(0, Math.min(content.length, maxLength - 3))}...`;\n};\n\nconst isHeading = line => {\n  return line.startsWith('#');\n};\n\nconst parseLine = line => {\n  return line;\n};\n\nconst finalisePreviousSection = section => {\n  const content = section.content.trimLeft('\\n').trimRight('\\n');\n  const finalisedSection = cloneDeep(section);\n  finalisedSection.content = content || '(empty)';\n  finalisedSection.summary = extractSummary(content);\n  return finalisedSection;\n};\n\nconst createSectionCreator = meta => {\n  return line => {\n    const {\n      path,\n      version\n    } = meta;\n    return {\n      title: extractTitle(line),\n      level: determineLevel(line),\n      path,\n      version,\n      anchorId: extractAnchorId(line),\n      content: ''\n    };\n  };\n};\n\nexport default function extractSections(meta, contents) {\n  const createNewSectionFromLine = createSectionCreator(meta);\n  const lines = contents.split('\\n');\n  const sections = [];\n  let section;\n  let skippedLines = 0;\n\n  for (const line of lines) {\n    if (isHeading(line)) {\n      if (section) {\n        sections.push(finalisePreviousSection(section));\n      }\n\n      section = createNewSectionFromLine(line);\n      continue;\n    }\n\n    if (section) {\n      section.content += `\\n${parseLine(line)}`;\n      continue;\n    }\n\n    skippedLines += 1;\n  }\n\n  if (section) {\n    sections.push(finalisePreviousSection(section));\n  }\n\n  if (skippedLines >= 1) {\n    // eslint-disable-next-line no-console\n    console.log(`Skipped ${skippedLines} lines that occurred before any title`);\n  }\n\n  return sections;\n}","map":{"version":3,"sources":["C:/Users/Mark/Documents/documentation/tools/search/utils/extract-sections.ts"],"names":["cloneDeep","determineLevel","line","level","char","extractTitle","console","log","error","JSON","stringify","replace","trim","extractAnchorId","toLowerCase","split","join","forceSingleLine","content","extractSummary","rawContent","maxLength","length","slice","Math","min","isHeading","startsWith","parseLine","finalisePreviousSection","section","trimLeft","trimRight","finalisedSection","summary","createSectionCreator","meta","path","version","title","anchorId","extractSections","contents","createNewSectionFromLine","lines","sections","skippedLines","push"],"mappings":"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","sourcesContent":["import { cloneDeep } from 'lodash';\r\n\r\nconst determineLevel = (line) => {\r\n  for (let level = 0; level <= 5; level += 1) {\r\n    const char = line[level];\r\n    if (char !== '#') {\r\n      return level;\r\n    }\r\n  }\r\n\r\n  return null;\r\n};\r\n\r\nconst extractTitle = (line) => {\r\n  if (!line) {\r\n    // eslint-disable-next-line no-console\r\n    console.log('\\u001B[33m%s\\u001B[0m  - %s', 'warn', 'Unable to extract title from', line);\r\n    return '';\r\n  }\r\n\r\n  if (typeof line !== 'string') {\r\n    // eslint-disable-next-line no-console\r\n    console.error(\r\n      `Expected heading to consist of a string. That way we can easily use them as anchors.\r\n      The following does not adhere to this rule: \"${JSON.stringify(line, null, 2)}\"`,\r\n    );\r\n  }\r\n\r\n  return line.replace(/^[\\s#]*/, '').trim();\r\n};\r\n\r\nexport const extractAnchorId = (line) => {\r\n  return extractTitle(line).toLowerCase().split(' ').join('-');\r\n};\r\n\r\nconst forceSingleLine = (content) => {\r\n  // One space for each newline\r\n  return content.replace(/\\n/, ' ');\r\n};\r\n\r\nconst extractSummary = (rawContent, maxLength = 100) => {\r\n  const content = forceSingleLine(rawContent);\r\n\r\n  if (content.length <= maxLength) {\r\n    return content;\r\n  }\r\n\r\n  return `${content.slice(0, Math.min(content.length, maxLength - 3))}...`;\r\n};\r\n\r\nconst isHeading = (line) => {\r\n  return line.startsWith('#');\r\n};\r\n\r\nconst parseLine = (line) => {\r\n  return line;\r\n};\r\n\r\nconst finalisePreviousSection = (section) => {\r\n  const content = section.content.trimLeft('\\n').trimRight('\\n');\r\n\r\n  const finalisedSection = cloneDeep(section);\r\n  finalisedSection.content = content || '(empty)';\r\n  finalisedSection.summary = extractSummary(content);\r\n\r\n  return finalisedSection;\r\n};\r\n\r\nconst createSectionCreator = (meta) => {\r\n  return (line) => {\r\n    const { path, version } = meta;\r\n\r\n    return {\r\n      title: extractTitle(line),\r\n      level: determineLevel(line),\r\n      path,\r\n      version,\r\n      anchorId: extractAnchorId(line),\r\n      content: '',\r\n    };\r\n  };\r\n};\r\n\r\nexport default function extractSections(meta, contents) {\r\n  const createNewSectionFromLine = createSectionCreator(meta);\r\n  const lines = contents.split('\\n');\r\n  const sections = [];\r\n\r\n  let section;\r\n  let skippedLines = 0;\r\n  for (const line of lines) {\r\n    if (isHeading(line)) {\r\n      if (section) {\r\n        sections.push(finalisePreviousSection(section));\r\n      }\r\n\r\n      section = createNewSectionFromLine(line);\r\n      continue;\r\n    }\r\n\r\n    if (section) {\r\n      section.content += `\\n${parseLine(line)}`;\r\n      continue;\r\n    }\r\n\r\n    skippedLines += 1;\r\n  }\r\n\r\n  if (section) {\r\n    sections.push(finalisePreviousSection(section));\r\n  }\r\n\r\n  if (skippedLines >= 1) {\r\n    // eslint-disable-next-line no-console\r\n    console.log(`Skipped ${skippedLines} lines that occurred before any title`);\r\n  }\r\n\r\n  return sections;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}