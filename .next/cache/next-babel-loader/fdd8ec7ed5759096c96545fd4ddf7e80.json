{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Mark\\\\Documents\\\\documentation\\\\components\\\\pages\\\\docs\\\\menu\\\\versioned-sub-menu.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { MenuNode } from '@/tools/menu/menu-node';\nimport { MenuSegment } from '@/tools/menu/menu-segment';\nimport React, { useContext } from 'react';\nimport { Menu } from 'antd';\nimport { map } from 'lodash';\nimport Link from 'next/link';\nimport VersionedTitle from '@/components/pages/docs/menu/versioned-title';\nimport MenuContext from '@/components/pages/docs/menu/menu-context';\nimport { useSelector } from 'react-redux';\nimport { selectedVersionsSelector } from '@/logic/versions/selected-version-slice';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  SubMenu,\n  Item\n} = Menu;\n\nconst populateMenuRecursively = (collection, selections) => {\n  // Todo sorting by item.meta.order\n  return map(Object.entries(collection), ([segment, node]) => {\n    if (MenuSegment.isMeta(segment)) {\n      return null;\n    }\n\n    if (MenuNode.isPage(node)) {\n      return /*#__PURE__*/_jsxDEV(Item, {\n        children: /*#__PURE__*/_jsxDEV(Link, {\n          href: \"/docs/[...documentation-page]\",\n          as: `/docs/${node.meta.path}`,\n          children: /*#__PURE__*/_jsxDEV(\"a\", {\n            children: node.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 26,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 11\n        }, this)\n      }, `/docs/${node.meta.path}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 9\n      }, this);\n    }\n\n    if (MenuSegment.isVersionContainer(segment)) {\n      const {\n        meta\n      } = node,\n            versions = _objectWithoutProperties(node, [\"meta\"]);\n\n      const selectedVersion = selections[meta.path];\n      return map(Object.entries(versions), ([versionSegment, versionNode]) => {\n        // Todo - take hardcoded selected version from globally selected version for meta.section\n        return versionSegment === selectedVersion ? populateMenuRecursively(versionNode, selections) : [];\n      });\n    } // container with menu items\n\n\n    return /*#__PURE__*/_jsxDEV(SubMenu, {\n      title: MenuSegment.toTitle(segment),\n      children: populateMenuRecursively(node, selections)\n    }, node.meta.path, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this);\n  });\n};\n\nconst VersionedSubMenu = (_ref) => {\n  let {\n    section,\n    title,\n    icon,\n    children\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"section\", \"title\", \"icon\", \"children\"]);\n\n  const selectedVersions = useSelector(selectedVersionsSelector);\n  const {\n    menuStructure\n  } = useContext(MenuContext);\n  const {\n    docs\n  } = menuStructure;\n  return /*#__PURE__*/_jsxDEV(SubMenu, _objectSpread(_objectSpread({}, props), {}, {\n    icon: icon,\n    title: /*#__PURE__*/_jsxDEV(VersionedTitle, {\n      section: section,\n      title: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 44\n    }, this),\n    children: [populateMenuRecursively(docs[section], selectedVersions), children]\n  }), void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n};\n\nVersionedSubMenu.defaultProps = {\n  children: null\n};\nexport default VersionedSubMenu;","map":{"version":3,"sources":["C:/Users/Mark/Documents/documentation/components/pages/docs/menu/versioned-sub-menu.tsx"],"names":["MenuNode","MenuSegment","React","useContext","Menu","map","Link","VersionedTitle","MenuContext","useSelector","selectedVersionsSelector","SubMenu","Item","populateMenuRecursively","collection","selections","Object","entries","segment","node","isMeta","isPage","meta","path","name","isVersionContainer","versions","selectedVersion","versionSegment","versionNode","toTitle","VersionedSubMenu","section","title","icon","children","props","selectedVersions","menuStructure","docs","defaultProps"],"mappings":"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","sourcesContent":["import { MenuNode } from '@/tools/menu/menu-node';\r\nimport { MenuSegment } from '@/tools/menu/menu-segment';\r\nimport React, { useContext } from 'react';\r\nimport { Menu } from 'antd';\r\nimport { map } from 'lodash';\r\nimport Link from 'next/link';\r\nimport VersionedTitle from '@/components/pages/docs/menu/versioned-title';\r\nimport MenuContext from '@/components/pages/docs/menu/menu-context';\r\nimport { ReactNodeLike } from 'prop-types';\r\nimport { useSelector } from 'react-redux';\r\nimport { selectedVersionsSelector } from '@/logic/versions/selected-version-slice';\r\n\r\nconst { SubMenu, Item } = Menu;\r\n\r\nconst populateMenuRecursively = (collection: MenuNode, selections) => {\r\n  // Todo sorting by item.meta.order\r\n  return map(Object.entries(collection), ([segment, node]) => {\r\n    if (MenuSegment.isMeta(segment)) {\r\n      return null;\r\n    }\r\n\r\n    if (MenuNode.isPage(node)) {\r\n      return (\r\n        <Item key={`/docs/${node.meta.path}`}>\r\n          <Link href=\"/docs/[...documentation-page]\" as={`/docs/${node.meta.path}`}>\r\n            <a>{node.name}</a>\r\n          </Link>\r\n        </Item>\r\n      );\r\n    }\r\n\r\n    if (MenuSegment.isVersionContainer(segment)) {\r\n      const { meta, ...versions } = node;\r\n      const selectedVersion = selections[meta.path];\r\n      return map(Object.entries(versions), ([versionSegment, versionNode]) => {\r\n        // Todo - take hardcoded selected version from globally selected version for meta.section\r\n        return versionSegment === selectedVersion\r\n          ? populateMenuRecursively(versionNode, selections)\r\n          : [];\r\n      });\r\n    }\r\n\r\n    // container with menu items\r\n    return (\r\n      <SubMenu key={node.meta.path} title={MenuSegment.toTitle(segment)}>\r\n        {populateMenuRecursively(node, selections)}\r\n      </SubMenu>\r\n    );\r\n  });\r\n};\r\n\r\ninterface Props {\r\n  section: string;\r\n  title: ReactNodeLike;\r\n  icon: ReactNodeLike;\r\n  children?: ReactNodeLike;\r\n}\r\nconst VersionedSubMenu = ({ section, title, icon, children, ...props }: Props) => {\r\n  const selectedVersions = useSelector(selectedVersionsSelector);\r\n  const { menuStructure } = useContext(MenuContext);\r\n  const { docs } = menuStructure;\r\n\r\n  return (\r\n    <SubMenu {...props} icon={icon} title={<VersionedTitle section={section} title={title} />}>\r\n      {populateMenuRecursively(docs[section], selectedVersions)}\r\n      {children}\r\n    </SubMenu>\r\n  );\r\n};\r\n\r\nVersionedSubMenu.defaultProps = {\r\n  children: null,\r\n};\r\n\r\nexport default VersionedSubMenu;\r\n"]},"metadata":{},"sourceType":"module"}