{"ast":null,"code":"function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport { cloneDeep } from 'lodash';\n\nvar determineLevel = function determineLevel(line) {\n  for (var level = 0; level <= 5; level += 1) {\n    var _char = line[level];\n\n    if (_char !== '#') {\n      return level;\n    }\n  }\n\n  return null;\n};\n\nvar extractTitle = function extractTitle(line) {\n  if (!line) {\n    // eslint-disable-next-line no-console\n    console.log(\"\\x1B[33m%s\\x1B[0m  - %s\", 'warn', 'Unable to extract title from', line);\n    return '';\n  }\n\n  if (typeof line !== 'string') {\n    // eslint-disable-next-line no-console\n    console.error(\"Expected heading to consist of a string. That way we can easily use them as anchors.\\n      The following does not adhere to this rule: \\\"\".concat(JSON.stringify(line, null, 2), \"\\\"\"));\n  }\n\n  return line.replace(/^[\\s#]*/, '').trim();\n};\n\nexport var extractAnchorId = function extractAnchorId(line) {\n  return extractTitle(line).toLowerCase().split(' ').join('-');\n};\n\nvar forceSingleLine = function forceSingleLine(content) {\n  // One space for each newline\n  return content.replace(/\\n/, ' ');\n};\n\nvar extractSummary = function extractSummary(rawContent) {\n  var maxLength = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 100;\n  var content = forceSingleLine(rawContent);\n\n  if (content.length <= maxLength) {\n    return content;\n  }\n\n  return \"\".concat(content.slice(0, Math.min(content.length, maxLength - 3)), \"...\");\n};\n\nvar isHeading = function isHeading(line) {\n  return line.startsWith('#');\n};\n\nvar parseLine = function parseLine(line) {\n  return line;\n};\n\nvar finalisePreviousSection = function finalisePreviousSection(section) {\n  var content = section.content.trimLeft('\\n').trimRight('\\n');\n  var finalisedSection = cloneDeep(section);\n  finalisedSection.content = content || '(empty)';\n  finalisedSection.summary = extractSummary(content);\n  return finalisedSection;\n};\n\nvar createSectionCreator = function createSectionCreator(meta) {\n  return function (line) {\n    var path = meta.path,\n        version = meta.version;\n    return {\n      title: extractTitle(line),\n      level: determineLevel(line),\n      path: path,\n      version: version,\n      anchorId: extractAnchorId(line),\n      content: ''\n    };\n  };\n};\n\nexport default function extractSections(meta, contents) {\n  var createNewSectionFromLine = createSectionCreator(meta);\n  var lines = contents.split('\\n');\n  var sections = [];\n  var section;\n  var skippedLines = 0;\n\n  var _iterator = _createForOfIteratorHelper(lines),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var line = _step.value;\n\n      if (isHeading(line)) {\n        if (section) {\n          sections.push(finalisePreviousSection(section));\n        }\n\n        section = createNewSectionFromLine(line);\n        continue;\n      }\n\n      if (section) {\n        section.content += \"\\n\".concat(parseLine(line));\n        continue;\n      }\n\n      skippedLines += 1;\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  if (section) {\n    sections.push(finalisePreviousSection(section));\n  }\n\n  if (skippedLines >= 1) {\n    // eslint-disable-next-line no-console\n    console.log(\"Skipped \".concat(skippedLines, \" lines that occurred before any title\"));\n  }\n\n  return sections;\n}","map":{"version":3,"sources":["C:/Users/Mark/Documents/documentation/tools/search/utils/extract-sections.ts"],"names":["cloneDeep","determineLevel","line","level","char","extractTitle","console","log","error","JSON","stringify","replace","trim","extractAnchorId","toLowerCase","split","join","forceSingleLine","content","extractSummary","rawContent","maxLength","length","slice","Math","min","isHeading","startsWith","parseLine","finalisePreviousSection","section","trimLeft","trimRight","finalisedSection","summary","createSectionCreator","meta","path","version","title","anchorId","extractSections","contents","createNewSectionFromLine","lines","sections","skippedLines","push"],"mappings":"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","sourcesContent":["import { cloneDeep } from 'lodash';\r\n\r\nconst determineLevel = (line) => {\r\n  for (let level = 0; level <= 5; level += 1) {\r\n    const char = line[level];\r\n    if (char !== '#') {\r\n      return level;\r\n    }\r\n  }\r\n\r\n  return null;\r\n};\r\n\r\nconst extractTitle = (line) => {\r\n  if (!line) {\r\n    // eslint-disable-next-line no-console\r\n    console.log('\\u001B[33m%s\\u001B[0m  - %s', 'warn', 'Unable to extract title from', line);\r\n    return '';\r\n  }\r\n\r\n  if (typeof line !== 'string') {\r\n    // eslint-disable-next-line no-console\r\n    console.error(\r\n      `Expected heading to consist of a string. That way we can easily use them as anchors.\r\n      The following does not adhere to this rule: \"${JSON.stringify(line, null, 2)}\"`,\r\n    );\r\n  }\r\n\r\n  return line.replace(/^[\\s#]*/, '').trim();\r\n};\r\n\r\nexport const extractAnchorId = (line) => {\r\n  return extractTitle(line).toLowerCase().split(' ').join('-');\r\n};\r\n\r\nconst forceSingleLine = (content) => {\r\n  // One space for each newline\r\n  return content.replace(/\\n/, ' ');\r\n};\r\n\r\nconst extractSummary = (rawContent, maxLength = 100) => {\r\n  const content = forceSingleLine(rawContent);\r\n\r\n  if (content.length <= maxLength) {\r\n    return content;\r\n  }\r\n\r\n  return `${content.slice(0, Math.min(content.length, maxLength - 3))}...`;\r\n};\r\n\r\nconst isHeading = (line) => {\r\n  return line.startsWith('#');\r\n};\r\n\r\nconst parseLine = (line) => {\r\n  return line;\r\n};\r\n\r\nconst finalisePreviousSection = (section) => {\r\n  const content = section.content.trimLeft('\\n').trimRight('\\n');\r\n\r\n  const finalisedSection = cloneDeep(section);\r\n  finalisedSection.content = content || '(empty)';\r\n  finalisedSection.summary = extractSummary(content);\r\n\r\n  return finalisedSection;\r\n};\r\n\r\nconst createSectionCreator = (meta) => {\r\n  return (line) => {\r\n    const { path, version } = meta;\r\n\r\n    return {\r\n      title: extractTitle(line),\r\n      level: determineLevel(line),\r\n      path,\r\n      version,\r\n      anchorId: extractAnchorId(line),\r\n      content: '',\r\n    };\r\n  };\r\n};\r\n\r\nexport default function extractSections(meta, contents) {\r\n  const createNewSectionFromLine = createSectionCreator(meta);\r\n  const lines = contents.split('\\n');\r\n  const sections = [];\r\n\r\n  let section;\r\n  let skippedLines = 0;\r\n  for (const line of lines) {\r\n    if (isHeading(line)) {\r\n      if (section) {\r\n        sections.push(finalisePreviousSection(section));\r\n      }\r\n\r\n      section = createNewSectionFromLine(line);\r\n      continue;\r\n    }\r\n\r\n    if (section) {\r\n      section.content += `\\n${parseLine(line)}`;\r\n      continue;\r\n    }\r\n\r\n    skippedLines += 1;\r\n  }\r\n\r\n  if (section) {\r\n    sections.push(finalisePreviousSection(section));\r\n  }\r\n\r\n  if (skippedLines >= 1) {\r\n    // eslint-disable-next-line no-console\r\n    console.log(`Skipped ${skippedLines} lines that occurred before any title`);\r\n  }\r\n\r\n  return sections;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}