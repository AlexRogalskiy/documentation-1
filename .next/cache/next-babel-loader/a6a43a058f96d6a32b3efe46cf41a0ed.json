{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport BuildFailureDetails from '@/components/docs/versions/build-failure-details';\nimport DockerImageLinkOrRetryButton from '@/components/docs/versions/docker-image-link-or-retry-button';\nimport Spinner from '@/components/reusable/spinner';\nimport React from 'react';\nimport { useFirestore, useFirestoreCollectionData } from 'reactfire';\nimport { Table, Tooltip } from 'antd';\nimport styles from './builds.module.scss';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { createElement as _createElement } from \"react\";\nconst mapBuildStatusToIcon = {\n  started: /*#__PURE__*/_jsx(Spinner, {\n    type: \"slow\"\n  }),\n  failed: '⚠',\n  published: '✅'\n};\n\nconst Builds = (_ref) => {\n  let {\n    ciJobId,\n    repoVersionInfo,\n    editorVersionInfo\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"ciJobId\", \"repoVersionInfo\", \"editorVersionInfo\"]);\n\n  const loading = /*#__PURE__*/_jsx(\"p\", {\n    children: \"Fetching builds...\"\n  });\n\n  const ciBuilds = useFirestore().collection('ciBuilds').where('relatedJobId', '==', ciJobId);\n  const {\n    status,\n    data\n  } = useFirestoreCollectionData(ciBuilds);\n  const isLoading = status === 'loading';\n\n  if (isLoading) {\n    return loading;\n  }\n\n  const columns = [{\n    width: 45,\n    dataIndex: 'status',\n    key: 'status',\n    render: (value, record) => {\n      var _record$failure;\n\n      const icon = mapBuildStatusToIcon[value];\n\n      switch (value) {\n        case 'published':\n          return icon;\n\n        case 'failed':\n          return /*#__PURE__*/_jsx(Tooltip, {\n            title: (_record$failure = record.failure) === null || _record$failure === void 0 ? void 0 : _record$failure.reason,\n            children: icon\n          });\n\n        case 'started':\n          return /*#__PURE__*/_jsx(Tooltip, {\n            title: \"Build has started\",\n            children: icon\n          });\n\n        default:\n          return value;\n      }\n    }\n  }, {\n    width: 45,\n    render: (value, record) => /*#__PURE__*/_jsx(DockerImageLinkOrRetryButton, {\n      record: record\n    }),\n    key: 'docker-image-link-or-retry-button'\n  }, {\n    title: 'Build identifier',\n    dataIndex: 'buildId',\n    key: 'buildId',\n    onFilter: (value, record) => record.buildId.includes(value),\n    defaultSortOrder: 'ascend',\n    sorter: (a, b) => a.buildId.localeCompare(b.buildId, 'en-GB'),\n    ellipsis: true\n  }, {\n    title: 'Image type',\n    dataIndex: 'imageType',\n    key: 'imageType',\n    onFilter: (value, record) => record.imageType.includes(value),\n    sorter: (a, b) => a.imageType.localeCompare(b.imageType, 'en-GB'),\n    ellipsis: true\n  }, {\n    title: 'OS',\n    dataIndex: ['buildInfo', 'baseOs'],\n    key: 'buildInfo.baseOs',\n    onFilter: (value, record) => record.buildInfo.baseOs.includes(value),\n    sorter: (a, b) => a.buildInfo.baseOs.localeCompare(b.buildInfo.baseOs, 'en-GB'),\n    ellipsis: true\n  }, {\n    title: 'Target platform',\n    dataIndex: ['buildInfo', 'targetPlatform'],\n    key: 'buildInfo.targetPlatform',\n    onFilter: (value, record) => record.buildInfo.targetPlatform.includes(value),\n    sorter: (a, b) => a.buildInfo.targetPlatform.localeCompare(b.buildInfo.targetPlatform, 'en-GB'),\n    ellipsis: true\n  }, {\n    title: 'Editor version',\n    dataIndex: ['buildInfo', 'editorVersion'],\n    key: 'buildInfo.editorVersion',\n    onFilter: (value, record) => record.buildInfo.editorVersion.includes(value),\n    sorter: (a, b) => a.buildInfo.editorVersion.localeCompare(b.buildInfo.editorVersion, 'en-GB'),\n    ellipsis: true\n  }, {\n    title: 'Repo version',\n    dataIndex: ['buildInfo', 'repoVersion'],\n    key: 'buildInfo.repoVersion',\n    onFilter: (value, record) => record.buildInfo.repoVersion.includes(value),\n    sorter: (a, b) => a.buildInfo.repoVersion.localeCompare(b.buildInfo.repoVersion, 'en-GB'),\n    ellipsis: true\n  }];\n  const expandable = {\n    rowExpandable: () => true,\n    expandedRowClassName: () => styles.expandedContentRow,\n    expandedRowRender: record => /*#__PURE__*/_jsx(BuildFailureDetails, {\n      style: {\n        margin: 0\n      },\n      ciJob: ciJobId,\n      editorVersionInfo: editorVersionInfo,\n      repoVersionInfo: repoVersionInfo,\n      ciBuild: record\n    })\n  };\n  return /*#__PURE__*/_createElement(Table, _objectSpread(_objectSpread({}, props), {}, {\n    key: ciJobId,\n    dataSource: data,\n    columns: columns,\n    sticky: true,\n    rowKey: row => row.NO_ID_FIELD,\n    rowClassName: () => styles.stickyRow,\n    expandable: expandable,\n    pagination: false\n  }));\n};\n\nexport default Builds;","map":null,"metadata":{},"sourceType":"module"}