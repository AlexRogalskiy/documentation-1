{"ast":null,"code":"import _toArray from \"@babel/runtime/helpers/esm/toArray\";\nexport var capitalizeFirstLetter = function capitalizeFirstLetter(_ref) {\n  var _ref2 = _toArray(_ref),\n      first = _ref2[0],\n      rest = _ref2.slice(1);\n\n  var locale = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'en';\n\n  try {\n    return first.toLocaleUpperCase(locale) + rest.join('');\n  } catch (_unused) {\n    return first.toLocaleUpperCase(locale) + rest;\n  }\n};\nexport var replaceAll = function replaceAll(input, searchValue, replaceValue) {\n  return input.split(searchValue).join(replaceValue);\n};\nexport var normaliseTitle = function normaliseTitle(rawFileName) {\n  var fileName = replaceAll(rawFileName, '-', ' '); // For now this is the only exception, this could be made smarter later\n\n  if (fileName === 'ios') {\n    return 'iOS';\n  }\n\n  return capitalizeFirstLetter(fileName);\n};","map":{"version":3,"sources":["C:/Users/Mark/Documents/documentation/tools/utils/string.ts"],"names":["capitalizeFirstLetter","first","rest","locale","toLocaleUpperCase","join","replaceAll","input","searchValue","replaceValue","split","normaliseTitle","rawFileName","fileName"],"mappings":";AAAA,OAAO,IAAMA,qBAAqB,GAAG,SAAxBA,qBAAwB,OAAqC;AAAA;AAAA,MAAnCC,KAAmC;AAAA,MAAzBC,IAAyB;;AAAA,MAAlBC,MAAkB,uEAAT,IAAS;;AACxE,MAAI;AACF,WAAOF,KAAK,CAACG,iBAAN,CAAwBD,MAAxB,IAAkCD,IAAI,CAACG,IAAL,CAAU,EAAV,CAAzC;AACD,GAFD,CAEE,gBAAM;AACN,WAAOJ,KAAK,CAACG,iBAAN,CAAwBD,MAAxB,IAAkCD,IAAzC;AACD;AACF,CANM;AAQP,OAAO,IAAMI,UAAU,GAAG,SAAbA,UAAa,CAACC,KAAD,EAAQC,WAAR,EAA6BC,YAA7B,EAAsD;AAC9E,SAAOF,KAAK,CAACG,KAAN,CAAYF,WAAZ,EAAyBH,IAAzB,CAA8BI,YAA9B,CAAP;AACD,CAFM;AAIP,OAAO,IAAME,cAAc,GAAG,SAAjBA,cAAiB,CAACC,WAAD,EAAiB;AAC7C,MAAMC,QAAQ,GAAGP,UAAU,CAACM,WAAD,EAAc,GAAd,EAAmB,GAAnB,CAA3B,CAD6C,CAG7C;;AACA,MAAIC,QAAQ,KAAK,KAAjB,EAAwB;AACtB,WAAO,KAAP;AACD;;AAED,SAAOb,qBAAqB,CAACa,QAAD,CAA5B;AACD,CATM","sourcesContent":["export const capitalizeFirstLetter = ([first, ...rest], locale = 'en') => {\r\n  try {\r\n    return first.toLocaleUpperCase(locale) + rest.join('');\r\n  } catch {\r\n    return first.toLocaleUpperCase(locale) + rest;\r\n  }\r\n};\r\n\r\nexport const replaceAll = (input, searchValue: string, replaceValue: string) => {\r\n  return input.split(searchValue).join(replaceValue);\r\n};\r\n\r\nexport const normaliseTitle = (rawFileName) => {\r\n  const fileName = replaceAll(rawFileName, '-', ' ');\r\n\r\n  // For now this is the only exception, this could be made smarter later\r\n  if (fileName === 'ios') {\r\n    return 'iOS';\r\n  }\r\n\r\n  return capitalizeFirstLetter(fileName);\r\n};\r\n"]},"metadata":{},"sourceType":"module"}