{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Mark\\\\Documents\\\\documentation\\\\components\\\\markdown\\\\components\\\\embedded-link-or-paragraph.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* eslint-disable react/prop-types */\nimport { Typography } from 'antd';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  Paragraph\n} = Typography;\n\nclass EmbeddedLink {\n  static fromChildren(children) {\n    if (children.length === 1) {\n      const potentialLink = children[0];\n\n      if (typeof potentialLink === 'string' && potentialLink.startsWith('https://')) {\n        return potentialLink;\n      }\n    }\n\n    return null;\n  }\n\n  static isYoutubeLink(link) {\n    // Starts with youtube\n    if (/^https:\\/\\/www\\.youtube(-nocookie)?\\.com/.test(link)) {\n      // Url as expected\n      if (!/^https:\\/\\/www\\.youtube-nocookie\\.com\\/embed\\/.+$/.test(link)) {\n        throw new Error(`Found youtube link, but it is malformed.\n        expected format: \"https://www.youtube-nocookie.com/embed/XXXXXXXXXX\"\n        but received: \"${link}\"`);\n      }\n\n      return true;\n    }\n\n    return false;\n  }\n\n}\n\nconst EmbeddedLinkOrParagraph = (_ref) => {\n  let {\n    node,\n    children\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"node\", \"children\"]);\n\n  const regularParagraph = /*#__PURE__*/_jsxDEV(Paragraph, _objectSpread(_objectSpread({}, props), {}, {\n    children: children\n  }), void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 28\n  }, this);\n\n  const link = EmbeddedLink.fromChildren(children);\n  if (!link) return regularParagraph;\n\n  if (EmbeddedLink.isYoutubeLink(link)) {\n    return /*#__PURE__*/_jsxDEV(\"iframe\", {\n      width: \"560\",\n      height: \"315\",\n      src: link,\n      title: \"YouTube video player\",\n      frameBorder: \"0\",\n      allow: \"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\",\n      allowFullScreen: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this);\n  }\n\n  return regularParagraph;\n};\n\nexport default EmbeddedLinkOrParagraph;","map":{"version":3,"sources":["C:/Users/Mark/Documents/documentation/components/markdown/components/embedded-link-or-paragraph.tsx"],"names":["Typography","Paragraph","EmbeddedLink","fromChildren","children","length","potentialLink","startsWith","isYoutubeLink","link","test","Error","EmbeddedLinkOrParagraph","node","props","regularParagraph"],"mappings":";;;;;;;;;;;;AAAA;AACA,SAASA,UAAT,QAA2B,MAA3B;;AAEA,MAAM;AAAEC,EAAAA;AAAF,IAAgBD,UAAtB;;AAEA,MAAME,YAAN,CAAmB;AACE,SAAZC,YAAY,CAACC,QAAD,EAAW;AAC5B,QAAIA,QAAQ,CAACC,MAAT,KAAoB,CAAxB,EAA2B;AACzB,YAAMC,aAAa,GAAGF,QAAQ,CAAC,CAAD,CAA9B;;AAEA,UAAI,OAAOE,aAAP,KAAyB,QAAzB,IAAqCA,aAAa,CAACC,UAAd,CAAyB,UAAzB,CAAzC,EAA+E;AAC7E,eAAOD,aAAP;AACD;AACF;;AAED,WAAO,IAAP;AACD;;AAEmB,SAAbE,aAAa,CAACC,IAAD,EAAe;AACjC;AACA,QAAI,2CAA2CC,IAA3C,CAAgDD,IAAhD,CAAJ,EAA2D;AACzD;AACA,UAAI,CAAC,oDAAoDC,IAApD,CAAyDD,IAAzD,CAAL,EAAqE;AACnE,cAAM,IAAIE,KAAJ,CACH;AACX;AACA,yBAAyBF,IAAK,GAHhB,CAAN;AAKD;;AAED,aAAO,IAAP;AACD;;AAED,WAAO,KAAP;AACD;;AA7BgB;;AAgCnB,MAAMG,uBAAuB,GAAG,UAAkC;AAAA,MAAjC;AAAEC,IAAAA,IAAF;AAAQT,IAAAA;AAAR,GAAiC;AAAA,MAAZU,KAAY;;AAChE,QAAMC,gBAAgB,gBAAG,QAAC,SAAD,kCAAeD,KAAf;AAAA,cAAuBV;AAAvB;AAAA;AAAA;AAAA;AAAA,UAAzB;;AAEA,QAAMK,IAAI,GAAGP,YAAY,CAACC,YAAb,CAA0BC,QAA1B,CAAb;AACA,MAAI,CAACK,IAAL,EAAW,OAAOM,gBAAP;;AAEX,MAAIb,YAAY,CAACM,aAAb,CAA2BC,IAA3B,CAAJ,EAAsC;AACpC,wBACE;AACE,MAAA,KAAK,EAAC,KADR;AAEE,MAAA,MAAM,EAAC,KAFT;AAGE,MAAA,GAAG,EAAEA,IAHP;AAIE,MAAA,KAAK,EAAC,sBAJR;AAKE,MAAA,WAAW,EAAC,GALd;AAME,MAAA,KAAK,EAAC,0FANR;AAOE,MAAA,eAAe;AAPjB;AAAA;AAAA;AAAA;AAAA,YADF;AAWD;;AAED,SAAOM,gBAAP;AACD,CArBD;;AAuBA,eAAeH,uBAAf","sourcesContent":["/* eslint-disable react/prop-types */\r\nimport { Typography } from 'antd';\r\n\r\nconst { Paragraph } = Typography;\r\n\r\nclass EmbeddedLink {\r\n  static fromChildren(children) {\r\n    if (children.length === 1) {\r\n      const potentialLink = children[0];\r\n\r\n      if (typeof potentialLink === 'string' && potentialLink.startsWith('https://')) {\r\n        return potentialLink;\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  static isYoutubeLink(link: string) {\r\n    // Starts with youtube\r\n    if (/^https:\\/\\/www\\.youtube(-nocookie)?\\.com/.test(link)) {\r\n      // Url as expected\r\n      if (!/^https:\\/\\/www\\.youtube-nocookie\\.com\\/embed\\/.+$/.test(link)) {\r\n        throw new Error(\r\n          `Found youtube link, but it is malformed.\r\n        expected format: \"https://www.youtube-nocookie.com/embed/XXXXXXXXXX\"\r\n        but received: \"${link}\"`,\r\n        );\r\n      }\r\n\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n}\r\n\r\nconst EmbeddedLinkOrParagraph = ({ node, children, ...props }) => {\r\n  const regularParagraph = <Paragraph {...props}>{children}</Paragraph>;\r\n\r\n  const link = EmbeddedLink.fromChildren(children);\r\n  if (!link) return regularParagraph;\r\n\r\n  if (EmbeddedLink.isYoutubeLink(link)) {\r\n    return (\r\n      <iframe\r\n        width=\"560\"\r\n        height=\"315\"\r\n        src={link}\r\n        title=\"YouTube video player\"\r\n        frameBorder=\"0\"\r\n        allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\r\n        allowFullScreen\r\n      />\r\n    );\r\n  }\r\n\r\n  return regularParagraph;\r\n};\r\n\r\nexport default EmbeddedLinkOrParagraph;\r\n"]},"metadata":{},"sourceType":"module"}