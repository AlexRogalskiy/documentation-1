{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* eslint-disable react/prop-types */\nimport { Typography } from 'antd';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst {\n  Paragraph\n} = Typography;\n\nclass EmbeddedLink {\n  static fromChildren(children) {\n    if (children.length === 1) {\n      const potentialLink = children[0];\n\n      if (typeof potentialLink === 'string' && potentialLink.startsWith('https://')) {\n        return potentialLink;\n      }\n    }\n\n    return null;\n  }\n\n  static isYoutubeLink(link) {\n    // Starts with youtube\n    if (/^https:\\/\\/www\\.youtube(-nocookie)?\\.com/.test(link)) {\n      // Url as expected\n      if (!/^https:\\/\\/www\\.youtube-nocookie\\.com\\/embed\\/.+$/.test(link)) {\n        throw new Error(`Found youtube link, but it is malformed.\n        expected format: \"https://www.youtube-nocookie.com/embed/XXXXXXXXXX\"\n        but received: \"${link}\"`);\n      }\n\n      return true;\n    }\n\n    return false;\n  }\n\n}\n\nconst EmbeddedLinkOrParagraph = (_ref) => {\n  let {\n    node,\n    children\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"node\", \"children\"]);\n\n  const regularParagraph = /*#__PURE__*/_jsx(Paragraph, _objectSpread(_objectSpread({}, props), {}, {\n    children: children\n  }));\n\n  const link = EmbeddedLink.fromChildren(children);\n  if (!link) return regularParagraph;\n\n  if (EmbeddedLink.isYoutubeLink(link)) {\n    return /*#__PURE__*/_jsx(\"iframe\", {\n      width: \"560\",\n      height: \"315\",\n      src: link,\n      title: \"YouTube video player\",\n      frameBorder: \"0\",\n      allow: \"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\",\n      allowFullScreen: true\n    });\n  }\n\n  return regularParagraph;\n};\n\nexport default EmbeddedLinkOrParagraph;","map":null,"metadata":{},"sourceType":"module"}