{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { MenuNode } from '@/tools/menu/menu-node';\nimport { MenuSegment } from '@/tools/menu/menu-segment';\nimport { MenuStructureGenerator } from '@/tools/menu/menu-structure-generator';\nimport { MenuStructureParser } from '@/tools/menu/menu-structure-parser';\nimport { sleep } from '@/tools/utils';\nimport { readFileSync, writeFileSync } from 'fs';\nimport { set, get } from 'lodash';\nimport fsPath from 'path';\nexport var MenuStructure = /*#__PURE__*/function () {\n  function MenuStructure() {\n    _classCallCheck(this, MenuStructure);\n  }\n\n  _createClass(MenuStructure, null, [{\n    key: \"generateFromFiles\",\n    value: function () {\n      var _generateFromFiles = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(filePaths) {\n        var menuStructure;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return MenuStructureGenerator.generateMenuStructure(filePaths);\n\n              case 2:\n                menuStructure = _context.sent;\n                _context.next = 5;\n                return this.save(menuStructure);\n\n              case 5:\n                return _context.abrupt(\"return\", menuStructure);\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function generateFromFiles(_x) {\n        return _generateFromFiles.apply(this, arguments);\n      }\n\n      return generateFromFiles;\n    }()\n  }, {\n    key: \"getFileMetas\",\n    value: function () {\n      var _getFileMetas = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(structure) {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                return _context2.abrupt(\"return\", MenuStructureParser.getFileMetas(structure));\n\n              case 1:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function getFileMetas(_x2) {\n        return _getFileMetas.apply(this, arguments);\n      }\n\n      return getFileMetas;\n    }()\n  }, {\n    key: \"load\",\n    value: function () {\n      var _load = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var asJson;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                asJson = readFileSync(fsPath.resolve(this.saveFile), {\n                  encoding: 'utf8'\n                });\n                return _context3.abrupt(\"return\", JSON.parse(asJson));\n\n              case 2:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function load() {\n        return _load.apply(this, arguments);\n      }\n\n      return load;\n    }()\n  }, {\n    key: \"save\",\n    value: function () {\n      var _save = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(menuStructure) {\n        var asJson;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                asJson = \"\".concat(JSON.stringify({\n                  docs: menuStructure\n                }, null, 2), \"\\n\");\n                writeFileSync(fsPath.resolve(this.saveFile), asJson, {\n                  encoding: 'utf8'\n                });\n                _context4.next = 4;\n                return sleep(250);\n\n              case 4:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function save(_x3) {\n        return _save.apply(this, arguments);\n      }\n\n      return save;\n    }()\n  }, {\n    key: \"getCurrentVersions\",\n    value: function getCurrentVersions(collection) {\n      var sections = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      for (var _i = 0, _Object$entries = Object.entries(collection); _i < _Object$entries.length; _i++) {\n        var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n            segment = _Object$entries$_i[0],\n            node = _Object$entries$_i[1];\n\n        if (MenuSegment.isMeta(segment)) continue;\n\n        if (MenuSegment.isVersionContainer(segment)) {\n          var _node$meta = node.meta,\n              path = _node$meta.path,\n              currentVersion = _node$meta.currentVersion;\n          set(sections, \"\".concat(path), currentVersion);\n        }\n\n        if (MenuNode.hasChildren(node)) {\n          this.getCurrentVersions(node, sections);\n        }\n      }\n\n      return sections;\n    }\n  }, {\n    key: \"getNodeByUrl\",\n    value: function getNodeByUrl(menuStructure, urlPath) {\n      return get(menuStructure, urlPath.replace(/^\\/+/, '').split('/').join('.'));\n    }\n  }]);\n\n  return MenuStructure;\n}();\n\n_defineProperty(MenuStructure, \"saveFile\", 'core/menu-structure.json');","map":{"version":3,"sources":["C:/Users/Mark/Documents/documentation/tools/menu/menu-structure.ts"],"names":["MenuNode","MenuSegment","MenuStructureGenerator","MenuStructureParser","sleep","readFileSync","writeFileSync","set","get","fsPath","MenuStructure","filePaths","generateMenuStructure","menuStructure","save","structure","getFileMetas","asJson","resolve","saveFile","encoding","JSON","parse","stringify","docs","collection","sections","Object","entries","segment","node","isMeta","isVersionContainer","meta","path","currentVersion","hasChildren","getCurrentVersions","urlPath","replace","split","join"],"mappings":"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","sourcesContent":["import { MenuNode } from '@/tools/menu/menu-node';\r\nimport { MenuSegment } from '@/tools/menu/menu-segment';\r\nimport { MenuStructureGenerator } from '@/tools/menu/menu-structure-generator';\r\nimport { MenuStructureParser } from '@/tools/menu/menu-structure-parser';\r\nimport { sleep } from '@/tools/utils';\r\nimport { readFileSync, writeFileSync } from 'fs';\r\nimport { set, get } from 'lodash';\r\nimport fsPath from 'path';\r\n\r\nexport class MenuStructure {\r\n  private static saveFile = 'core/menu-structure.json';\r\n\r\n  public static async generateFromFiles(filePaths: string[]) {\r\n    const menuStructure = await MenuStructureGenerator.generateMenuStructure(filePaths);\r\n    await this.save(menuStructure);\r\n\r\n    return menuStructure;\r\n  }\r\n\r\n  public static async getFileMetas(structure: MenuNode) {\r\n    return MenuStructureParser.getFileMetas(structure);\r\n  }\r\n\r\n  public static async load() {\r\n    const asJson = readFileSync(fsPath.resolve(this.saveFile), { encoding: 'utf8' });\r\n    return JSON.parse(asJson);\r\n  }\r\n\r\n  private static async save(menuStructure) {\r\n    const asJson = `${JSON.stringify({ docs: menuStructure }, null, 2)}\\n`;\r\n    writeFileSync(fsPath.resolve(this.saveFile), asJson, { encoding: 'utf8' });\r\n    await sleep(250); // Allow for windows filesystem to catch up.\r\n  }\r\n\r\n  public static getCurrentVersions(collection: MenuNode, sections = {}) {\r\n    for (const [segment, node] of Object.entries(collection)) {\r\n      if (MenuSegment.isMeta(segment)) continue;\r\n\r\n      if (MenuSegment.isVersionContainer(segment)) {\r\n        const { path, currentVersion } = node.meta;\r\n        set(sections, `${path}`, currentVersion);\r\n      }\r\n\r\n      if (MenuNode.hasChildren(node)) {\r\n        this.getCurrentVersions(node, sections);\r\n      }\r\n    }\r\n\r\n    return sections;\r\n  }\r\n\r\n  static getNodeByUrl(menuStructure, urlPath) {\r\n    return get(menuStructure, urlPath.replace(/^\\/+/, '').split('/').join('.'));\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}