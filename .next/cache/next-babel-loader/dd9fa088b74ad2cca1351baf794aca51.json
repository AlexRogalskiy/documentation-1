{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Mark\\\\Documents\\\\documentation\\\\pages\\\\docs\\\\[...documentation-page].tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { MenuStructure } from '@/tools/menu/menu-structure';\nimport path from 'path';\nimport matter from 'gray-matter';\nimport DocumentationPage from '@/components/pages/docs/documentation-page';\nimport readDirectoryRecursively from '@/core/fs/read-directory-recursively';\nimport generateSearchDefinitionsFromFiles from '@/tools/search/generate-definitions-from-files';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\n// Represents all the markdown documentation pages\nconst Documentation = ({\n  content,\n  data,\n  meta\n}) => /*#__PURE__*/_jsxDEV(DocumentationPage, {\n  content: content,\n  data: data,\n  meta: meta\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 17,\n  columnNumber: 3\n}, this); // Build time: Determines which pages are generated\n\n\nexport const getStaticPaths = async () => {\n  const filePaths = await readDirectoryRecursively(path.resolve('docs/'));\n  const structure = await MenuStructure.generateFromFiles(filePaths);\n  const fileMetas = await MenuStructure.getFileMetas(structure);\n  if (process.env.CI) generateSearchDefinitionsFromFiles(fileMetas);\n  const paths = fileMetas.map(file => ({\n    params: {\n      'documentation-page': file.meta.path.split('/')\n    }\n  }));\n  return {\n    paths,\n    fallback: false\n  };\n};\n// Build time: Generate JSON for each generated page\nexport const getStaticProps = async ({\n  params\n}) => {\n  const {\n    'documentation-page': parts\n  } = params;\n  const structure = await MenuStructure.load();\n  const fileMetas = await MenuStructure.getFileMetas(structure);\n  const seoPath = parts.join('/');\n  const {\n    meta\n  } = fileMetas.find(file => file.meta.path === seoPath);\n  const content = await import(`../../docs/${meta.absolutePath}`);\n\n  const _matter = matter(content.default),\n        {\n    orig\n  } = _matter,\n        data = _objectWithoutProperties(_matter, [\"orig\"]);\n\n  return {\n    props: _objectSpread(_objectSpread({}, data), {}, {\n      meta\n    })\n  };\n};\nexport default Documentation;","map":{"version":3,"sources":["C:/Users/Mark/Documents/documentation/pages/docs/[...documentation-page].tsx"],"names":["MenuStructure","path","matter","DocumentationPage","readDirectoryRecursively","generateSearchDefinitionsFromFiles","Documentation","content","data","meta","getStaticPaths","filePaths","resolve","structure","generateFromFiles","fileMetas","getFileMetas","process","env","CI","paths","map","file","params","split","fallback","getStaticProps","parts","load","seoPath","join","find","absolutePath","default","orig","props"],"mappings":";;;;;;;;;;;;AAAA,SAASA,aAAT,QAA8B,6BAA9B;AACA,OAAOC,IAAP,MAAiB,MAAjB;AAEA,OAAOC,MAAP,MAAmB,aAAnB;AACA,OAAOC,iBAAP,MAA8B,4CAA9B;AACA,OAAOC,wBAAP,MAAqC,sCAArC;AACA,OAAOC,kCAAP,MAA+C,gDAA/C;;;AAQA;AACA,MAAMC,aAAa,GAAG,CAAC;AAAEC,EAAAA,OAAF;AAAWC,EAAAA,IAAX;AAAiBC,EAAAA;AAAjB,CAAD,kBACpB,QAAC,iBAAD;AAAmB,EAAA,OAAO,EAAEF,OAA5B;AAAqC,EAAA,IAAI,EAAEC,IAA3C;AAAiD,EAAA,IAAI,EAAEC;AAAvD;AAAA;AAAA;AAAA;AAAA,QADF,C,CAIA;;;AACA,OAAO,MAAMC,cAA8B,GAAG,YAAY;AACxD,QAAMC,SAAS,GAAG,MAAMP,wBAAwB,CAACH,IAAI,CAACW,OAAL,CAAa,OAAb,CAAD,CAAhD;AACA,QAAMC,SAAS,GAAG,MAAMb,aAAa,CAACc,iBAAd,CAAgCH,SAAhC,CAAxB;AACA,QAAMI,SAAS,GAAG,MAAMf,aAAa,CAACgB,YAAd,CAA2BH,SAA3B,CAAxB;AAEA,MAAII,OAAO,CAACC,GAAR,CAAYC,EAAhB,EAAoBd,kCAAkC,CAACU,SAAD,CAAlC;AAEpB,QAAMK,KAAK,GAAGL,SAAS,CAACM,GAAV,CAAeC,IAAD,KAAW;AACrCC,IAAAA,MAAM,EAAE;AAAE,4BAAsBD,IAAI,CAACb,IAAL,CAAUR,IAAV,CAAeuB,KAAf,CAAqB,GAArB;AAAxB;AAD6B,GAAX,CAAd,CAAd;AAIA,SAAO;AAAEJ,IAAAA,KAAF;AAASK,IAAAA,QAAQ,EAAE;AAAnB,GAAP;AACD,CAZM;AAkBP;AACA,OAAO,MAAMC,cAA8B,GAAG,OAAO;AAAEH,EAAAA;AAAF,CAAP,KAAmC;AAC/E,QAAM;AAAE,0BAAsBI;AAAxB,MAAkCJ,MAAxC;AAEA,QAAMV,SAAS,GAAG,MAAMb,aAAa,CAAC4B,IAAd,EAAxB;AACA,QAAMb,SAAS,GAAG,MAAMf,aAAa,CAACgB,YAAd,CAA2BH,SAA3B,CAAxB;AAEA,QAAMgB,OAAO,GAAGF,KAAK,CAACG,IAAN,CAAW,GAAX,CAAhB;AACA,QAAM;AAAErB,IAAAA;AAAF,MAAWM,SAAS,CAACgB,IAAV,CAAgBT,IAAD,IAAUA,IAAI,CAACb,IAAL,CAAUR,IAAV,KAAmB4B,OAA5C,CAAjB;AAEA,QAAMtB,OAAO,GAAG,MAAM,OAAQ,cAAaE,IAAI,CAACuB,YAAa,EAAvC,CAAtB;;AACA,kBAA0B9B,MAAM,CAACK,OAAO,CAAC0B,OAAT,CAAhC;AAAA,QAAM;AAAEC,IAAAA;AAAF,GAAN;AAAA,QAAiB1B,IAAjB;;AAEA,SAAO;AAAE2B,IAAAA,KAAK,kCAAO3B,IAAP;AAAaC,MAAAA;AAAb;AAAP,GAAP;AACD,CAbM;AAeP,eAAeH,aAAf","sourcesContent":["import { MenuStructure } from '@/tools/menu/menu-structure';\r\nimport path from 'path';\r\nimport { GetStaticProps, GetStaticPaths } from 'next';\r\nimport matter from 'gray-matter';\r\nimport DocumentationPage from '@/components/pages/docs/documentation-page';\r\nimport readDirectoryRecursively from '@/core/fs/read-directory-recursively';\r\nimport generateSearchDefinitionsFromFiles from '@/tools/search/generate-definitions-from-files';\r\n\r\ninterface Props {\r\n  content: string;\r\n  data: { title: string; date: string };\r\n  meta: { [key: string]: any };\r\n}\r\n\r\n// Represents all the markdown documentation pages\r\nconst Documentation = ({ content, data, meta }: Props) => (\r\n  <DocumentationPage content={content} data={data} meta={meta} />\r\n);\r\n\r\n// Build time: Determines which pages are generated\r\nexport const getStaticPaths: GetStaticPaths = async () => {\r\n  const filePaths = await readDirectoryRecursively(path.resolve('docs/'));\r\n  const structure = await MenuStructure.generateFromFiles(filePaths);\r\n  const fileMetas = await MenuStructure.getFileMetas(structure);\r\n\r\n  if (process.env.CI) generateSearchDefinitionsFromFiles(fileMetas);\r\n\r\n  const paths = fileMetas.map((file) => ({\r\n    params: { 'documentation-page': file.meta.path.split('/') },\r\n  }));\r\n\r\n  return { paths, fallback: false };\r\n};\r\n\r\ninterface StaticProps {\r\n  params: { [key: string]: string[] };\r\n}\r\n\r\n// Build time: Generate JSON for each generated page\r\nexport const getStaticProps: GetStaticProps = async ({ params }: StaticProps) => {\r\n  const { 'documentation-page': parts } = params;\r\n\r\n  const structure = await MenuStructure.load();\r\n  const fileMetas = await MenuStructure.getFileMetas(structure);\r\n\r\n  const seoPath = parts.join('/');\r\n  const { meta } = fileMetas.find((file) => file.meta.path === seoPath);\r\n\r\n  const content = await import(`../../docs/${meta.absolutePath}`);\r\n  const { orig, ...data } = matter(content.default);\r\n\r\n  return { props: { ...data, meta } };\r\n};\r\n\r\nexport default Documentation;\r\n"]},"metadata":{},"sourceType":"module"}