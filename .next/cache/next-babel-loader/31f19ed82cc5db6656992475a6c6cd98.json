{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport { get, has } from 'lodash';\nimport { MenuSegment } from '@/tools/menu/menu-segment';\nexport var MenuNode = /*#__PURE__*/function () {\n  function MenuNode() {\n    _classCallCheck(this, MenuNode);\n  }\n\n  _createClass(MenuNode, null, [{\n    key: \"isFile\",\n    value: function isFile(node) {\n      return get(node, 'meta.type') === 'file';\n    }\n  }, {\n    key: \"isFolder\",\n    value: function isFolder(node) {\n      return get(node, 'meta.type') === 'folder';\n    }\n  }, {\n    key: \"isPage\",\n    value: function isPage(node) {\n      return this.isFile(node);\n    }\n  }, {\n    key: \"isVersion\",\n    value: function isVersion(node) {\n      return get(node, 'meta.type') === 'version';\n    }\n  }, {\n    key: \"hasChildren\",\n    value: function hasChildren(node) {\n      return typeof node === 'object';\n    }\n  }, {\n    key: \"hasVersionContainer\",\n    value: function hasVersionContainer(node) {\n      return has(node, MenuSegment.versionContainerIdentifier);\n    }\n  }, {\n    key: \"getCurrentVersion\",\n    value: function getCurrentVersion(versionContainerNode) {\n      return get(versionContainerNode, 'meta.currentVersion');\n    }\n  }, {\n    key: \"findFirstPage\",\n    value: function findFirstPage(menuNode) {\n      if (menuNode && MenuNode.isFolder(menuNode)) {\n        var _page$meta;\n\n        var page = MenuNode.findFirstPageInFolder(menuNode);\n        return (page === null || page === void 0 ? void 0 : (_page$meta = page.meta) === null || _page$meta === void 0 ? void 0 : _page$meta.path) || null;\n      }\n\n      return null;\n    }\n  }, {\n    key: \"findFirstPageInFolder\",\n    value: function findFirstPageInFolder(menuNode) {\n      var fileMetas = [];\n      var containers = [];\n\n      for (var _i = 0, _Object$entries = Object.entries(menuNode); _i < _Object$entries.length; _i++) {\n        var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n            segment = _Object$entries$_i[0],\n            node = _Object$entries$_i[1];\n\n        if (MenuSegment.isMeta(segment)) continue;\n\n        if (MenuNode.isFile(node)) {\n          fileMetas.push(node);\n        }\n\n        if (MenuSegment.isVersionContainer(segment)) {\n          var currentVersion = this.getCurrentVersion(node);\n          containers.push(node[currentVersion]);\n        }\n\n        if (MenuNode.isFolder(node) || MenuNode.isVersion(node)) {\n          containers.push(node);\n        }\n      } // Todo sort by fileMeta.meta.order asc\n\n\n      if (fileMetas.length > 0) {\n        return fileMetas[0];\n      }\n\n      for (var _i2 = 0, _containers = containers; _i2 < _containers.length; _i2++) {\n        var container = _containers[_i2];\n        var result = this.findFirstPageInFolder(container);\n\n        if (result) {\n          return result;\n        }\n      }\n\n      return null;\n    }\n  }]);\n\n  return MenuNode;\n}();","map":{"version":3,"sources":["C:/Users/Mark/Documents/documentation/tools/menu/menu-node.ts"],"names":["get","has","MenuSegment","MenuNode","node","isFile","versionContainerIdentifier","versionContainerNode","menuNode","isFolder","page","findFirstPageInFolder","meta","path","fileMetas","containers","Object","entries","segment","isMeta","push","isVersionContainer","currentVersion","getCurrentVersion","isVersion","length","container","result"],"mappings":";;;AAAA,SAASA,GAAT,EAAcC,GAAd,QAAyB,QAAzB;AAEA,SAASC,WAAT,QAA4B,2BAA5B;AAQA,WAAaC,QAAb;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,WACE,gBAAcC,IAAd,EAA8B;AAC5B,aAAOJ,GAAG,CAACI,IAAD,EAAO,WAAP,CAAH,KAA2B,MAAlC;AACD;AAHH;AAAA;AAAA,WAKE,kBAAgBA,IAAhB,EAAgC;AAC9B,aAAOJ,GAAG,CAACI,IAAD,EAAO,WAAP,CAAH,KAA2B,QAAlC;AACD;AAPH;AAAA;AAAA,WASE,gBAAcA,IAAd,EAA8B;AAC5B,aAAO,KAAKC,MAAL,CAAYD,IAAZ,CAAP;AACD;AAXH;AAAA;AAAA,WAaE,mBAAiBA,IAAjB,EAAiC;AAC/B,aAAOJ,GAAG,CAACI,IAAD,EAAO,WAAP,CAAH,KAA2B,SAAlC;AACD;AAfH;AAAA;AAAA,WAiBE,qBAAmBA,IAAnB,EAAmC;AACjC,aAAO,OAAOA,IAAP,KAAgB,QAAvB;AACD;AAnBH;AAAA;AAAA,WAqBE,6BAA2BA,IAA3B,EAA2C;AACzC,aAAOH,GAAG,CAACG,IAAD,EAAOF,WAAW,CAACI,0BAAnB,CAAV;AACD;AAvBH;AAAA;AAAA,WAyBE,2BAAyBC,oBAAzB,EAAyD;AACvD,aAAOP,GAAG,CAACO,oBAAD,EAAuB,qBAAvB,CAAV;AACD;AA3BH;AAAA;AAAA,WA6BE,uBAAqBC,QAArB,EAAyC;AACvC,UAAIA,QAAQ,IAAIL,QAAQ,CAACM,QAAT,CAAkBD,QAAlB,CAAhB,EAA6C;AAAA;;AAC3C,YAAME,IAAI,GAAGP,QAAQ,CAACQ,qBAAT,CAA+BH,QAA/B,CAAb;AACA,eAAO,CAAAE,IAAI,SAAJ,IAAAA,IAAI,WAAJ,0BAAAA,IAAI,CAAEE,IAAN,0DAAYC,IAAZ,KAAoB,IAA3B;AACD;;AAED,aAAO,IAAP;AACD;AApCH;AAAA;AAAA,WAsCE,+BAA6BL,QAA7B,EAAiD;AAC/C,UAAMM,SAAS,GAAG,EAAlB;AACA,UAAMC,UAAU,GAAG,EAAnB;;AAEA,yCAA8BC,MAAM,CAACC,OAAP,CAAeT,QAAf,CAA9B,qCAAwD;AAAA;AAAA,YAA5CU,OAA4C;AAAA,YAAnCd,IAAmC;;AACtD,YAAIF,WAAW,CAACiB,MAAZ,CAAmBD,OAAnB,CAAJ,EAAiC;;AAEjC,YAAIf,QAAQ,CAACE,MAAT,CAAgBD,IAAhB,CAAJ,EAA2B;AACzBU,UAAAA,SAAS,CAACM,IAAV,CAAehB,IAAf;AACD;;AAED,YAAIF,WAAW,CAACmB,kBAAZ,CAA+BH,OAA/B,CAAJ,EAA6C;AAC3C,cAAMI,cAAc,GAAG,KAAKC,iBAAL,CAAuBnB,IAAvB,CAAvB;AACAW,UAAAA,UAAU,CAACK,IAAX,CAAgBhB,IAAI,CAACkB,cAAD,CAApB;AACD;;AAED,YAAInB,QAAQ,CAACM,QAAT,CAAkBL,IAAlB,KAA2BD,QAAQ,CAACqB,SAAT,CAAmBpB,IAAnB,CAA/B,EAAyD;AACvDW,UAAAA,UAAU,CAACK,IAAX,CAAgBhB,IAAhB;AACD;AACF,OAnB8C,CAqB/C;;;AACA,UAAIU,SAAS,CAACW,MAAV,GAAmB,CAAvB,EAA0B;AACxB,eAAOX,SAAS,CAAC,CAAD,CAAhB;AACD;;AAED,sCAAwBC,UAAxB,mCAAoC;AAA/B,YAAMW,SAAS,mBAAf;AACH,YAAMC,MAAM,GAAG,KAAKhB,qBAAL,CAA2Be,SAA3B,CAAf;;AACA,YAAIC,MAAJ,EAAY;AACV,iBAAOA,MAAP;AACD;AACF;;AAED,aAAO,IAAP;AACD;AAxEH;;AAAA;AAAA","sourcesContent":["import { get, has } from 'lodash';\r\n\r\nimport { MenuSegment } from '@/tools/menu/menu-segment';\r\n\r\nexport interface MenuNode {\r\n  [key: string]: any;\r\n}\r\n\r\nexport type MenuNodeType = 'file' | 'folder' | 'version' | 'identifier';\r\n\r\nexport class MenuNode {\r\n  static isFile(node: MenuNode) {\r\n    return get(node, 'meta.type') === 'file';\r\n  }\r\n\r\n  static isFolder(node: MenuNode) {\r\n    return get(node, 'meta.type') === 'folder';\r\n  }\r\n\r\n  static isPage(node: MenuNode) {\r\n    return this.isFile(node);\r\n  }\r\n\r\n  static isVersion(node: MenuNode) {\r\n    return get(node, 'meta.type') === 'version';\r\n  }\r\n\r\n  static hasChildren(node: MenuNode) {\r\n    return typeof node === 'object';\r\n  }\r\n\r\n  static hasVersionContainer(node: MenuNode) {\r\n    return has(node, MenuSegment.versionContainerIdentifier);\r\n  }\r\n\r\n  static getCurrentVersion(versionContainerNode: MenuNode) {\r\n    return get(versionContainerNode, 'meta.currentVersion');\r\n  }\r\n\r\n  static findFirstPage(menuNode: MenuNode) {\r\n    if (menuNode && MenuNode.isFolder(menuNode)) {\r\n      const page = MenuNode.findFirstPageInFolder(menuNode);\r\n      return page?.meta?.path || null;\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  static findFirstPageInFolder(menuNode: MenuNode) {\r\n    const fileMetas = [];\r\n    const containers = [];\r\n\r\n    for (const [segment, node] of Object.entries(menuNode)) {\r\n      if (MenuSegment.isMeta(segment)) continue;\r\n\r\n      if (MenuNode.isFile(node)) {\r\n        fileMetas.push(node);\r\n      }\r\n\r\n      if (MenuSegment.isVersionContainer(segment)) {\r\n        const currentVersion = this.getCurrentVersion(node);\r\n        containers.push(node[currentVersion]);\r\n      }\r\n\r\n      if (MenuNode.isFolder(node) || MenuNode.isVersion(node)) {\r\n        containers.push(node);\r\n      }\r\n    }\r\n\r\n    // Todo sort by fileMeta.meta.order asc\r\n    if (fileMetas.length > 0) {\r\n      return fileMetas[0];\r\n    }\r\n\r\n    for (const container of containers) {\r\n      const result = this.findFirstPageInFolder(container);\r\n      if (result) {\r\n        return result;\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}