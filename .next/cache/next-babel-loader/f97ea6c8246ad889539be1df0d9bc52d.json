{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { MenuNode } from '@/tools/menu/menu-node';\nimport { MenuSegment } from '@/tools/menu/menu-segment';\nimport React, { useContext } from 'react';\nimport { Menu } from 'antd';\nimport { map } from 'lodash';\nimport Link from 'next/link';\nimport VersionedTitle from '@/components/pages/docs/menu/versioned-title';\nimport MenuContext from '@/components/pages/docs/menu/menu-context';\nimport { useSelector } from 'react-redux';\nimport { selectedVersionsSelector } from '@/logic/versions/selected-version-slice';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst {\n  SubMenu,\n  Item\n} = Menu;\n\nconst populateMenuRecursively = (collection, selections) => {\n  // Todo sorting by item.meta.order\n  return map(Object.entries(collection), ([segment, node]) => {\n    if (MenuSegment.isMeta(segment)) {\n      return null;\n    }\n\n    if (MenuNode.isPage(node)) {\n      return /*#__PURE__*/_jsx(Item, {\n        children: /*#__PURE__*/_jsx(Link, {\n          href: \"/docs/[...documentation-page]\",\n          as: `/docs/${node.meta.path}`,\n          children: /*#__PURE__*/_jsx(\"a\", {\n            children: node.name\n          })\n        })\n      }, `/docs/${node.meta.path}`);\n    }\n\n    if (MenuSegment.isVersionContainer(segment)) {\n      const {\n        meta\n      } = node,\n            versions = _objectWithoutProperties(node, [\"meta\"]);\n\n      const selectedVersion = selections[meta.path];\n      return map(Object.entries(versions), ([versionSegment, versionNode]) => {\n        // Todo - take hardcoded selected version from globally selected version for meta.section\n        return versionSegment === selectedVersion ? populateMenuRecursively(versionNode, selections) : [];\n      });\n    } // container with menu items\n\n\n    return /*#__PURE__*/_jsx(SubMenu, {\n      title: MenuSegment.toTitle(segment),\n      children: populateMenuRecursively(node, selections)\n    }, node.meta.path);\n  });\n};\n\nconst VersionedSubMenu = (_ref) => {\n  let {\n    section,\n    title,\n    icon,\n    children\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"section\", \"title\", \"icon\", \"children\"]);\n\n  const selectedVersions = useSelector(selectedVersionsSelector);\n  const {\n    menuStructure\n  } = useContext(MenuContext);\n  const {\n    docs\n  } = menuStructure;\n  return /*#__PURE__*/_jsxs(SubMenu, _objectSpread(_objectSpread({}, props), {}, {\n    icon: icon,\n    title: /*#__PURE__*/_jsx(VersionedTitle, {\n      section: section,\n      title: title\n    }),\n    children: [populateMenuRecursively(docs[section], selectedVersions), children]\n  }));\n};\n\nVersionedSubMenu.defaultProps = {\n  children: null\n};\nexport default VersionedSubMenu;","map":null,"metadata":{},"sourceType":"module"}