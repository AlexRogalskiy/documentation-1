{"ast":null,"code":"function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport { cloneDeep } from 'lodash';\n\nvar determineLevel = function determineLevel(line) {\n  for (var level = 0; level <= 5; level += 1) {\n    var _char = line[level];\n\n    if (_char !== '#') {\n      return level;\n    }\n  }\n\n  return null;\n};\n\nvar extractTitle = function extractTitle(line) {\n  if (!line) {\n    // eslint-disable-next-line no-console\n    console.log(\"\\x1B[33m%s\\x1B[0m  - %s\", 'warn', 'Unable to extract title from', line);\n    return '';\n  }\n\n  if (typeof line !== 'string') {\n    // eslint-disable-next-line no-console\n    console.error(\"Expected heading to consist of a string. That way we can easily use them as anchors.\\n      The following does not adhere to this rule: \\\"\".concat(JSON.stringify(line, null, 2), \"\\\"\"));\n  }\n\n  return line.replace(/^[\\s#]*/, '').trim();\n};\n\nexport var extractAnchorId = function extractAnchorId(line) {\n  return extractTitle(line).toLowerCase().split(' ').join('-');\n};\n\nvar forceSingleLine = function forceSingleLine(content) {\n  // One space for each newline\n  return content.replace(/\\n/, ' ');\n};\n\nvar extractSummary = function extractSummary(rawContent) {\n  var maxLength = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 100;\n  var content = forceSingleLine(rawContent);\n\n  if (content.length <= maxLength) {\n    return content;\n  }\n\n  return \"\".concat(content.slice(0, Math.min(content.length, maxLength - 3)), \"...\");\n};\n\nvar isHeading = function isHeading(line) {\n  return line.startsWith('#');\n};\n\nvar parseLine = function parseLine(line) {\n  return line;\n};\n\nvar finalisePreviousSection = function finalisePreviousSection(section) {\n  var content = section.content.trimLeft('\\n').trimRight('\\n');\n  var finalisedSection = cloneDeep(section);\n  finalisedSection.content = content || '(empty)';\n  finalisedSection.summary = extractSummary(content);\n  return finalisedSection;\n};\n\nvar createSectionCreator = function createSectionCreator(meta) {\n  return function (line) {\n    var path = meta.path,\n        version = meta.version;\n    return {\n      title: extractTitle(line),\n      level: determineLevel(line),\n      path: path,\n      version: version,\n      anchorId: extractAnchorId(line),\n      content: ''\n    };\n  };\n};\n\nexport default function extractSections(meta, contents) {\n  var createNewSectionFromLine = createSectionCreator(meta);\n  var lines = contents.split('\\n');\n  var sections = [];\n  var section;\n  var skippedLines = 0;\n\n  var _iterator = _createForOfIteratorHelper(lines),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var line = _step.value;\n\n      if (isHeading(line)) {\n        if (section) {\n          sections.push(finalisePreviousSection(section));\n        }\n\n        section = createNewSectionFromLine(line);\n        continue;\n      }\n\n      if (section) {\n        section.content += \"\\n\".concat(parseLine(line));\n        continue;\n      }\n\n      skippedLines += 1;\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  if (section) {\n    sections.push(finalisePreviousSection(section));\n  }\n\n  if (skippedLines >= 1) {\n    // eslint-disable-next-line no-console\n    console.log(\"Skipped \".concat(skippedLines, \" lines that occurred before any title\"));\n  }\n\n  return sections;\n}","map":null,"metadata":{},"sourceType":"module"}