{"ast":null,"code":"import { cloneDeep } from 'lodash';\n\nconst determineLevel = line => {\n  for (let level = 0; level <= 5; level += 1) {\n    const char = line[level];\n\n    if (char !== '#') {\n      return level;\n    }\n  }\n\n  return null;\n};\n\nconst extractTitle = line => {\n  if (!line) {\n    // eslint-disable-next-line no-console\n    console.log('\\u001B[33m%s\\u001B[0m  - %s', 'warn', 'Unable to extract title from', line);\n    return '';\n  }\n\n  if (typeof line !== 'string') {\n    // eslint-disable-next-line no-console\n    console.error(`Expected heading to consist of a string. That way we can easily use them as anchors.\n      The following does not adhere to this rule: \"${JSON.stringify(line, null, 2)}\"`);\n  }\n\n  return line.replace(/^[\\s#]*/, '').trim();\n};\n\nexport const extractAnchorId = line => {\n  return extractTitle(line).toLowerCase().split(' ').join('-');\n};\n\nconst forceSingleLine = content => {\n  // One space for each newline\n  return content.replace(/\\n/, ' ');\n};\n\nconst extractSummary = (rawContent, maxLength = 100) => {\n  const content = forceSingleLine(rawContent);\n\n  if (content.length <= maxLength) {\n    return content;\n  }\n\n  return `${content.slice(0, Math.min(content.length, maxLength - 3))}...`;\n};\n\nconst isHeading = line => {\n  return line.startsWith('#');\n};\n\nconst parseLine = line => {\n  return line;\n};\n\nconst finalisePreviousSection = section => {\n  const content = section.content.trimLeft('\\n').trimRight('\\n');\n  const finalisedSection = cloneDeep(section);\n  finalisedSection.content = content || '(empty)';\n  finalisedSection.summary = extractSummary(content);\n  return finalisedSection;\n};\n\nconst createSectionCreator = meta => {\n  return line => {\n    const {\n      path,\n      version\n    } = meta;\n    return {\n      title: extractTitle(line),\n      level: determineLevel(line),\n      path,\n      version,\n      anchorId: extractAnchorId(line),\n      content: ''\n    };\n  };\n};\n\nexport default function extractSections(meta, contents) {\n  const createNewSectionFromLine = createSectionCreator(meta);\n  const lines = contents.split('\\n');\n  const sections = [];\n  let section;\n  let skippedLines = 0;\n\n  for (const line of lines) {\n    if (isHeading(line)) {\n      if (section) {\n        sections.push(finalisePreviousSection(section));\n      }\n\n      section = createNewSectionFromLine(line);\n      continue;\n    }\n\n    if (section) {\n      section.content += `\\n${parseLine(line)}`;\n      continue;\n    }\n\n    skippedLines += 1;\n  }\n\n  if (section) {\n    sections.push(finalisePreviousSection(section));\n  }\n\n  if (skippedLines >= 1) {\n    // eslint-disable-next-line no-console\n    console.log(`Skipped ${skippedLines} lines that occurred before any title`);\n  }\n\n  return sections;\n}","map":null,"metadata":{},"sourceType":"module"}