{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport { get, has } from 'lodash';\nimport { MenuSegment } from '@/tools/menu/menu-segment';\nexport var MenuNode = /*#__PURE__*/function () {\n  function MenuNode() {\n    _classCallCheck(this, MenuNode);\n  }\n\n  _createClass(MenuNode, null, [{\n    key: \"isFile\",\n    value: function isFile(node) {\n      return get(node, 'meta.type') === 'file';\n    }\n  }, {\n    key: \"isFolder\",\n    value: function isFolder(node) {\n      return get(node, 'meta.type') === 'folder';\n    }\n  }, {\n    key: \"isPage\",\n    value: function isPage(node) {\n      return this.isFile(node);\n    }\n  }, {\n    key: \"isVersion\",\n    value: function isVersion(node) {\n      return get(node, 'meta.type') === 'version';\n    }\n  }, {\n    key: \"hasChildren\",\n    value: function hasChildren(node) {\n      return typeof node === 'object';\n    }\n  }, {\n    key: \"hasVersionContainer\",\n    value: function hasVersionContainer(node) {\n      return has(node, MenuSegment.versionContainerIdentifier);\n    }\n  }, {\n    key: \"getCurrentVersion\",\n    value: function getCurrentVersion(versionContainerNode) {\n      return get(versionContainerNode, 'meta.currentVersion');\n    }\n  }, {\n    key: \"findFirstPage\",\n    value: function findFirstPage(menuNode) {\n      if (menuNode && MenuNode.isFolder(menuNode)) {\n        var _page$meta;\n\n        var page = MenuNode.findFirstPageInFolder(menuNode);\n        return (page === null || page === void 0 ? void 0 : (_page$meta = page.meta) === null || _page$meta === void 0 ? void 0 : _page$meta.path) || null;\n      }\n\n      return null;\n    }\n  }, {\n    key: \"findFirstPageInFolder\",\n    value: function findFirstPageInFolder(menuNode) {\n      var fileMetas = [];\n      var containers = [];\n\n      for (var _i = 0, _Object$entries = Object.entries(menuNode); _i < _Object$entries.length; _i++) {\n        var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n            segment = _Object$entries$_i[0],\n            node = _Object$entries$_i[1];\n\n        if (MenuSegment.isMeta(segment)) continue;\n\n        if (MenuNode.isFile(node)) {\n          fileMetas.push(node);\n        }\n\n        if (MenuSegment.isVersionContainer(segment)) {\n          var currentVersion = this.getCurrentVersion(node);\n          containers.push(node[currentVersion]);\n        }\n\n        if (MenuNode.isFolder(node) || MenuNode.isVersion(node)) {\n          containers.push(node);\n        }\n      } // Todo sort by fileMeta.meta.order asc\n\n\n      if (fileMetas.length > 0) {\n        return fileMetas[0];\n      }\n\n      for (var _i2 = 0, _containers = containers; _i2 < _containers.length; _i2++) {\n        var container = _containers[_i2];\n        var result = this.findFirstPageInFolder(container);\n\n        if (result) {\n          return result;\n        }\n      }\n\n      return null;\n    }\n  }]);\n\n  return MenuNode;\n}();","map":null,"metadata":{},"sourceType":"module"}