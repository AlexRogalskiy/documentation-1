{"ast":null,"code":"function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { MenuNode } from '@/tools/menu/menu-node';\nimport { MenuSegment } from '@/tools/menu/menu-segment';\nimport React, { useContext } from 'react';\nimport { map } from 'lodash';\nimport { useDispatch, useSelector } from 'react-redux';\nimport MenuContext from '@/components/pages/docs/menu/menu-context';\nimport { selectedVersionsSelector, updateSelection } from '@/logic/versions/selected-version-slice';\nimport styles from './versioned-title.module.scss';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nconst mapVersions = (section, collection, selectedOption) => {\n  const dispatch = useDispatch();\n\n  const onChange = event => dispatch(updateSelection({\n    section,\n    selection: event.target.value\n  }));\n\n  const noPropagation = event => event.stopPropagation();\n\n  return /*#__PURE__*/_jsx(\"div\", {\n    style: {\n      display: 'inline-block',\n      float: 'right',\n      paddingRight: 4\n    },\n    children: /*#__PURE__*/_jsx(\"select\", {\n      value: selectedOption,\n      className: styles.versionSelect,\n      onChange: onChange,\n      onClick: noPropagation,\n      children: map(Object.entries(collection), ([segment, node]) => {\n        if (!MenuSegment.isVersionContainer(segment)) return null;\n\n        const {\n          meta\n        } = node,\n              versions = _objectWithoutProperties(node, [\"meta\"]);\n\n        return map(Object.entries(versions), ([version]) => {\n          return /*#__PURE__*/_jsx(\"option\", {\n            value: version,\n            label: version\n          }, version);\n        });\n      })\n    })\n  });\n};\n\nconst VersionedTitle = ({\n  section,\n  title\n}) => {\n  const {\n    menuStructure\n  } = useContext(MenuContext);\n  const selected = useSelector(selectedVersionsSelector);\n  const {\n    docs\n  } = menuStructure;\n\n  if (!MenuNode.hasVersionContainer(docs[section])) {\n    return title;\n  }\n\n  return /*#__PURE__*/_jsxs(\"span\", {\n    children: [/*#__PURE__*/_jsx(\"span\", {\n      children: title\n    }), mapVersions(section, docs[section], selected[section])]\n  });\n};\n\nexport default VersionedTitle;","map":null,"metadata":{},"sourceType":"module"}