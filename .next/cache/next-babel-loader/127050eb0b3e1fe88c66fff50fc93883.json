{"ast":null,"code":"import { get, has } from 'lodash';\nimport { MenuSegment } from '@/tools/menu/menu-segment';\nexport class MenuNode {\n  static isFile(node) {\n    return get(node, 'meta.type') === 'file';\n  }\n\n  static isFolder(node) {\n    return get(node, 'meta.type') === 'folder';\n  }\n\n  static isPage(node) {\n    return this.isFile(node);\n  }\n\n  static isVersion(node) {\n    return get(node, 'meta.type') === 'version';\n  }\n\n  static hasChildren(node) {\n    return typeof node === 'object';\n  }\n\n  static hasVersionContainer(node) {\n    return has(node, MenuSegment.versionContainerIdentifier);\n  }\n\n  static getCurrentVersion(versionContainerNode) {\n    return get(versionContainerNode, 'meta.currentVersion');\n  }\n\n  static findFirstPage(menuNode) {\n    if (menuNode && MenuNode.isFolder(menuNode)) {\n      var _page$meta;\n\n      const page = MenuNode.findFirstPageInFolder(menuNode);\n      return (page === null || page === void 0 ? void 0 : (_page$meta = page.meta) === null || _page$meta === void 0 ? void 0 : _page$meta.path) || null;\n    }\n\n    return null;\n  }\n\n  static findFirstPageInFolder(menuNode) {\n    const fileMetas = [];\n    const containers = [];\n\n    for (const [segment, node] of Object.entries(menuNode)) {\n      if (MenuSegment.isMeta(segment)) continue;\n\n      if (MenuNode.isFile(node)) {\n        fileMetas.push(node);\n      }\n\n      if (MenuSegment.isVersionContainer(segment)) {\n        const currentVersion = this.getCurrentVersion(node);\n        containers.push(node[currentVersion]);\n      }\n\n      if (MenuNode.isFolder(node) || MenuNode.isVersion(node)) {\n        containers.push(node);\n      }\n    } // Todo sort by fileMeta.meta.order asc\n\n\n    if (fileMetas.length > 0) {\n      return fileMetas[0];\n    }\n\n    for (const container of containers) {\n      const result = this.findFirstPageInFolder(container);\n\n      if (result) {\n        return result;\n      }\n    }\n\n    return null;\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Mark/Documents/documentation/tools/menu/menu-node.ts"],"names":["get","has","MenuSegment","MenuNode","isFile","node","isFolder","isPage","isVersion","hasChildren","hasVersionContainer","versionContainerIdentifier","getCurrentVersion","versionContainerNode","findFirstPage","menuNode","page","findFirstPageInFolder","meta","path","fileMetas","containers","segment","Object","entries","isMeta","push","isVersionContainer","currentVersion","length","container","result"],"mappings":"AAAA,SAASA,GAAT,EAAcC,GAAd,QAAyB,QAAzB;AAEA,SAASC,WAAT,QAA4B,2BAA5B;AAQA,OAAO,MAAMC,QAAN,CAAe;AACP,SAANC,MAAM,CAACC,IAAD,EAAiB;AAC5B,WAAOL,GAAG,CAACK,IAAD,EAAO,WAAP,CAAH,KAA2B,MAAlC;AACD;;AAEc,SAARC,QAAQ,CAACD,IAAD,EAAiB;AAC9B,WAAOL,GAAG,CAACK,IAAD,EAAO,WAAP,CAAH,KAA2B,QAAlC;AACD;;AAEY,SAANE,MAAM,CAACF,IAAD,EAAiB;AAC5B,WAAO,KAAKD,MAAL,CAAYC,IAAZ,CAAP;AACD;;AAEe,SAATG,SAAS,CAACH,IAAD,EAAiB;AAC/B,WAAOL,GAAG,CAACK,IAAD,EAAO,WAAP,CAAH,KAA2B,SAAlC;AACD;;AAEiB,SAAXI,WAAW,CAACJ,IAAD,EAAiB;AACjC,WAAO,OAAOA,IAAP,KAAgB,QAAvB;AACD;;AAEyB,SAAnBK,mBAAmB,CAACL,IAAD,EAAiB;AACzC,WAAOJ,GAAG,CAACI,IAAD,EAAOH,WAAW,CAACS,0BAAnB,CAAV;AACD;;AAEuB,SAAjBC,iBAAiB,CAACC,oBAAD,EAAiC;AACvD,WAAOb,GAAG,CAACa,oBAAD,EAAuB,qBAAvB,CAAV;AACD;;AAEmB,SAAbC,aAAa,CAACC,QAAD,EAAqB;AACvC,QAAIA,QAAQ,IAAIZ,QAAQ,CAACG,QAAT,CAAkBS,QAAlB,CAAhB,EAA6C;AAAA;;AAC3C,YAAMC,IAAI,GAAGb,QAAQ,CAACc,qBAAT,CAA+BF,QAA/B,CAAb;AACA,aAAO,CAAAC,IAAI,SAAJ,IAAAA,IAAI,WAAJ,0BAAAA,IAAI,CAAEE,IAAN,0DAAYC,IAAZ,KAAoB,IAA3B;AACD;;AAED,WAAO,IAAP;AACD;;AAE2B,SAArBF,qBAAqB,CAACF,QAAD,EAAqB;AAC/C,UAAMK,SAAS,GAAG,EAAlB;AACA,UAAMC,UAAU,GAAG,EAAnB;;AAEA,SAAK,MAAM,CAACC,OAAD,EAAUjB,IAAV,CAAX,IAA8BkB,MAAM,CAACC,OAAP,CAAeT,QAAf,CAA9B,EAAwD;AACtD,UAAIb,WAAW,CAACuB,MAAZ,CAAmBH,OAAnB,CAAJ,EAAiC;;AAEjC,UAAInB,QAAQ,CAACC,MAAT,CAAgBC,IAAhB,CAAJ,EAA2B;AACzBe,QAAAA,SAAS,CAACM,IAAV,CAAerB,IAAf;AACD;;AAED,UAAIH,WAAW,CAACyB,kBAAZ,CAA+BL,OAA/B,CAAJ,EAA6C;AAC3C,cAAMM,cAAc,GAAG,KAAKhB,iBAAL,CAAuBP,IAAvB,CAAvB;AACAgB,QAAAA,UAAU,CAACK,IAAX,CAAgBrB,IAAI,CAACuB,cAAD,CAApB;AACD;;AAED,UAAIzB,QAAQ,CAACG,QAAT,CAAkBD,IAAlB,KAA2BF,QAAQ,CAACK,SAAT,CAAmBH,IAAnB,CAA/B,EAAyD;AACvDgB,QAAAA,UAAU,CAACK,IAAX,CAAgBrB,IAAhB;AACD;AACF,KAnB8C,CAqB/C;;;AACA,QAAIe,SAAS,CAACS,MAAV,GAAmB,CAAvB,EAA0B;AACxB,aAAOT,SAAS,CAAC,CAAD,CAAhB;AACD;;AAED,SAAK,MAAMU,SAAX,IAAwBT,UAAxB,EAAoC;AAClC,YAAMU,MAAM,GAAG,KAAKd,qBAAL,CAA2Ba,SAA3B,CAAf;;AACA,UAAIC,MAAJ,EAAY;AACV,eAAOA,MAAP;AACD;AACF;;AAED,WAAO,IAAP;AACD;;AAxEmB","sourcesContent":["import { get, has } from 'lodash';\r\n\r\nimport { MenuSegment } from '@/tools/menu/menu-segment';\r\n\r\nexport interface MenuNode {\r\n  [key: string]: any;\r\n}\r\n\r\nexport type MenuNodeType = 'file' | 'folder' | 'version' | 'identifier';\r\n\r\nexport class MenuNode {\r\n  static isFile(node: MenuNode) {\r\n    return get(node, 'meta.type') === 'file';\r\n  }\r\n\r\n  static isFolder(node: MenuNode) {\r\n    return get(node, 'meta.type') === 'folder';\r\n  }\r\n\r\n  static isPage(node: MenuNode) {\r\n    return this.isFile(node);\r\n  }\r\n\r\n  static isVersion(node: MenuNode) {\r\n    return get(node, 'meta.type') === 'version';\r\n  }\r\n\r\n  static hasChildren(node: MenuNode) {\r\n    return typeof node === 'object';\r\n  }\r\n\r\n  static hasVersionContainer(node: MenuNode) {\r\n    return has(node, MenuSegment.versionContainerIdentifier);\r\n  }\r\n\r\n  static getCurrentVersion(versionContainerNode: MenuNode) {\r\n    return get(versionContainerNode, 'meta.currentVersion');\r\n  }\r\n\r\n  static findFirstPage(menuNode: MenuNode) {\r\n    if (menuNode && MenuNode.isFolder(menuNode)) {\r\n      const page = MenuNode.findFirstPageInFolder(menuNode);\r\n      return page?.meta?.path || null;\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  static findFirstPageInFolder(menuNode: MenuNode) {\r\n    const fileMetas = [];\r\n    const containers = [];\r\n\r\n    for (const [segment, node] of Object.entries(menuNode)) {\r\n      if (MenuSegment.isMeta(segment)) continue;\r\n\r\n      if (MenuNode.isFile(node)) {\r\n        fileMetas.push(node);\r\n      }\r\n\r\n      if (MenuSegment.isVersionContainer(segment)) {\r\n        const currentVersion = this.getCurrentVersion(node);\r\n        containers.push(node[currentVersion]);\r\n      }\r\n\r\n      if (MenuNode.isFolder(node) || MenuNode.isVersion(node)) {\r\n        containers.push(node);\r\n      }\r\n    }\r\n\r\n    // Todo sort by fileMeta.meta.order asc\r\n    if (fileMetas.length > 0) {\r\n      return fileMetas[0];\r\n    }\r\n\r\n    for (const container of containers) {\r\n      const result = this.findFirstPageInFolder(container);\r\n      if (result) {\r\n        return result;\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}