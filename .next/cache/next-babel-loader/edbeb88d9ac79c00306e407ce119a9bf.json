{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { MenuStructure } from '@/tools/menu/menu-structure';\nimport path from 'path';\nimport matter from 'gray-matter';\nimport DocumentationPage from '@/components/pages/docs/documentation-page';\nimport readDirectoryRecursively from '@/core/fs/read-directory-recursively';\nimport generateSearchDefinitionsFromFiles from '@/tools/search/generate-definitions-from-files';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\n// Represents all the markdown documentation pages\nconst Documentation = ({\n  content,\n  data,\n  meta\n}) => /*#__PURE__*/_jsx(DocumentationPage, {\n  content: content,\n  data: data,\n  meta: meta\n}); // Build time: Determines which pages are generated\n\n\nexport const getStaticPaths = async () => {\n  const filePaths = await readDirectoryRecursively(path.resolve('docs/'));\n  const structure = await MenuStructure.generateFromFiles(filePaths);\n  const fileMetas = await MenuStructure.getFileMetas(structure);\n  if (process.env.CI) generateSearchDefinitionsFromFiles(fileMetas);\n  const paths = fileMetas.map(file => ({\n    params: {\n      'documentation-page': file.meta.path.split('/')\n    }\n  }));\n  return {\n    paths,\n    fallback: false\n  };\n};\n// Build time: Generate JSON for each generated page\nexport const getStaticProps = async ({\n  params\n}) => {\n  const {\n    'documentation-page': parts\n  } = params;\n  const structure = await MenuStructure.load();\n  const fileMetas = await MenuStructure.getFileMetas(structure);\n  const seoPath = parts.join('/');\n  const {\n    meta\n  } = fileMetas.find(file => file.meta.path === seoPath);\n  const content = await import(`../../docs/${meta.absolutePath}`);\n\n  const _matter = matter(content.default),\n        {\n    orig\n  } = _matter,\n        data = _objectWithoutProperties(_matter, [\"orig\"]);\n\n  return {\n    props: _objectSpread(_objectSpread({}, data), {}, {\n      meta\n    })\n  };\n};\nexport default Documentation;","map":null,"metadata":{},"sourceType":"module"}