{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { MenuNode } from '@/tools/menu/menu-node';\nimport { MenuSegment } from '@/tools/menu/menu-segment';\nimport { MenuStructureGenerator } from '@/tools/menu/menu-structure-generator';\nimport { MenuStructureParser } from '@/tools/menu/menu-structure-parser';\nimport { sleep } from '@/tools/utils';\nimport { readFileSync, writeFileSync } from 'fs';\nimport { set, get } from 'lodash';\nimport fsPath from 'path';\nexport class MenuStructure {\n  static async generateFromFiles(filePaths) {\n    const menuStructure = await MenuStructureGenerator.generateMenuStructure(filePaths);\n    await this.save(menuStructure);\n    return menuStructure;\n  }\n\n  static async getFileMetas(structure) {\n    return MenuStructureParser.getFileMetas(structure);\n  }\n\n  static async load() {\n    const asJson = readFileSync(fsPath.resolve(this.saveFile), {\n      encoding: 'utf8'\n    });\n    return JSON.parse(asJson);\n  }\n\n  static async save(menuStructure) {\n    const asJson = `${JSON.stringify({\n      docs: menuStructure\n    }, null, 2)}\\n`;\n    writeFileSync(fsPath.resolve(this.saveFile), asJson, {\n      encoding: 'utf8'\n    });\n    await sleep(250); // Allow for windows filesystem to catch up.\n  }\n\n  static getCurrentVersions(collection, sections = {}) {\n    for (const [segment, node] of Object.entries(collection)) {\n      if (MenuSegment.isMeta(segment)) continue;\n\n      if (MenuSegment.isVersionContainer(segment)) {\n        const {\n          path,\n          currentVersion\n        } = node.meta;\n        set(sections, `${path}`, currentVersion);\n      }\n\n      if (MenuNode.hasChildren(node)) {\n        this.getCurrentVersions(node, sections);\n      }\n    }\n\n    return sections;\n  }\n\n  static getNodeByUrl(menuStructure, urlPath) {\n    return get(menuStructure, urlPath.replace(/^\\/+/, '').split('/').join('.'));\n  }\n\n}\n\n_defineProperty(MenuStructure, \"saveFile\", 'core/menu-structure.json');","map":null,"metadata":{},"sourceType":"module"}