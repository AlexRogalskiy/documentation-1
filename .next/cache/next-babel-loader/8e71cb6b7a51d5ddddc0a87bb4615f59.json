{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Mark\\\\Documents\\\\documentation\\\\components\\\\markdown\\\\components\\\\embedded-link-or-paragraph.tsx\",\n    _this = this;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n/* eslint-disable react/prop-types */\nimport { Typography } from 'antd';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar Paragraph = Typography.Paragraph;\n\nvar EmbeddedLink = /*#__PURE__*/function () {\n  function EmbeddedLink() {\n    _classCallCheck(this, EmbeddedLink);\n  }\n\n  _createClass(EmbeddedLink, null, [{\n    key: \"fromChildren\",\n    value: function fromChildren(children) {\n      if (children.length === 1) {\n        var potentialLink = children[0];\n\n        if (typeof potentialLink === 'string' && potentialLink.startsWith('https://')) {\n          return potentialLink;\n        }\n      }\n\n      return null;\n    }\n  }, {\n    key: \"isYoutubeLink\",\n    value: function isYoutubeLink(link) {\n      // Starts with youtube\n      if (/^https:\\/\\/www\\.youtube(-nocookie)?\\.com/.test(link)) {\n        // Url as expected\n        if (!/^https:\\/\\/www\\.youtube-nocookie\\.com\\/embed\\/.+$/.test(link)) {\n          throw new Error(\"Found youtube link, but it is malformed.\\n        expected format: \\\"https://www.youtube-nocookie.com/embed/XXXXXXXXXX\\\"\\n        but received: \\\"\".concat(link, \"\\\"\"));\n        }\n\n        return true;\n      }\n\n      return false;\n    }\n  }]);\n\n  return EmbeddedLink;\n}();\n\nvar EmbeddedLinkOrParagraph = function EmbeddedLinkOrParagraph(_ref) {\n  var node = _ref.node,\n      children = _ref.children,\n      props = _objectWithoutProperties(_ref, [\"node\", \"children\"]);\n\n  var regularParagraph = /*#__PURE__*/_jsxDEV(Paragraph, _objectSpread(_objectSpread({}, props), {}, {\n    children: children\n  }), void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 28\n  }, _this);\n\n  var link = EmbeddedLink.fromChildren(children);\n  if (!link) return regularParagraph;\n\n  if (EmbeddedLink.isYoutubeLink(link)) {\n    return /*#__PURE__*/_jsxDEV(\"iframe\", {\n      width: \"560\",\n      height: \"315\",\n      src: link,\n      title: \"YouTube video player\",\n      frameBorder: \"0\",\n      allow: \"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\",\n      allowFullScreen: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, _this);\n  }\n\n  return regularParagraph;\n};\n\n_c = EmbeddedLinkOrParagraph;\nexport default EmbeddedLinkOrParagraph;\n\nvar _c;\n\n$RefreshReg$(_c, \"EmbeddedLinkOrParagraph\");","map":{"version":3,"sources":["C:/Users/Mark/Documents/documentation/components/markdown/components/embedded-link-or-paragraph.tsx"],"names":["Typography","Paragraph","EmbeddedLink","children","length","potentialLink","startsWith","link","test","Error","EmbeddedLinkOrParagraph","node","props","regularParagraph","fromChildren","isYoutubeLink"],"mappings":";;;;;;;;;;;;AAAA;AACA,SAASA,UAAT,QAA2B,MAA3B;;IAEQC,S,GAAcD,U,CAAdC,S;;IAEFC,Y;;;;;;;WACJ,sBAAoBC,QAApB,EAA8B;AAC5B,UAAIA,QAAQ,CAACC,MAAT,KAAoB,CAAxB,EAA2B;AACzB,YAAMC,aAAa,GAAGF,QAAQ,CAAC,CAAD,CAA9B;;AAEA,YAAI,OAAOE,aAAP,KAAyB,QAAzB,IAAqCA,aAAa,CAACC,UAAd,CAAyB,UAAzB,CAAzC,EAA+E;AAC7E,iBAAOD,aAAP;AACD;AACF;;AAED,aAAO,IAAP;AACD;;;WAED,uBAAqBE,IAArB,EAAmC;AACjC;AACA,UAAI,2CAA2CC,IAA3C,CAAgDD,IAAhD,CAAJ,EAA2D;AACzD;AACA,YAAI,CAAC,oDAAoDC,IAApD,CAAyDD,IAAzD,CAAL,EAAqE;AACnE,gBAAM,IAAIE,KAAJ,6JAGWF,IAHX,QAAN;AAKD;;AAED,eAAO,IAAP;AACD;;AAED,aAAO,KAAP;AACD;;;;;;AAGH,IAAMG,uBAAuB,GAAG,SAA1BA,uBAA0B,OAAkC;AAAA,MAA/BC,IAA+B,QAA/BA,IAA+B;AAAA,MAAzBR,QAAyB,QAAzBA,QAAyB;AAAA,MAAZS,KAAY;;AAChE,MAAMC,gBAAgB,gBAAG,QAAC,SAAD,kCAAeD,KAAf;AAAA,cAAuBT;AAAvB;AAAA;AAAA;AAAA;AAAA,WAAzB;;AAEA,MAAMI,IAAI,GAAGL,YAAY,CAACY,YAAb,CAA0BX,QAA1B,CAAb;AACA,MAAI,CAACI,IAAL,EAAW,OAAOM,gBAAP;;AAEX,MAAIX,YAAY,CAACa,aAAb,CAA2BR,IAA3B,CAAJ,EAAsC;AACpC,wBACE;AACE,MAAA,KAAK,EAAC,KADR;AAEE,MAAA,MAAM,EAAC,KAFT;AAGE,MAAA,GAAG,EAAEA,IAHP;AAIE,MAAA,KAAK,EAAC,sBAJR;AAKE,MAAA,WAAW,EAAC,GALd;AAME,MAAA,KAAK,EAAC,0FANR;AAOE,MAAA,eAAe;AAPjB;AAAA;AAAA;AAAA;AAAA,aADF;AAWD;;AAED,SAAOM,gBAAP;AACD,CArBD;;KAAMH,uB;AAuBN,eAAeA,uBAAf","sourcesContent":["/* eslint-disable react/prop-types */\r\nimport { Typography } from 'antd';\r\n\r\nconst { Paragraph } = Typography;\r\n\r\nclass EmbeddedLink {\r\n  static fromChildren(children) {\r\n    if (children.length === 1) {\r\n      const potentialLink = children[0];\r\n\r\n      if (typeof potentialLink === 'string' && potentialLink.startsWith('https://')) {\r\n        return potentialLink;\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  static isYoutubeLink(link: string) {\r\n    // Starts with youtube\r\n    if (/^https:\\/\\/www\\.youtube(-nocookie)?\\.com/.test(link)) {\r\n      // Url as expected\r\n      if (!/^https:\\/\\/www\\.youtube-nocookie\\.com\\/embed\\/.+$/.test(link)) {\r\n        throw new Error(\r\n          `Found youtube link, but it is malformed.\r\n        expected format: \"https://www.youtube-nocookie.com/embed/XXXXXXXXXX\"\r\n        but received: \"${link}\"`,\r\n        );\r\n      }\r\n\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n}\r\n\r\nconst EmbeddedLinkOrParagraph = ({ node, children, ...props }) => {\r\n  const regularParagraph = <Paragraph {...props}>{children}</Paragraph>;\r\n\r\n  const link = EmbeddedLink.fromChildren(children);\r\n  if (!link) return regularParagraph;\r\n\r\n  if (EmbeddedLink.isYoutubeLink(link)) {\r\n    return (\r\n      <iframe\r\n        width=\"560\"\r\n        height=\"315\"\r\n        src={link}\r\n        title=\"YouTube video player\"\r\n        frameBorder=\"0\"\r\n        allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\r\n        allowFullScreen\r\n      />\r\n    );\r\n  }\r\n\r\n  return regularParagraph;\r\n};\r\n\r\nexport default EmbeddedLinkOrParagraph;\r\n"]},"metadata":{},"sourceType":"module"}